#include "Via.hpp"
//#include "tables.h"
#include "dsp/digital.hpp"
//#include "int64.h"



struct MyModule : Module {
	enum ParamIds {
		T1_PARAM,
        T2_PARAM,
        MORPH_PARAM,
        B_PARAM,
        A_PARAM,
        MORPHAMT_PARAM,
        T2AMT_PARAM,
        SH_PARAM,
        TRIG_PARAM,
        FREQ_PARAM,
        LOOP_PARAM,
        UP_PARAM,
        DOWN_PARAM,
        TRIGBUTTON_PARAM,
		NUM_PARAMS
	};
	enum InputIds {
		A_INPUT,
        B_INPUT,
        TRIG_INPUT,
        T1_INPUT,
        T2_INPUT,
        MORPH_INPUT,
        FREEZE_INPUT,
        NUM_INPUTS
	};
	enum OutputIds {
		MAIN_OUTPUT,
        LOGICA_OUTPUT,
        LOGICB_OUTPUT,
        DELTA_OUTPUT,
		NUM_OUTPUTS
	};
	enum LightIds {
		LED1_LIGHT,
        LED2_LIGHT,
        LED3_LIGHT,
        LED4_LIGHT,
        RED_LIGHT,
        GREEN_LIGHT,
        BLUE_LIGHT,
		NUM_LIGHTS
	};
    
    SchmittTrigger trigButton;
    SchmittTrigger trigInput;
    SchmittTrigger freezeInput;
    
    struct Family {
        const uint16_t **attackFamily;
        const uint16_t **releaseFamily;
        uint32_t tableLength;
        uint32_t familySize;
    };


    
    
    Family moogShifted =
    {.attackFamily = moogShiftedAttackFamily,
        .releaseFamily = moogShiftedReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family moogNormalized =
    {.attackFamily = moogNormalizedAttackFamily,
        .releaseFamily = moogNormalizedReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family moogSquare =
    {.attackFamily = moogSquareShiftAttackFamily,
        .releaseFamily = moogSquareShiftReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family moogInverted =
    {.attackFamily = moogInvertedAttackFamily,
        .releaseFamily = moogInvertedReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family perlin =
    {.attackFamily = perlinAttackFamily,
        .releaseFamily = perlinReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family sineFold =
    {.attackFamily = sinefoldAttackFamily,
        .releaseFamily = sinefoldReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family bounce =
    {.attackFamily = bounceAttackFamily,
        .releaseFamily = bounceReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family triodd =
    {.attackFamily = trioddAttackFamily,
        .releaseFamily = trioddReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family triOdd =
    {.attackFamily = trioddAttackFamily,
        .releaseFamily = trioddReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family triFudge =
    {.attackFamily = trifudgeAttackFamily,
        .releaseFamily = trifudgeReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family moog1 =
    {.attackFamily = moog1AttackFamily,
        .releaseFamily = moog1ReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family moog2 =
    {.attackFamily = moog2AttackFamily,
        .releaseFamily = moog2ReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family sawBend =
    {.attackFamily = sawBendAttackFamily,
        .releaseFamily = sawBendReleaseFamily,
        .tableLength = 4,
        .familySize = 5};
    
    Family sawBendLinAtk =
    {.attackFamily = allLinear5_5,
        .releaseFamily = sawBendReleaseFamily,
        .tableLength = 4,
        .familySize = 5};
    
    Family exciteBike =
    {.attackFamily = exciteBikeAttackFamily,
        .releaseFamily = exciteBikeReleaseFamily,
        .tableLength = 8,
        .familySize = 9};
    
    Family exciteBikeLinAtk =
    {.attackFamily = allLinear9_9,
        .releaseFamily = exciteBikeReleaseFamily,
        .tableLength = 8,
        .familySize = 9};
    
    
    Family gauss =
    {.attackFamily = gaussAttackFamily,
        .releaseFamily = gaussReleaseFamily,
        .tableLength = 8,
        .familySize = 33};
    
    Family gauss_noconform =
    {.attackFamily = gauss_noconformAttackFamily,
        .releaseFamily = gauss_noconformReleaseFamily,
        .tableLength = 8,
        .familySize = 33};
    
    Family gauss_low =
    {.attackFamily = gauss_lowAttackFamily,
        .releaseFamily = gauss_lowReleaseFamily,
        .tableLength = 8,
        .familySize = 33};
    
    Family gauss_low_noconform =
    {.attackFamily = gauss_low_noconformAttackFamily,
        .releaseFamily = gauss_low_noconformReleaseFamily,
        .tableLength = 8,
        .familySize = 33};
    
    Family algerian =
    {.attackFamily = algerianAttackFamily,
        .releaseFamily = algerianReleaseFamily,
        .tableLength = 64,
        .familySize = 5};
    
    Family quartSym =
    {.attackFamily = quartSymAttackFamily,
        .releaseFamily = quartSymReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family quartAsym =
    {.attackFamily = quartAsymAttackFamily,
        .releaseFamily = quartAsymReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family superEllipse1Sym =
    {.attackFamily = superEllipse1SymAttackFamily,
        .releaseFamily = superEllipse1SymReleaseFamily,
        .tableLength = 64,
        .familySize = 5};
    
    Family superEllipse1Asym =
    {.attackFamily = superEllipse1AsymAttackFamily,
        .releaseFamily = superEllipse1AsymReleaseFamily,
        .tableLength = 64,
        .familySize = 5};
    
    Family gammaSym =
    {.attackFamily = gammaSymAttackFamily,
        .releaseFamily = gammaSymReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family gammaAsym =
    {.attackFamily = gammaAsymAttackFamily,
        .releaseFamily = gammaAsymReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family sharpExpoSym =
    {.attackFamily = sharpExpoSymAttackFamily,
        .releaseFamily = sharpExpoSymReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family sharpExpoAsym =
    {.attackFamily = sharpExpoAsymAttackFamily,
        .releaseFamily = sharpExpoAsymReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family sharpLinSym =
    {.attackFamily = sharpLinSymAttackFamily,
        .releaseFamily = sharpLinSymReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family sharpLinAsym =
    {.attackFamily = sharpLinAsymAttackFamily,
        .releaseFamily = sharpLinAsymReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family ascendingAdditiveClamp =
    {.attackFamily = ascendingAdditiveClampAttackFamily,
        .releaseFamily = ascendingAdditiveClampReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    
    
    Family moogImpossibleTri =
    {.attackFamily = moogImpossibleTriAttackFamily,
        .releaseFamily = moogImpossibleTriReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    Family steps =
    {.attackFamily = stepsAttackFamily,
        .releaseFamily = stepsReleaseFamily,
        .tableLength = 64,
        .familySize = 9};
    
    
    
    Family impevens =
    {.attackFamily = impshort,
        .releaseFamily = impshort,
        .tableLength = 128,
        .familySize = 17};
    
    
    Family tenor48 =
    {.attackFamily = tenor48AttackFamily,
        .releaseFamily = tenor48ReleaseFamily,
        .tableLength = 128,
        .familySize = 5};
    
    
    Family soprano48 =
    {.attackFamily = soprano48AttackFamily,
        .releaseFamily = soprano48ReleaseFamily,
        .tableLength = 128,
        .familySize = 5};
    
    Family artificial_1 =
    {.attackFamily = artificial_1_48AttackFamily,
        .releaseFamily = artificial_1_48ReleaseFamily,
        .tableLength = 128,
        .familySize = 5};
    
    Family filterbank_24 =
    {.attackFamily = fbank_24,
        .releaseFamily = fbank_24,
        .tableLength = 128,
        .familySize = 9};
    
    Family filterbank_48 =
    {.attackFamily = fbank_48,
        .releaseFamily = fbank_48,
        .tableLength = 128,
        .familySize = 9};
    
    
    
    
    Family skipSaw =
    {.attackFamily = skipsaw,
        .releaseFamily = skipsaw,
        .tableLength = 64,
        .familySize = 5};
    
    Family hopSaw =
    {.attackFamily = hopsaw,
        .releaseFamily = hopsaw,
        .tableLength = 64,
        .familySize = 5};
    
    Family assortedEnvs =
    {.attackFamily = assorted,
        .releaseFamily = assorted,
        .tableLength = 64,
        .familySize = 5};
    
    Family lump3rdDegLinAtk =
    {.attackFamily = allLinear129_5,
        .releaseFamily = lump3rdDeg,
        .tableLength = 128,
        .familySize = 5};
    
    Family lump2ndDegLinAtk =
    {.attackFamily = allLinear129_5,
        .releaseFamily = lump2ndDeg,
        .tableLength = 128,
        .familySize = 5};
    Family doubleLump3rdDegLinAtk =
    {.attackFamily = allLinear129_5,
        .releaseFamily = lump3rdDeg,
        .tableLength = 128,
        .familySize = 5};
    
    Family doubleLump2ndDegLinAtk =
    {.attackFamily = allLinear129_5,
        .releaseFamily = lump2ndDeg,
        .tableLength = 128,
        .familySize = 5};
    
    Family threeBounceLinAtk =
    {.attackFamily = allLinear65_3,
        .releaseFamily = threeBounce,
        .tableLength = 64,
        .familySize = 3};
    
    Family threeSineFoldsLinAtk =
    {.attackFamily = allLinear65_3,
        .releaseFamily = threeSineFolds,
        .tableLength = 64,
        .familySize = 3};
    
    
    
    
    
    
    
    
    
    
    const int lookuptable[4096] = {65536 , 65647 , 65758 , 65870 , 65981 , 66093 , 66205 , 66317 , 66429 , 66542 , 66654 , 66767 , 66880 , 66994 , 67107 , 67221 , 67335 , 67449 , 67563 , 67677 , 67792 , 67907 , 68022 , 68137 , 68252 , 68368 , 68484 , 68600 , 68716 , 68832 , 68949 , 69066 , 69183 , 69300 , 69417 , 69535 , 69653 , 69771 , 69889 , 70007 , 70126 , 70245 , 70363 , 70483 , 70602 , 70722 , 70841 , 70961 , 71082 , 71202 , 71323 , 71443 , 71564 , 71686 , 71807 , 71929 , 72050 , 72172 , 72295 , 72417 , 72540 , 72663 , 72786 , 72909 , 73032 , 73156 , 73280 , 73404 , 73528 , 73653 , 73778 , 73903 , 74028 , 74153 , 74279 , 74405 , 74531 , 74657 , 74783 , 74910 , 75037 , 75164 , 75291 , 75419 , 75547 , 75674 , 75803 , 75931 , 76060 , 76188 , 76318 , 76447 , 76576 , 76706 , 76836 , 76966 , 77096 , 77227 , 77358 , 77489 , 77620 , 77751 , 77883 , 78015 , 78147 , 78280 , 78412 , 78545 , 78678 , 78811 , 78945 , 79078 , 79212 , 79347 , 79481 , 79616 , 79750 , 79885 , 80021 , 80156 , 80292 , 80428 , 80564 , 80701 , 80837 , 80974 , 81111 , 81249 , 81386 , 1149210929 , 81662 , 81801 , 81939 , 82078 , 82217 , 82356 , 82496 , 82635 , 82775 , 82916 , 83056 , 83197 , 83338 , 83479 , 83620 , 83762 , 83904 , 84046 , 84188 , 84331 , 84473 , 84617 , 84760 , 84903 , 85047 , 85191 , 85336 , 85480 , 85625 , 85770 , 85915 , 86061 , 86206 , 86352 , 86499 , 86645 , 86792 , 86939 , 87086 , 87234 , 87381 , 87529 , 87678 , 87826 , 87975 , 88124 , 88273 , 88423 , 88572 , 88722 , 88873 , 89023 , 89174 , 89325 , 89476 , 89628 , 89780 , 89932 , 90084 , 90237 , 90389 , 90543 , 90696 , 90850 , 91003 , 91158 , 91312 , 91467 , 91621 , 91777 , 91932 , 92088 , 92244 , 92400 , 92557 , 92713 , 92870 , 93028 , 93185 , 93343 , 93501 , 93659 , 93818 , 93977 , 94136 , 94296 , 94455 , 94615 , 94776 , 94936 , 95097 , 95258 , 95419 , 95581 , 95743 , 95905 , 96067 , 96230 , 96393 , 96556 , 96720 , 96884 , 97048 , 97212 , 97377 , 97542 , 97707 , 97872 , 98038 , 98204 , 98370 , 98537 , 98704 , 98871 , 99039 , 99206 , 99374 , 99543 , 99711 , 99880 , 100049 , 100219 , 100388 , 100559 , 100729 , 100899 , 101070 , 101242 , 101413 , 101585 , 101757 , 101929 , 102102 , 102275 , 102448 , 102621 , 102795 , 102969 , 103144 , 103318 , 103493 , 103669 , 103844 , 104020 , 104196 , 104373 , 104550 , 104727 , 104904 , 105082 , 105260 , 105438 , 105617 , 105795 , 105975 , 106154 , 106334 , 106514 , 106694 , 106875 , 107056 , 107237 , 107419 , 107601 , 107783 , 107966 , 108149 , 108332 , 108515 , 108699 , 108883 , 109068 , 109252 , 109437 , 109623 , 109808 , 109994 , 110181 , 110367 , 110554 , 110741 , 110929 , 111117 , 111305 , 111494 , 111682 , 111872 , 112061 , 112251 , 112441 , 112631 , 112822 , 113013 , 113205 , 113396 , 113588 , 113781 , 113974 , 114167 , 114360 , 114554 , 114748 , 114942 , 115137 , 115332 , 115527 , 115723 , 115919 , 116115 , 116312 , 116509 , 116706 , 116904 , 117102 , 117300 , 117499 , 117698 , 117897 , 118097 , 118297 , 118497 , 118698 , 118899 , 119100 , 119302 , 119504 , 119706 , 119909 , 120112 , 120316 , 120519 , 120724 , 120928 , 121133 , 121338 , 121544 , 121749 , 121956 , 122162 , 122369 , 122576 , 122784 , 122992 , 123200 , 123409 , 123618 , 123827 , 124037 , 124247 , 124457 , 124668 , 124879 , 125091 , 125303 , 125515 , 125728 , 125941 , 126154 , 126367 , 126582 , 126796 , 127011 , 127226 , 127441 , 127657 , 127873 , 128090 , 128307 , 128524 , 128742 , 128960 , 129178 , 129397 , 129616 , 129836 , 130056 , 130276 , 130497 , 130718 , 130939 , 131161 , 131383 , 131605 , 131828 , 132052 , 132275 , 132499 , 132724 , 132948 , 133174 , 133399 , 133625 , 133851 , 134078 , 134305 , 134533 , 134761 , 134989 , 135217 , 135446 , 135676 , 135906 , 136136 , 136366 , 136597 , 136829 , 137060 , 137293 , 137525 , 137758 , 137991 , 138225 , 138459 , 138694 , 138929 , 139164 , 139400 , 139636 , 139872 , 140109 , 140346 , 140584 , 140822 , 141061 , 141300 , 141539 , 141779 , 142019 , 142259 , 142500 , 142742 , 142983 , 143226 , 143468 , 143711 , 143955 , 144198 , 144443 , 144687 , 144932 , 145178 , 145424 , 145670 , 145917 , 146164 , 146411 , 146659 , 146908 , 147157 , 147406 , 147655 , 147906 , 148156 , 148407 , 148658 , 148910 , 149162 , 149415 , 149668 , 149921 , 150175 , 150430 , 150685 , 150940 , 151195 , 151451 , 151708 , 151965 , 152222 , 152480 , 152738 , 152997 , 153256 , 153516 , 153776 , 154036 , 154297 , 154558 , 154820 , 155082 , 155345 , 155608 , 155872 , 156136 , 156400 , 156665 , 156930 , 157196 , 157462 , 157729 , 157996 , 158264 , 158532 , 158800 , 159069 , 159339 , 159609 , 159879 , 160150 , 160421 , 160693 , 160965 , 161238 , 161511 , 161784 , 162058 , 162333 , 162608 , 162883 , 163159 , 163435 , 163712 , 163989 , 164267 , 164545 , 164824 , 165103 , 165383 , 165663 , 165943 , 166224 , 166506 , 166788 , 167071 , 167353 , 167637 , 167921 , 168205 , 168490 , 168776 , 169061 , 169348 , 169635 , 169922 , 170210 , 170498 , 170787 , 171076 , 171366 , 171656 , 171947 , 172238 , 172530 , 172822 , 173115 , 173408 , 173701 , 173996 , 174290 , 174586 , 174881 , 175177 , 175474 , 175771 , 176069 , 176367 , 176666 , 176965 , 177265 , 177565 , 177866 , 178167 , 178469 , 178771 , 179074 , 179377 , 179681 , 179985 , 180290 , 180595 , 180901 , 181208 , 181515 , 181822 , 182130 , 182439 , 182748 , 183057 , 183367 , 183678 , 183989 , 184300 , 184612 , 184925 , 185238 , 185552 , 185866 , 186181 , 186497 , 186812 , 187129 , 187446 , 187763 , 188081 , 188400 , 188719 , 189038 , 189359 , 189679 , 190001 , 190322 , 190645 , 190968 , 191291 , 191615 , 191940 , 192265 , 192590 , 192917 , 193243 , 193571 , 193898 , 194227 , 194556 , 194885 , 195215 , 195546 , 195877 , 196209 , 196541 , 196874 , 197208 , 197542 , 197876 , 198211 , 198547 , 198883 , 199220 , 199558 , 199896 , 200234 , 200573 , 200913 , 201253 , 201594 , 201936 , 202278 , 202620 , 202963 , 203307 , 203651 , 203996 , 204342 , 204688 , 205035 , 205382 , 205730 , 206078 , 206427 , 206777 , 207127 , 207478 , 207829 , 208181 , 208534 , 208887 , 209241 , 209595 , 209950 , 210306 , 210662 , 211019 , 211376 , 211734 , 212093 , 212452 , 212812 , 213172 , 213533 , 213895 , 214257 , 214620 , 214984 , 215348 , 215712 , 216078 , 216444 , 216810 , 217178 , 217545 , 217914 , 218283 , 218653 , 219023 , 219394 , 219766 , 220138 , 220511 , 220884 , 221258 , 221633 , 222008 , 222384 , 222761 , 223138 , 223516 , 223895 , 224274 , 224654 , 225034 , 225415 , 225797 , 226180 , 226563 , 226946 , 227331 , 227716 , 228102 , 228488 , 228875 , 229262 , 229651 , 230040 , 230429 , 230820 , 231211 , 231602 , 231994 , 232387 , 232781 , 233175 , 233570 , 233966 , 234362 , 234759 , 235157 , 235555 , 235954 , 236353 , 236754 , 237155 , 237556 , 237959 , 238362 , 238765 , 239170 , 239575 , 239981 , 240387 , 240794 , 241202 , 241611 , 242020 , 242430 , 242840 , 243252 , 243664 , 244076 , 244490 , 244904 , 245319 , 245734 , 246150 , 246567 , 246985 , 247403 , 247822 , 248242 , 248662 , 249083 , 249505 , 249928 , 250351 , 250775 , 251200 , 251625 , 252052 , 252478 , 252906 , 253334 , 253763 , 254193 , 254624 , 255055 , 255487 , 255920 , 256353 , 256787 , 257222 , 257658 , 258094 , 258531 , 258969 , 259408 , 259847 , 260287 , 260728 , 261170 , 261612 , 262055 , 262499 , 262944 , 263389 , 263835 , 264282 , 264730 , 265178 , 265627 , 266077 , 266528 , 266979 , 267431 , 267884 , 268338 , 268792 , 269248 , 269704 , 270160 , 270618 , 271076 , 271536 , 271995 , 272456 , 272918 , 273380 , 273843 , 274307 , 274771 , 275237 , 275703 , 276170 , 276637 , 277106 , 277575 , 278045 , 278516 , 278988 , 279461 , 279934 , 280408 , 280883 , 281359 , 281835 , 282313 , 282791 , 283270 , 283749 , 284230 , 284711 , 285194 , 285677 , 286160 , 286645 , 287131 , 287617 , 288104 , 288592 , 289081 , 289570 , 290061 , 290552 , 291044 , 291537 , 292031 , 292526 , 293021 , 293517 , 294014 , 294512 , 295011 , 295511 , 296011 , 296513 , 297015 , 297518 , 298022 , 298527 , 299032 , 299539 , 300046 , 300554 , 301063 , 301573 , 302084 , 302596 , 303108 , 303621 , 304136 , 304651 , 305167 , 305684 , 306201 , 306720 , 307239 , 307760 , 308281 , 308803 , 309326 , 309850 , 310375 , 310901 , 311427 , 311955 , 312483 , 313012 , 313542 , 314073 , 314605 , 315138 , 315672 , 316207 , 316742 , 317279 , 317816 , 318354 , 318893 , 319434 , 319975 , 320517 , 321059 , 321603 , 322148 , 322693 , 323240 , 323787 , 324336 , 324885 , 325435 , 325987 , 326539 , 327092 , 327646 , 328201 , 328757 , 329313 , 329871 , 330430 , 330989 , 331550 , 332112 , 332674 , 333238 , 333802 , 334367 , 334934 , 335501 , 336069 , 336638 , 337208 , 337780 , 338352 , 338925 , 339499 , 340074 , 340650 , 341227 , 341805 , 342384 , 342963 , 343544 , 344126 , 344709 , 345293 , 345878 , 346463 , 347050 , 347638 , 348227 , 348817 , 349407 , 349999 , 350592 , 351186 , 351781 , 352376 , 352973 , 353571 , 354170 , 354770 , 355371 , 355973 , 356575 , 357179 , 357784 , 358390 , 358997 , 359605 , 360214 , 360824 , 361436 , 362048 , 362661 , 363275 , 363890 , 364507 , 365124 , 365743 , 366362 , 366982 , 367604 , 368227 , 368850 , 369475 , 370101 , 370728 , 371356 , 371984 , 372614 , 373246 , 373878 , 374511 , 375145 , 375781 , 376417 , 377055 , 377693 , 378333 , 378974 , 379616 , 380259 , 380903 , 381548 , 382194 , 382841 , 383490 , 384139 , 384790 , 385442 , 386094 , 386748 , 387403 , 388059 , 388717 , 389375 , 390035 , 390695 , 391357 , 392020 , 392684 , 393349 , 394015 , 394682 , 395351 , 396020 , 396691 , 397363 , 398036 , 398710 , 399385 , 400062 , 400739 , 401418 , 402098 , 402779 , 403461 , 404145 , 404829 , 405515 , 406201 , 406889 , 407579 , 408269 , 408960 , 409653 , 410347 , 411042 , 411738 , 412435 , 413134 , 413834 , 414535 , 415237 , 415940 , 416644 , 417350 , 418057 , 418765 , 419474 , 420185 , 420896 , 421609 , 422323 , 423039 , 423755 , 424473 , 425192 , 425912 , 426633 , 427356 , 428080 , 428805 , 429531 , 430258 , 430987 , 431717 , 432448 , 433181 , 433914 , 434649 , 435385 , 436123 , 436862 , 437601 , 438343 , 439085 , 439829 , 440574 , 441320 , 442067 , 442816 , 443566 , 444317 , 445070 , 445824 , 446579 , 447335 , 448093 , 448852 , 449612 , 450373 , 451136 , 451900 , 452666 , 453432 , 454200 , 454969 , 455740 , 456512 , 457285 , 458060 , 458835 , 459613 , 460391 , 461171 , 461952 , 462734 , 463518 , 464303 , 465089 , 465877 , 466666 , 467457 , 468248 , 469041 , 469836 , 470631 , 471429 , 472227 , 473027 , 473828 , 474631 , 475434 , 476240 , 477046 , 477854 , 478664 , 479474 , 480286 , 481100 , 481915 , 482731 , 483548 , 484367 , 485188 , 486010 , 486833 , 487657 , 488483 , 489310 , 490139 , 490969 , 491801 , 492634 , 493468 , 494304 , 495141 , 495980 , 496820 , 497661 , 498504 , 499349 , 500194 , 501041 , 501890 , 502740 , 503592 , 504444 , 505299 , 506155 , 507012 , 507871 , 508731 , 509592 , 510456 , 511320 , 512186 , 513054 , 513923 , 514793 , 515665 , 516538 , 517413 , 518289 , 519167 , 520047 , 520927 , 521810 , 522693 , 523579 , 524466 , 525354 , 526244 , 527135 , 528028 , 528922 , 529818 , 530715 , 531614 , 532514 , 533416 , 534320 , 535225 , 536131 , 537039 , 537949 , 538860 , 539773 , 540687 , 541603 , 542520 , 543439 , 544359 , 545281 , 546205 , 547130 , 548056 , 548985 , 549914 , 550846 , 551779 , 552713 , 553649 , 554587 , 555526 , 556467 , 557410 , 558354 , 559300 , 560247 , 561196 , 562146 , 563098 , 564052 , 565007 , 565964 , 566923 , 567883 , 568845 , 569808 , 570773 , 571740 , 572708 , 573678 , 574650 , 575623 , 576598 , 577575 , 578553 , 579533 , 580515 , 581498 , 582483 , 583469 , 584457 , 585447 , 586439 , 587432 , 588427 , 589424 , 590422 , 591422 , 592424 , 593427 , 594432 , 595439 , 596447 , 597458 , 598469 , 599483 , 600498 , 601515 , 602534 , 603555 , 604577 , 605601 , 606627 , 607654 , 608683 , 609714 , 610747 , 611781 , 612817 , 613855 , 614895 , 615936 , 616980 , 618025 , 619071 , 620120 , 621170 , 622222 , 623276 , 624332 , 625389 , 626448 , 627509 , 628572 , 629637 , 630703 , 631771 , 632841 , 633913 , 634987 , 636062 , 637140 , 638219 , 639300 , 640382 , 641467 , 642554 , 643642 , 644732 , 645824 , 646918 , 648013 , 649111 , 650210 , 651312 , 652415 , 653520 , 654627 , 655735 , 656846 , 657958 , 659073 , 660189 , 661307 , 662427 , 663549 , 664673 , 665799 , 666926 , 668056 , 669187 , 670321 , 671456 , 672593 , 673733 , 674874 , 676017 , 677162 , 678309 , 679457 , 680608 , 681761 , 682916 , 684072 , 685231 , 686391 , 687554 , 688718 , 689885 , 691053 , 692224 , 693396 , 694571 , 695747 , 696925 , 698106 , 699288 , 700472 , 701659 , 702847 , 704038 , 705230 , 706424 , 707621 , 708819 , 710020 , 711223 , 712427 , 713634 , 714842 , 716053 , 717266 , 718481 , 719698 , 720917 , 722138 , 723361 , 724586 , 725813 , 727042 , 728274 , 729507 , 730743 , 731980 , 733220 , 734462 , 735706 , 736952 , 738200 , 739450 , 740703 , 741957 , 743214 , 744473 , 745734 , 746997 , 748262 , 749529 , 750799 , 752070 , 753344 , 754620 , 755898 , 757178 , 758461 , 759745 , 761032 , 762321 , 763612 , 764905 , 766201 , 767499 , 768799 , 770101 , 771405 , 772712 , 774020 , 775331 , 776644 , 777960 , 779277 , 780597 , 781919 , 783244 , 784570 , 785899 , 787230 , 788563 , 789899 , 791237 , 792577 , 793919 , 795264 , 796611 , 797960 , 799312 , 800665 , 802021 , 803380 , 804741 , 806103 , 807469 , 808836 , 810206 , 811579 , 812953 , 814330 , 815709 , 817091 , 818475 , 819861 , 821249 , 822640 , 824034 , 825429 , 826827 , 828228 , 829631 , 831036 , 832443 , 833853 , 835265 , 836680 , 838097 , 839517 , 840938 , 842363 , 843789 , 845219 , 846650 , 848084 , 849520 , 850959 , 852401 , 853844 , 855290 , 856739 , 858190 , 859643 , 861099 , 862558 , 864019 , 865482 , 866948 , 868416 , 869887 , 871361 , 872836 , 874315 , 875795 , 877279 , 878765 , 880253 , 881744 , 883237 , 884733 , 886232 , 887733 , 889236 , 890742 , 892251 , 893762 , 895276 , 896792 , 898311 , 899832 , 901357 , 902883 , 904412 , 905944 , 907479 , 909015 , 910555 , 912097 , 913642 , 915190 , 916740 , 918292 , 919848 , 921405 , 922966 , 924529 , 926095 , 927664 , 929235 , 930809 , 932385 , 933964 , 935546 , 937131 , 938718 , 940308 , 941900 , 943496 , 945094 , 946694 , 948298 , 949904 , 951513 , 953124 , 954739 , 956356 , 957975 , 959598 , 961223 , 962851 , 964482 , 966115 , 967752 , 969391 , 971033 , 972677 , 974325 , 975975 , 977628 , 979284 , 980942 , 982604 , 984268 , 985935 , 987605 , 989277 , 990953 , 992631 , 994313 , 995997 , 997684 , 999373 , 1001066 , 1002761 , 1004460 , 1006161 , 1007865 , 1009572 , 1011282 , 1012995 , 1014711 , 1016429 , 1018151 , 1019875 , 1021602 , 1023333 , 1025066 , 1026802 , 1028541 , 1030283 , 1032028 , 1033776 , 1035527 , 1037281 , 1039038 , 1040797 , 1042560 , 1044326 , 1046095 , 1047866 , 1049641 , 1051419 , 1053200 , 1054984 , 1056770 , 1058560 , 1060353 , 1062149 , 1063948 , 1065750 , 1067555 , 1069363 , 1071174 , 1072989 , 1074806 , 1076626 , 1078450 , 1080276 , 1082106 , 1083939 , 1085774 , 1087613 , 1089456 , 1091301 , 1093149 , 1095000 , 1096855 , 1098713 , 1100574 , 1102438 , 1104305 , 1106175 , 1108049 , 1109925 , 1111805 , 1113688 , 1115575 , 1117464 , 1119357 , 1121252 , 1123152 , 1125054 , 1126959 , 1128868 , 1130780 , 1132695 , 1134614 , 1136535 , 1138460 , 1140388 , 1142320 , 1144255 , 1146193 , 1148134 , 1150078 , 1152026 , 1153978 , 1155932 , 1157890 , 1159851 , 1161815 , 1163783 , 1165754 , 1167729 , 1169706 , 1171687 , 1173672 , 1175660 , 1177651 , 1179646 , 1181643 , 1183645 , 1185650 , 1187658 , 1189669 , 1191684 , 1193702 , 1195724 , 1197749 , 1199778 , 1201810 , 1203846 , 1205884 , 1207927 , 1209973 , 1212022 , 1214075 , 1216131 , 1218191 , 1220254 , 1222321 , 1224391 , 1226465 , 1228542 , 1230623 , 1232707 , 1234795 , 1236886 , 1238981 , 1241080 , 1243182 , 1245287 , 1247396 , 1249509 , 1251625 , 1253745 , 1255868 , 1257996 , 1260126 , 1262260 , 1264398 , 1266540 , 1268685 , 1270834 , 1272986 , 1275142 , 1277302 , 1279465 , 1281632 , 1283803 , 1285977 , 1288155 , 1290337 , 1292522 , 1294712 , 1296904 , 1299101 , 1301301 , 1303505 , 1305713 , 1307924 , 1310140 , 1312359 , 1314581 , 1316808 , 1319038 , 1321272 , 1323510 , 1325752 , 1327997 , 1330246 , 1332499 , 1334756 , 1337017 , 1339281 , 1341549 , 1343822 , 1346098 , 1348378 , 1350661 , 1352949 , 1355240 , 1357536 , 1359835 , 1362138 , 1364445 , 1366756 , 1369071 , 1371390 , 1373712 , 1376039 , 1378370 , 1380704 , 1383043 , 1385385 , 1387731 , 1390082 , 1392436 , 1394795 , 1397157 , 1399523 , 1401894 , 1404268 , 1406646 , 1409029 , 1411415 , 1413806 , 1416200 , 1418599 , 1421001 , 1423408 , 1425819 , 1428234 , 1430653 , 1433076 , 1435503 , 1437934 , 1440370 , 1442809 , 1445253 , 1447701 , 1450153 , 1452609 , 1455069 , 1457534 , 1460002 , 1462475 , 1464952 , 1467433 , 1469919 , 1472408 , 1474902 , 1477400 , 1479902 , 1482409 , 1484919 , 1487434 , 1489954 , 1492477 , 1495005 , 1497537 , 1500073 , 1502614 , 1505159 , 1507708 , 1510262 , 1512820 , 1515382 , 1517949 , 1520519 , 1523095 , 1525674 , 1528258 , 1530847 , 1533440 , 1536037 , 1538638 , 1541244 , 1543855 , 1546469 , 1549089 , 1551712 , 1554341 , 1556973 , 1559610 , 1562252 , 1564898 , 1567548 , 1570203 , 1572862 , 1575526 , 1578195 , 1580868 , 1583545 , 1586227 , 1588914 , 1591605 , 1594301 , 1597001 , 1599706 , 1602415 , 1605129 , 1607848 , 1610571 , 1613299 , 1616031 , 1618768 , 1621510 , 1624256 , 1627007 , 1629763 , 1632523 , 1635288 , 1638058 , 1640832 , 1643611 , 1646395 , 1649183 , 1651977 , 1654774 , 1657577 , 1660385 , 1663197 , 1666014 , 1668835 , 1671662 , 1674493 , 1677329 , 1680170 , 1683016 , 1685866 , 1688722 , 1691582 , 1694447 , 1697317 , 1700191 , 1703071 , 1705955 , 1708845 , 1711739 , 1714638 , 1717542 , 1720451 , 1723365 , 1726284 , 1729208 , 1732136 , 1735070 , 1738009 , 1740952 , 1743901 , 1746855 , 1749813 , 1752777 , 1755746 , 1758719 , 1761698 , 1764682 , 1767671 , 1770664 , 1773663 , 1776667 , 1779677 , 1782691 , 1785710 , 1788735 , 1791764 , 1794799 , 1797839 , 1800884 , 1803934 , 1806989 , 1810049 , 1813115 , 1816186 , 1819262 , 1822343 , 1825430 , 1828521 , 1831618 , 1834721 , 1837828 , 1840941 , 1844059 , 1847182 , 1850311 , 1853444 , 1856584 , 1859728 , 1862878 , 1866033 , 1869193 , 1872359 , 1875530 , 1878707 , 1881889 , 1885076 , 1888269 , 1891467 , 1894671 , 1897880 , 1901094 , 1904314 , 1907539 , 1910770 , 1914006 , 1917248 , 1920495 , 1923748 , 1927006 , 1930270 , 1933539 , 1936814 , 1940094 , 1943380 , 1946672 , 1949969 , 1953271 , 1956580 , 1959893 , 1963213 , 1966538 , 1969869 , 1973205 , 1976547 , 1979895 , 1983248 , 1986607 , 1989972 , 1993342 , 1996718 , 2000100 , 2003487 , 2006881 , 2010280 , 2013685 , 2017095 , 2020511 , 2023934 , 2027361 , 2030795 , 2034235 , 2037680 , 2041131 , 2044588 , 2048051 , 2051520 , 2054995 , 2058475 , 2061962 , 2065454 , 2068952 , 2072456 , 2075966 , 2079482 , 2083004 , 2086532 , 2090066 , 2093606 , 2097152 , 2100704 , 2104262 , 2107826 , 2111396 , 2114972 , 2118554 , 2122142 , 2125736 , 2129337 , 2132943 , 2136556 , 2140174 , 2143799 , 2147430 , 2151067 , 2154710 , 2158360 , 2162015 , 2165677 , 2169345 , 2173019 , 2176700 , 2180386 , 2184079 , 2187778 , 2191484 , 2195196 , 2198914 , 2202638 , 2206368 , 2210105 , 2213849 , 2217598 , 2221354 , 2225116 , 2228885 , 2232660 , 2236441 , 2240229 , 2244023 , 2247824 , 2251631 , 2255445 , 2259265 , 2263091 , 2266924 , 2270764 , 2274610 , 2278462 , 2282321 , 2286187 , 2290059 , 2293937 , 2297823 , 2301714 , 2305613 , 2309518 , 2313429 , 2317348 , 2321272 , 2325204 , 2329142 , 2333087 , 2337039 , 2340997 , 2344962 , 2348933 , 2352912 , 2356897 , 2360889 , 2364887 , 2368893 , 2372905 , 2376924 , 2380949 , 2384982 , 2389021 , 2393068 , 2397121 , 2401181 , 2405248 , 2409321 , 2413402 , 2417490 , 2421584 , 2425685 , 2429794 , 2433909 , 2438031 , 2442161 , 2446297 , 2450440 , 2454590 , 2458748 , 2462912 , 2467083 , 2471262 , 2475447 , 2479640 , 2483840 , 2488047 , 2492261 , 2496482 , 2500710 , 2504945 , 2509188 , 2513438 , 2517695 , 2521959 , 2526230 , 2530509 , 2534795 , 2539088 , 2543388 , 2547696 , 2552011 , 2556333 , 2560663 , 2565000 , 2569344 , 2573696 , 2578055 , 2582421 , 2586795 , 2591176 , 2595565 , 2599961 , 2604365 , 2608776 , 2613194 , 2617620 , 2622054 , 2626494 , 2630943 , 2635399 , 2639862 , 2644334 , 2648812 , 2653298 , 2657792 , 2662294 , 2666803 , 2671320 , 2675844 , 2680376 , 2684916 , 2689463 , 2694018 , 2698581 , 2703152 , 2707730 , 2712316 , 2716910 , 2721511 , 2726121 , 2730738 , 2735363 , 2739996 , 2744636 , 2749285 , 2753941 , 2758606 , 2763278 , 2767958 , 2772646 , 2777342 , 2782046 , 2786758 , 2791478 , 2796206 , 2800942 , 2805686 , 2810438 , 2815198 , 2819966 , 2824742 , 2829526 , 2834318 , 2839119 , 2843927 , 2848744 , 2853569 , 2858402 , 2863243 , 2868093 , 2872950 , 2877816 , 2882690 , 2887573 , 2892463 , 2897362 , 2902270 , 2907185 , 2912109 , 2917041 , 2921982 , 2926931 , 2931888 , 2936854 , 2941828 , 2946810 , 2951801 , 2956801 , 2961809 , 2966825 , 2971850 , 2976883 , 2981925 , 2986975 , 2992034 , 2997102 , 3002178 , 3007263 , 3012356 , 3017458 , 3022569 , 3027688 , 3032816 , 3037953 , 3043098 , 3048252 , 3053415 , 3058587 , 3063767 , 3068956 , 3074154 , 3079360 , 3084576 , 3089800 , 3095033 , 3100275 , 3105526 , 3110786 , 3116055 , 3121332 , 3126619 , 3131914 , 3137219 , 3142532 , 3147855 , 3153186 , 3158527 , 3163876 , 3169235 , 3174603 , 3179979 , 3185365 , 3190760 , 3196164 , 3201578 , 3207000 , 3212432 , 3217873 , 3223323 , 3228782 , 3234251 , 3239728 , 3245216 , 3250712 , 3256218 , 3261733 , 3267257 , 3272791 , 3278334 , 3283886 , 3289448 , 3295019 , 3300600 , 3306190 , 3311790 , 3317399 , 3323018 , 3328646 , 3334284 , 3339931 , 3345588 , 3351254 , 3356930 , 3362616 , 3368311 , 3374016 , 3379730 , 3385454 , 3391188 , 3396932 , 3402685 , 3408448 , 3414221 , 3420004 , 3425796 , 3431598 , 3437410 , 3443232 , 3449064 , 3454906 , 3460757 , 3466619 , 3472490 , 3478371 , 3484263 , 3490164 , 3496075 , 3501996 , 3507928 , 3513869 , 3519820 , 3525782 , 3531753 , 3537735 , 3543727 , 3549729 , 3555741 , 3561763 , 3567796 , 3573839 , 3579891 , 3585955 , 3592028 , 3598112 , 3604206 , 3610310 , 3616425 , 3622550 , 3628686 , 3634832 , 3640988 , 3647155 , 3653332 , 3659519 , 3665717 , 3671926 , 3678145 , 3684375 , 3690615 , 3696866 , 3703127 , 3709399 , 3715681 , 3721975 , 3728278 , 3734593 , 3740918 , 3747254 , 3753601 , 3759958 , 3766326 , 3772705 , 3779095 , 3785496 , 3791907 , 3798330 , 3804763 , 3811207 , 3817662 , 3824128 , 3830605 , 3837092 , 3843591 , 3850101 , 3856622 , 3863154 , 3869697 , 3876251 , 3882816 , 3889392 , 3895980 , 3902578 , 3909188 , 3915809 , 3922441 , 3929084 , 3935739 , 3942405 , 3949082 , 3955771 , 3962471 , 3969182 , 3975904 , 3982638 , 3989384 , 3996140 , 4002909 , 4009688 , 4016479 , 4023282 , 4030096 , 4036922 , 4043759 , 4050608 , 4057469 , 4064341 , 4071224 , 4078120 , 4085027 , 4091946 , 4098876 , 4105818 , 4112772 , 4119738 , 4126715 , 4133705 , 4140706 , 4147719 , 4154744 , 4161781 , 4168830 , 4175890 , 4182963 , 4190048 , 4197144 , 4204253 , 4211374 , 4218506 , 4225651 , 4232808 , 4239977 , 4247158 , 4254352 , 4261557 , 4268775 , 4276005 , 4283247 , 4290502 , 4297768 , 4305048 , 4312339 , 4319643 , 4326959 , 4334287 , 4341628 , 4348982 , 4356347 , 4363726 , 4371116 , 4378520 , 4385936 , 4393364 , 4400805 , 4408259 , 4415725 , 4423204 , 4430695 , 4438199 , 4445716 , 4453246 , 4460788 , 4468344 , 4475912 , 4483492 , 4491086 , 4498692 , 4506312 , 4513944 , 4521589 , 4529247 , 4536919 , 4544603 , 4552300 , 4560010 , 4567733 , 4575470 , 4583219 , 4590981 , 4598757 , 4606546 , 4614348 , 4622163 , 4629992 , 4637834 , 4645689 , 4653557 , 4661439 , 4669334 , 4677242 , 4685164 , 4693099 , 4701048 , 4709010 , 4716985 , 4724974 , 4732977 , 4740993 , 4749023 , 4757066 , 4765123 , 4773194 , 4781278 , 4789376 , 4797488 , 4805613 , 4813753 , 4821906 , 4830072 , 4838253 , 4846447 , 4854656 , 4862878 , 4871114 , 4879364 , 4887628 , 4895907 , 4904199 , 4912505 , 4920825 , 4929159 , 4937508 , 4945871 , 4954247 , 4962638 , 4971043 , 4979463 , 4987896 , 4996344 , 5004807 , 5013283 , 5021774 , 5030279 , 5038799 , 5047333 , 5055882 , 5064445 , 5073023 , 5081615 , 5090221 , 5098843 , 5107478 , 5116129 , 5124794 , 5133474 , 5142168 , 5150877 , 5159601 , 5168340 , 5177094 , 5185862 , 5194645 , 5203443 , 5212256 , 5221084 , 5229927 , 5238785 , 5247658 , 5256546 , 5265449 , 5274367 , 5283300 , 5292248 , 5301212 , 5310190 , 5319184 , 5328193 , 5337217 , 5346257 , 5355312 , 5364382 , 5373468 , 5382569 , 5391685 , 5400817 , 5409964 , 5419127 , 5428305 , 5437499 , 5446708 , 5455933 , 5465174 , 5474430 , 5483702 , 5492990 , 5502293 , 5511613 , 5520947 , 5530298 , 5539665 , 5549047 , 5558446 , 5567860 , 5577290 , 5586736 , 5596198 , 5605677 , 5615171 , 5624681 , 5634208 , 5643750 , 5653309 , 5662884 , 5672475 , 5682082 , 5691706 , 5701346 , 5711002 , 5720675 , 5730364 , 5740070 , 5749791 , 5759530 , 5769285 , 5779056 , 5788844 , 5798648 , 5808469 , 5818307 , 5828162 , 5838033 , 5847920 , 5857825 , 5867746 , 5877684 , 5887639 , 5897611 , 5907600 , 5917606 , 5927628 , 5937668 , 5947724 , 5957798 , 5967888 , 5977996 , 5988121 , 5998263 , 6008422 , 6018599 , 6028792 , 6039003 , 6049231 , 6059477 , 6069740 , 6080020 , 6090317 , 6100633 , 6110965 , 6121315 , 6131683 , 6142068 , 6152471 , 6162891 , 6173329 , 6183785 , 6194258 , 6204749 , 6215258 , 6225785 , 6236329 , 6246892 , 6257472 , 6268070 , 6278686 , 6289320 , 6299973 , 6310643 , 6321331 , 6332037 , 6342762 , 6353505 , 6364265 , 6375044 , 6385842 , 6396657 , 6407491 , 6418344 , 6429214 , 6440103 , 6451011 , 6461937 , 6472881 , 6483844 , 6494826 , 6505826 , 6516845 , 6527882 , 6538939 , 6550014 , 6561107 , 6572220 , 6583351 , 6594501 , 6605670 , 6616858 , 6628065 , 6639291 , 6650536 , 6661800 , 6673083 , 6684385 , 6695706 , 6707046 , 6718406 , 6729785 , 6741183 , 6752600 , 6764037 , 6775493 , 6786969 , 6798464 , 6809978 , 6821512 , 6833066 , 6844639 , 6856232 , 6867844 , 6879476 , 6891128 , 6902799 , 6914490 , 6926201 , 6937932 , 6949683 , 6961453 , 6973244 , 6985054 , 6996885 , 7008735 , 7020606 , 7032497 , 7044407 , 7056338 , 7068290 , 7080261 , 7092253 , 7104265 , 7116297 , 7128350 , 7140423 , 7152517 , 7164631 , 7176766 , 7188921 , 7201097 , 7213293 , 7225510 , 7237748 , 7250006 , 7262286 , 7274586 , 7286907 , 7299248 , 7311611 , 7323994 , 7336399 , 7348825 , 7361271 , 7373739 , 7386228 , 7398738 , 7411269 , 7423821 , 7436395 , 7448990 , 7461606 , 7474244 , 7486903 , 7499583 , 7512285 , 7525008 , 7537753 , 7550520 , 7563308 , 7576118 , 7588950 , 7601803 , 7614678 , 7627575 , 7640494 , 7653434 , 7666397 , 7679381 , 7692388 , 7705416 , 7718467 , 7731539 , 7744634 , 7757751 , 7770890 , 7784052 , 7797236 , 7810442 , 7823670 , 7836921 , 7850194 , 7863490 , 7876808 , 7890149 , 7903513 , 7916899 , 7930307 , 7943739 , 7957193 , 7970670 , 7984170 , 7997693 , 8011238 , 8024807 , 8038398 , 8052013 , 8065650 , 8079311 , 8092995 , 8106702 , 8120432 , 8134185 , 8147962 , 8161762 , 8175586 , 8189433 , 8203303 , 8217197 , 8231114 , 8245055 , 8259020 , 8273008 , 8287020 , 8301055 , 8315115 , 8329198 , 8343305 , 8357436 , 8371591 , 8385770 , 8399972 , 8414200 , 8428450 , 8442726 , 8457026 , 8471348 , 8485696 , 8500068 , 8514466 , 8528886 , 8543332 , 8557800 , 8572296 , 8586814 , 8601358 , 8615926 , 8630518 , 8645136 , 8659778 , 8674444 , 8689136 , 8703852 , 8718594 , 8733362 , 8748152 , 8762970 , 8777810 , 8792678 , 8807570 , 8822488 , 8837430 , 8852398 , 8867390 , 8882410 , 8897454 , 8912522 , 8927618 , 8942738 , 8957884 , 8973056 , 8988254 , 9003478 , 9018726 , 9034002 , 9049302 , 9064628 , 9079982 , 9095360 , 9110764 , 9126196 , 9141652 , 9157136 , 9172644 , 9188180 , 9203742 , 9219330 , 9234946 , 9250586 , 9266254 , 9281948 , 9297668 , 9313416 , 9329190 , 9344990 , 9360818 , 9376672 , 9392554 , 9408462 , 9424396 , 9440358 , 9456348 , 9472364 , 9488406 , 9504478 , 9520574 , 9536700 , 9552852 , 9569032 , 9585238 , 9601472 , 9617734 , 9634024 , 9650342 , 9666686 , 9683058 , 9699458 , 9715886 , 9732342 , 9748826 , 9765336 , 9781876 , 9798444 , 9815040 , 9831662 , 9848314 , 9864994 , 9881702 , 9898440 , 9915204 , 9931998 , 9948818 , 9965670 , 9982548 , 9999456 , 10016390 , 10033356 , 10050348 , 10067372 , 10084422 , 10101502 , 10118610 , 10135748 , 10152916 , 10170112 , 10187336 , 10204590 , 10221874 , 10239186 , 10256528 , 10273900 , 10291300 , 10308730 , 10326190 , 10343680 , 10361198 , 10378748 , 10396326 , 10413934 , 10431572 , 10449240 , 10466938 , 10484664 , 10502422 , 10520210 , 10538028 , 10555876 , 10573754 , 10591664 , 10609602 , 10627572 , 10645572 , 10663602 , 10681662 , 10699754 , 10717876 , 10736028 , 10754212 , 10772426 , 10790672 , 10808948 , 10827254 , 10845592 , 10863962 , 10882362 , 10900792 , 10919256 , 10937750 , 10956274 , 10974830 , 10993418 , 11012038 , 11030690 , 11049372 , 11068086 , 11086832 , 11105610 , 11124418 , 11143260 , 11162134 , 11181038 , 11199976 , 11218944 , 11237946 , 11256980 , 11276046 , 11295144 , 11314274 , 11333436 , 11352632 , 11371860 , 11391120 , 11410414 , 11429740 , 11449098 , 11468488 , 11487912 , 11507370 , 11526860 , 11546382 , 11565938 , 11585528 , 11605150 , 11624806 , 11644494 , 11664216 , 11683972 , 11703760 , 11723582 , 11743440 , 11763328 , 11783252 , 11803210 , 11823200 , 11843224 , 11863284 , 11883376 , 11903504 , 11923664 , 11943858 , 11964088 , 11984352 , 12004650 , 12024982 , 12045348 , 12065748 , 12086184 , 12106654 , 12127160 , 12147700 , 12168274 , 12188882 , 12209526 , 12230206 , 12250920 , 12271670 , 12292454 , 12313274 , 12334128 , 12355018 , 12375944 , 12396904 , 12417902 , 12438934 , 12460000 , 12481104 , 12502244 , 12523418 , 12544628 , 12565876 , 12587158 , 12608476 , 12629832 , 12651222 , 12672650 , 12694114 , 12715614 , 12737150 , 12758722 , 12780332 , 12801978 , 12823660 , 12845380 , 12867136 , 12888928 , 12910758 , 12932624 , 12954528 , 12976470 , 12998448 , 13020462 , 13042516 , 13064606 , 13086732 , 13108898 , 13131100 , 13153340 , 13175618 , 13197932 , 13220286 , 13242678 , 13265106 , 13287572 , 13310078 , 13332620 , 13355202 , 13377822 , 13400480 , 13423176 , 13445910 , 13468684 , 13491496 , 13514346 , 13537234 , 13560162 , 13583130 , 13606134 , 13629180 , 13652262 , 13675386 , 13698548 , 13721748 , 13744988 , 13768268 , 13791588 , 13814946 , 13838344 , 13861782 , 13885260 , 13908778 , 13932334 , 13955932 , 13979568 , 14003246 , 14026962 , 14050720 , 14074518 , 14098354 , 14122234 , 14146152 , 14170110 , 14194110 , 14218150 , 14242232 , 14266354 , 14290516 , 14314720 , 14338964 , 14363250 , 14387578 , 14411946 , 14436354 , 14460806 , 14485298 , 14509832 , 14534406 , 14559022 , 14583682 , 14608382 , 14633124 , 14657908 , 14682734 , 14707602 , 14732512 , 14757464 , 14782458 , 14807496 , 14832574 , 14857696 , 14882860 , 14908068 , 14933316 , 14958610 , 14983944 , 15009322 , 15034744 , 15060208 , 15085714 , 15111266 , 15136860 , 15162496 , 15188176 , 15213900 , 15239668 , 15265480 , 15291334 , 15317234 , 15343176 , 15369162 , 15395192 , 15421268 , 15447386 , 15473550 , 15499756 , 15526008 , 15552304 , 15578646 , 15605030 , 15631460 , 15657936 , 15684456 , 15711020 , 15737630 , 15764284 , 15790984 , 15817728 , 15844518 , 15871354 , 15898236 , 15925162 , 15952134 , 15979152 , 16006216 , 16033326 , 16060480 , 16087682 , 16114930 , 16142224 , 16169564 , 16196950 , 16224382 , 16251862 , 16279386 , 16306958 , 16334578 , 16362244 , 16389956 , 16417716 , 16445522 , 16473376 , 16501276 , 16529224 , 16557220 , 16585262 , 16613352 , 16641490 , 16669676 , 16697908 , 16726190 , 16754518 , 16782896 , 16811320 , 16839794 , 16868314 , 16896884 , 16925502 , 16954168 , 16982884 , 17011648 , 17040460 , 17069322 , 17098232 , 17127190 , 17156198 , 17185256 , 17214362 , 17243518 , 17272722 , 17301978 , 17331282 , 17360636 , 17390038 , 17419492 , 17448996 , 17478548 , 17508152 , 17537804 , 17567508 , 17597262 , 17627066 , 17656922 , 17686826 , 17716782 , 17746790 , 17776846 , 17806956 , 17837114 , 17867324 , 17897586 , 17927900 , 17958264 , 17988680 , 18019146 , 18049666 , 18080236 , 18110858 , 18141532 , 18172258 , 18203036 , 18233866 , 18264750 , 18295684 , 18326670 , 18357710 , 18388802 , 18419948 , 18451146 , 18482396 , 18513700 , 18545056 , 18576466 , 18607928 , 18639444 , 18671014 , 18702636 , 18734312 , 18766042 , 18797826 , 18829664 , 18861556 , 18893500 , 18925500 , 18957554 , 18989662 , 19021826 , 19054042 , 19086314 , 19118640 , 19151020 , 19183456 , 19215948 , 19248494 , 19281094 , 19313750 , 19346462 , 19379228 , 19412050 , 19444928 , 19477862 , 19510852 , 19543898 , 19576998 , 19610156 , 19643370 , 19676638 , 19709964 , 19743348 , 19776786 , 19810282 , 19843834 , 19877444 , 19911110 , 19944834 , 19978614 , 20012450 , 20046346 , 20080298 , 20114308 , 20148376 , 20182500 , 20216682 , 20250924 , 20285222 , 20319580 , 20353994 , 20388468 , 20423000 , 20457590 , 20492238 , 20526946 , 20561712 , 20596536 , 20631420 , 20666364 , 20701366 , 20736428 , 20771548 , 20806730 , 20841970 , 20877270 , 20912628 , 20948048 , 20983528 , 21019068 , 21054666 , 21090326 , 21126048 , 21161828 , 21197670 , 21233572 , 21269534 , 21305558 , 21341644 , 21377790 , 21413998 , 21450266 , 21486596 , 21522988 , 21559440 , 21595956 , 21632532 , 21669172 , 21705872 , 21742634 , 21779460 , 21816348 , 21853298 , 21890310 , 21927386 , 21964524 , 22001724 , 22038988 , 22076316 , 22113706 , 22151160 , 22188676 , 22226258 , 22263902 , 22301610 , 22339382 , 22377218 , 22415118 , 22453082 , 22491110 , 22529204 , 22567360 , 22605582 , 22643870 , 22682222 , 22720638 , 22759120 , 22797666 , 22836278 , 22874956 , 22913698 , 22952508 , 22991382 , 23030322 , 23069328 , 23108400 , 23147538 , 23186744 , 23226014 , 23265352 , 23304756 , 23344228 , 23383766 , 23423370 , 23463042 , 23502780 , 23542588 , 23582460 , 23622402 , 23662412 , 23702488 , 23742632 , 23782844 , 23823126 , 23863474 , 23903892 , 23944378 , 23984932 , 24025554 , 24066246 , 24107008 , 24147836 , 24188736 , 24229704 , 24270742 , 24311848 , 24353026 , 24394272 , 24435588 , 24476974 , 24518430 , 24559956 , 24601554 , 24643220 , 24684958 , 24726768 , 24768646 , 24810598 , 24852618 , 24894712 , 24936874 , 24979110 , 25021416 , 25063796 , 25106246 , 25148768 , 25191362 , 25234028 , 25276766 , 25319578 , 25362462 , 25405418 , 25448446 , 25491548 , 25534722 , 25577970 , 25621292 , 25664686 , 25708154 , 25751696 , 25795310 , 25839000 , 25882762 , 25926600 , 25970512 , 26014498 , 26058558 , 26102692 , 26146902 , 26191188 , 26235546 , 26279982 , 26324492 , 26369078 , 26413738 , 26458474 , 26503288 , 26548176 , 26593140 , 26638180 , 26683296 , 26728490 , 26773760 , 26819106 , 26864530 , 26910030 , 26955606 , 27001260 , 27046992 , 27092802 , 27138688 , 27184652 , 27230696 , 27276816 , 27323014 , 27369290 , 27415646 , 27462078 , 27508590 , 27555182 , 27601852 , 27648600 , 27695428 , 27742336 , 27789322 , 27836390 , 27883536 , 27930762 , 27978068 , 28025454 , 28072920 , 28120466 , 28168094 , 28215802 , 28263590 , 28311460 , 28359410 , 28407442 , 28455556 , 28503750 , 28552028 , 28600386 , 28648826 , 28697348 , 28745952 , 28794638 , 28843408 , 28892260 , 28941194 , 28990212 , 29039312 , 29088494 , 29137762 , 29187112 , 29236546 , 29286064 , 29335664 , 29385350 , 29435120 , 29484974 , 29534912 , 29584934 , 29635042 , 29685234 , 29735512 , 29785874 , 29836322 , 29886856 , 29937476 , 29988180 , 30038970 , 30089848 , 30140810 , 30191858 , 30242994 , 30294216 , 30345526 , 30396922 , 30448404 , 30499974 , 30551632 , 30603376 , 30655210 , 30707130 , 30759138 , 30811234 , 30863418 , 30915692 , 30968052 , 31020504 , 31073042 , 31125670 , 31178388 , 31231194 , 31284090 , 31337074 , 31390150 , 31443316 , 31496570 , 31549916 , 31603352 , 31656878 , 31710494 , 31764202 , 31818000 , 31871890 , 31925872 , 31979944 , 32034108 , 32088364 , 32142712 , 32197150 , 32251682 , 32306306 , 32361024 , 32415834 , 32470736 , 32525730 , 32580818 , 32636000 , 32691276 , 32746644 , 32802108 , 32857664 , 32913314 , 32969060 , 33024898 , 33080832 , 33136860 , 33192984 , 33249202 , 33305516 , 33361926 , 33418430 , 33475030 , 33531726 , 33588520 , 33645408 , 33702392 , 33759472 , 33816652 , 33873928 , 33931296 , 33988768 , 34046332 , 34103996 , 34161760 , 34219616 , 34277576 , 34335632 , 34393784 , 34452036 , 34510388 , 34568836 , 34627388 , 34686036 , 34744780 , 34803628 , 34862576 , 34921620 , 34980768 , 35040012 , 35099360 , 35158808 , 35218356 , 35278004 , 35337756 , 35397604 , 35457560 , 35517612 , 35577768 , 35638024 , 35698384 , 35758848 , 35819412 , 35880076 , 35940848 , 36001720 , 36062696 , 36123776 , 36184956 , 36246244 , 36307632 , 36369128 , 36430724 , 36492428 , 36554232 , 36616144 , 36678160 , 36740284 , 36802508 , 36864840 , 36927280 , 36989820 , 37052472 , 37115224 , 37178088 , 37241056 , 37304132 , 37367312 , 37430600 , 37493996 , 37557500 , 37621108 , 37684828 , 37748656 , 37812588 , 37876632 , 37940784 , 38005044 , 38069412 , 38133888 , 38198476 , 38263172 , 38327976 , 38392892 , 38457920 , 38523056 , 38588300 , 38653656 , 38719124 , 38784700 , 38850392 , 38916192 , 38982104 , 39048128 , 39114260 , 39180508 , 39246868 , 39313340 , 39379924 , 39446624 , 39513432 , 39580356 , 39647392 , 39714544 , 39781808 , 39849184 , 39916676 , 39984284 , 40052004 , 40119840 , 40187788 , 40255856 , 40324036 , 40392332 , 40460744 , 40529272 , 40597916 , 40666676 , 40735552 , 40804548 , 40873656 , 40942884 , 41012228 , 41081688 , 41151268 , 41220968 , 41290784 , 41360716 , 41430768 , 41500940 , 41571228 , 41641636 , 41712164 , 41782812 , 41853580 , 41924464 , 41995472 , 42066600 , 42137848 , 42209216 , 42280704 , 42352316 , 42424048 , 42495900 , 42567876 , 42639972 , 42712188 , 42784532 , 42856996 , 42929580 , 43002292 , 43075124 , 43148080 , 43221156 , 43294360 , 43367688 , 43441140 , 43514716 , 43588416 , 43662240 , 43736192 , 43810264 , 43884468 , 43958792 , 44033244 , 44107824 , 44182528 , 44257360 , 44332320 , 44407404 , 44482616 , 44557956 , 44633424 , 44709016 , 44784740 , 44860592 , 44936572 , 45012680 , 45088916 , 45165284 , 45241780 , 45318404 , 45395160 , 45472044 , 45549060 , 45626208 , 45703484 , 45780892 , 45858428 , 45936100 , 46013900 , 46091832 , 46169900 , 46248096 , 46326424 , 46404888 , 46483484 , 46562212 , 46641072 , 46720068 , 46799196 , 46878460 , 46957860 , 47037392 , 47117056 , 47196860 , 47276796 , 47356868 , 47437076 , 47517420 , 47597900 , 47678516 , 47759268 , 47840156 , 47921180 , 48002344 , 48083648 , 48165084 , 48246660 , 48328376 , 48410228 , 48492220 , 48574352 , 48656620 , 48739032 , 48821580 , 48904268 , 48987096 , 49070064 , 49153176 , 49236424 , 49319816 , 49403348 , 49487020 , 49570836 , 49654796 , 49738896 , 49823136 , 49907520 , 49992048 , 50076720 , 50161532 , 50246492 , 50331592 , 50416840 , 50502228 , 50587764 , 50673444 , 50759268 , 50845240 , 50931356 , 51017616 , 51104024 , 51190580 , 51277280 , 51364128 , 51451124 , 51538264 , 51625556 , 51712992 , 51800576 , 51888312 , 51976192 , 52064224 , 52152404 , 52240736 , 52329216 , 52417844 , 52506624 , 52595552 , 52684632 , 52773864 , 52863248 , 52952780 , 53042468 , 53132304 , 53222292 , 53312436 , 53402728 , 53493176 , 53583780 , 53674532 , 53765440 , 53856500 , 53947716 , 54039088 , 54130612 , 54222292 , 54314128 , 54406120 , 54498268 , 54590572 , 54683028 , 54775644 , 54868420 , 54961348 , 55054436 , 55147680 , 55241084 , 55334644 , 55428364 , 55522244 , 55616280 , 55710476 , 55804832 , 55899348 , 55994024 , 56088860 , 56183856 , 56279016 , 56374336 , 56469816 , 56565456 , 56661260 , 56757228 , 56853356 , 56949648 , 57046104 , 57142720 , 57239504 , 57336448 , 57433560 , 57530832 , 57628272 , 57725876 , 57823648 , 57921580 , 58019684 , 58117948 , 58216384 , 58314984 , 58413752 , 58512684 , 58611788 , 58711056 , 58810496 , 58910104 , 59009876 , 59109820 , 59209936 , 59310220 , 59410672 , 59511296 , 59612088 , 59713052 , 59814188 , 59915492 , 60016972 , 60118620 , 60220444 , 60322440 , 60424604 , 60526944 , 60629460 , 60732148 , 60835008 , 60938044 , 61041252 , 61144640 , 61248196 , 61351932 , 61455844 , 61559932 , 61664196 , 61768636 , 61873252 , 61978044 , 62083016 , 62188164 , 62293492 , 62399000 , 62504684 , 62610544 , 62716588 , 62822812 , 62929212 , 63035796 , 63142560 , 63249500 , 63356628 , 63463932 , 63571420 , 63679092 , 63786944 , 63894980 , 64003196 , 64111596 , 64220184 , 64328952 , 64437904 , 64547044 , 64656364 , 64765872 , 64875564 , 64985444 , 65095508 , 65205760 , 65316200 , 65426824 , 65537636 , 65648636 , 65759824 , 65871200 , 65982768 , 66094520 , 66206464 , 66318596 , 66430920 , 66543432 , 66656136 , 66769032 , 66882116 , 66995396};
    
    
    
    
#define ramp6515bit {0,511,1023,1535,2047,2559,3071,3583,4095,4607,5119,5631,6143,6655,7167,7679,8191,8703,9215,9727,10239,10751,11263,11775,12287,12799,13311,13823,14335,14847,15359,15871,16383,16895,17407,17919,18431,18943,19455,19967,20479,20991,21503,22015,22527,23039,23551,24063,24575,25087,25599,26111,26623,27135,27647,28159,28671,29183,29695,30207,30719,31231,31743,32255,32767}
    
    const uint16_t sinefold_ctr_1[65] = { 0, 1755, 3221, 4645, 6025, 7357, 8637,
        9863, 11031, 12137, 13180, 14156, 15062, 15896, 16655, 17337, 17940,
        18463, 18903, 19259, 19530, 19715, 19812, 19822, 19745, 19579, 19325,
        18984, 18556, 18042, 17444, 16762, 15997, 15259, 14604, 14034, 13550,
        13154, 12845, 12624, 12492, 12448, 12493, 12624, 12843, 13148, 13537,
        14009, 14563, 15197, 15909, 16696, 17557, 18488, 19487, 20551, 21677,
        22863, 24104, 25398, 26741, 28130, 29561, 31030, 32767 };
    const uint16_t sinefold_ctr_2[65] = { 0, 735, 1259, 1832, 2482, 3231, 4097,
        5090, 6218, 7480, 8869, 10372, 11969, 13636, 15341, 17052, 18730, 20335,
        21825, 23161, 24303, 25213, 25859, 26213, 26252, 25964, 25339, 24379,
        23093, 21501, 19628, 17509, 15187, 12963, 10988, 9296, 7917, 6870, 6166,
        5806, 5785, 6088, 6693, 7574, 8696, 10023, 11515, 13131, 14828, 16565,
        18303, 20007, 21645, 23190, 24621, 25924, 27091, 28119, 29012, 29783,
        30447, 31025, 31543, 32030, 32767 };
    const uint16_t sinefold_ctr_3[65] = { 0, 1698, 2972, 4008, 4759, 5208, 5364,
        5267, 4983, 4601, 4226, 3968, 3938, 4234, 4933, 6083, 7697, 9753, 12185,
        14894, 17747, 20586, 23240, 25535, 27307, 28412, 28742, 28231, 26863,
        24677, 21768, 18281, 14409, 10771, 7722, 5412, 3942, 3356, 3639, 4728,
        6512, 8846, 11561, 14478, 17418, 20219, 22740, 24873, 26549, 27737,
        28448, 28727, 28651, 28318, 27841, 27335, 26911, 26662, 26663, 26961,
        27572, 28483, 29656, 31026, 32767 };
    const uint16_t sinefold_ctr_4[65] = { 0, 827, 1647, 2786, 4263, 6018, 7918,
        9775, 11374, 12512, 13030, 12844, 11969, 10523, 8724, 6864, 5274, 4281,
        4160, 5092, 7127, 10171, 13982, 18193, 22350, 25964, 28571, 29796,
        29408, 27353, 23780, 19032, 13614, 8672, 4934, 2756, 2299, 3514, 6166,
        9871, 14153, 18505, 22452, 25608, 27717, 28670, 28514, 27428, 25695,
        23655, 21655, 20007, 18947, 18612, 19030, 20124, 21737, 23660, 25668,
        27557, 29175, 30442, 31360, 32006, 32767 };
    const uint16_t sinefold_ctr_5[65] = { 0, 1576, 2476, 2878, 2871, 2694, 2678,
        3159, 4381, 6420, 9135, 12181, 15062, 17239, 18250, 17829, 15991, 13057,
        9621, 6444, 4306, 3841, 5390, 8900, 13903, 19579, 24897, 28810, 30469,
        29407, 25662, 19805, 12856, 6767, 2848, 1696, 3360, 7368, 12845, 18710,
        23890, 27526, 29122, 28610, 26333, 22945, 19260, 16080, 14038, 13488,
        14462, 16696, 19711, 22937, 25840, 28032, 29339, 29815, 29699, 29340,
        29097, 29247, 29920, 31077, 32767 };
    const uint16_t sinefold_ctr_6[65] = { 0, 977, 2212, 3929, 5831, 7442, 8290,
        8112, 6998, 5417, 4099, 3814, 5096, 8024, 12132, 16485, 19931, 21445,
        20475, 17162, 12380, 7530, 4166, 3534, 6163, 11644, 18681, 25400, 29868,
        30658, 27309, 20531, 12068, 5026, 1515, 2280, 6858, 13784, 21058, 26733,
        29449, 28766, 25218, 20093, 15011, 11449, 10339, 11855, 15433, 20004,
        24346, 27453, 28799, 28436, 26914, 25047, 23638, 23227, 23960, 25598,
        27651, 29594, 31059, 31964, 32767 };
    const uint16_t sinefold_ctr_7[65] = { 0, 1403, 1889, 1892, 1985, 2828, 4785,
        7645, 10624, 12658, 12901, 11177, 8184, 5312, 4112, 5618, 9820, 15529,
        20752, 23450, 22400, 17800, 11328, 5581, 3088, 5257, 11703, 20262,
        27730, 31090, 28747, 21273, 11321, 3559, 1087, 4514, 12206, 21050,
        27721, 29956, 27333, 21299, 14479, 9592, 8413, 11176, 16624, 22618,
        27044, 28617, 27287, 24128, 20787, 18775, 18889, 20990, 24192, 27338,
        29519, 30429, 30392, 30108, 30246, 31109, 32767 };
    const uint16_t sinefold_ctr_8[65] = { 0, 1183, 2787, 4626, 5846, 5807, 4645,
        3364, 3333, 5433, 9376, 13652, 16226, 15679, 12144, 7468, 4397, 5132,
        10028, 17171, 23183, 24917, 21207, 13688, 6178, 2812, 5853, 14324,
        24276, 30659, 29922, 21997, 10574, 2346, 1533, 8091, 18364, 27125,
        30263, 26737, 18873, 10971, 7023, 8770, 15021, 22496, 27632, 28380,
        25071, 20011, 16123, 15415, 18087, 22653, 26917, 29192, 29085, 27501,
        25944, 25602, 26747, 28760, 30686, 31907, 32767 };
    const uint16_t sinefold_ctr_9[65] = { 0, 1208, 1408, 1616, 2871, 5455, 8387,
        9978, 9130, 6420, 4019, 4332, 8189, 13940, 18250, 18266, 13738, 7559,
        4126, 6444, 13876, 22185, 26075, 22715, 13903, 5260, 2754, 8701, 19910,
        29407, 30828, 22720, 9847, 1428, 2848, 12632, 24214, 30362, 27737,
        18710, 9474, 5901, 9905, 18561, 26333, 28746, 25082, 18474, 13573,
        13488, 18015, 24142, 28274, 28564, 25840, 22689, 21546, 23154, 26386,
        29340, 30779, 30849, 30655, 31193, 32767 };
    
    const uint16_t perlin6_1[65] = {0,506,1016,1530,2048,2571,3098,3630,4167,4710,5257,5809,6366,6928,7494,8065,8640,9220,9803,10389,10933,11475,12016,12554,13089,13621,14150,14676,15197,15715,16231,16744,17256,17766,18275,18781,19286,19789,20290,20789,21287,21783,22277,22770,23261,23750,24182,24615,25048,25482,25917,26354,26792,27232,27675,28119,28567,29017,29470,29926,30386,30850,31317,31788,32767};
    const uint16_t perlin6_2[65] = {0,509,1030,1565,2116,2686,3276,3889,4524,5184,5869,6581,7318,8081,8870,9683,10520,11380,12259,13157,13870,14574,15268,15949,16614,17263,17893,18501,19087,19648,20197,20734,21260,21776,22280,22773,23255,23726,24187,24636,25075,25504,25921,26329,26726,27113,27263,27418,27580,27749,27928,28118,28320,28537,28770,29020,29288,29577,29887,30220,30576,30958,31366,31801,32767};
    const uint16_t perlin6_3[65] = {0,637,1150,1548,1842,2049,2186,2275,2335,2390,2463,2576,2753,3013,3377,3863,4484,5252,6175,7256,8573,9949,11363,12796,14225,15624,16967,18225,19367,20374,21300,22158,22947,23670,24327,24920,25450,25919,26331,26687,26992,27249,27461,27633,27769,27874,27703,27559,27450,27383,27364,27399,27490,27640,27850,28120,28447,28827,29255,29724,30223,30741,31263,31774,32767};
    const uint16_t perlin6_4[65] = {0,1104,2256,3414,4530,5550,6422,7101,7551,7753,7706,7435,6969,6171,5095,3860,2598,1447,539,0,442,1391,2821,4676,6872,9297,11811,14244,16402,18109,19518,20675,21586,22265,22729,23001,23109,23084,22963,22788,22606,22466,22427,22548,22894,23537,24453,25507,26569,27550,28392,29063,29553,29874,30049,30115,30113,30092,30097,30171,30346,30647,31079,31626,32767};
    const uint16_t perlin6_5[65] = {0,499,902,1384,2080,3062,4289,5573,6561,7774,9487,11465,13433,15108,16235,16623,16181,14956,13166,10795,7881,5388,3857,3617,4786,7268,10755,14729,18458,21149,23030,24234,24826,24907,24614,24122,23639,23410,23718,24874,26758,28827,30689,32061,32767,32748,31582,30074,28532,27293,26472,25874,25616,25740,26216,26966,27871,28806,29654,30328,30774,31024,31290,31695,32767};
    const uint16_t perlin6_6[65] = {0,788,1427,2217,3244,4395,5371,5701,4859,3531,2511,2335,3263,5117,7114,8212,10359,13034,15132,15838,14533,11966,8845,5193,2606,2214,4304,8321,12867,15992,17702,18286,18014,17297,16689,16888,18578,20974,22948,23838,23423,21917,19975,18425,17110,16425,16970,18312,20051,21630,22324,21970,21562,21703,22599,24151,26062,27964,29499,30411,30778,30879,31047,31515,32767};
    const uint16_t perlin6_7[65] = {0,937,1522,2229,4238,7257,9498,9498,7319,5535,6018,7917,9727,9496,5678,2034,1274,3929,8008,10336,14681,17905,17712,14140,8920,3467,1989,5823,12719,17537,19360,19052,17779,17313,19715,23299,25128,24154,21193,18510,16540,16233,17764,20098,20845,18603,16927,17695,20985,25530,29335,30539,29242,27090,26102,24823,24498,25688,27786,29618,30428,30697,30966,31532,32767};
    const uint16_t perlin6_8[65] = {0,732,1600,2059,1672,2325,5490,7424,6651,5814,9852,16521,17502,11423,7005,8782,11929,10370,2717,0,5062,10222,15607,19933,17642,10620,2893,3240,11926,18684,20047,18398,17675,21936,25633,24350,19955,16641,15944,18468,20719,17637,15180,17907,25024,31174,30392,25532,22472,19214,20437,25394,28710,28524,27257,27795,29755,30221,29518,29293,30185,30903,31182,31418,32767};
    const uint16_t perlin6_9[65] = {0,891,1396,1274,1955,3741,4554,4824,5999,4396,3821,8798,9933,7145,10625,18843,15572,7019,8364,11363,5181,821,6172,10989,16882,15319,7315,2095,9076,16039,16248,14467,17988,21186,17975,13935,13044,15952,15240,12004,15182,22729,24628,19481,15160,12879,18936,23570,22479,21810,25200,25563,23796,24810,26072,25319,22196,22622,27131,30539,30446,29524,29958,31137,32767};
    
    
    const uint16_t bounce1[65] = { 0, 543, 1136, 1766, 2419, 3082, 3741, 4384, 4999,
        5575, 6099, 6564, 6962, 7284, 7526, 7684, 7756, 7741, 7640, 7455, 7190,
        6852, 6447, 5984, 5473, 4923, 4348, 3759, 3170, 2594, 2044, 1536, 1081,
        694, 387, 172, 60, 60, 181, 429, 811, 1329, 1985, 2780, 3710, 4773,
        5962, 7269, 8685, 10197, 11793, 13457, 15174, 16925, 18692, 20455,
        22194, 23888, 25516, 27058, 28492, 29799, 30959, 31954, 32767 };
    const uint16_t bounce2[65] = { 0, 554, 1157, 1774, 2369, 2910, 3371, 3732, 3980,
        4111, 4130, 4049, 3891, 3681, 3454, 3245, 3090, 3026, 3086, 3297, 3680,
        4246, 4999, 5929, 7018, 8238, 9549, 10907, 12259, 13551, 14725, 15728,
        16509, 17025, 17241, 17136, 16701, 15940, 14874, 13538, 11981, 10263,
        8456, 6639, 4896, 3311, 1967, 940, 297, 91, 361, 1126, 2388, 4127, 6303,
        8857, 11710, 14772, 17936, 21091, 24121, 26908, 29343, 31325, 32767 };
    const uint16_t bounce3[65] = { 0, 570, 1185, 1769, 2260, 2611, 2800, 2833, 2742,
        2581, 2419, 2334, 2400, 2677, 3203, 3988, 5009, 6212, 7511, 8803, 9970,
        10897, 11482, 11650, 11360, 10616, 9469, 8013, 6382, 4738, 3256, 2112,
        1458, 1416, 2055, 3386, 5360, 7859, 10715, 13714, 16619, 19185, 21187,
        22436, 22803, 22230, 20740, 18440, 15514, 12208, 8816, 5651, 3020, 1196,
        393, 745, 2287, 4956, 8585, 12917, 17625, 22337, 26667, 30249, 32767 };
    const uint16_t bounce4[65] = { 0, 589, 1204, 1721, 2054, 2173, 2109, 1953, 1831,
        1878, 2204, 2869, 3861, 5093, 6408, 7610, 8492, 8883, 8678, 7873, 6568,
        4969, 3352, 2031, 1299, 1377, 2374, 4252, 6828, 9788, 12727, 15217,
        16867, 17393, 16673, 14772, 11949, 8624, 5323, 2599, 947, 721, 2075,
        4922, 8941, 13610, 18284, 22283, 24999, 25997, 25081, 22347, 18169,
        13160, 8088, 3758, 898, 36, 1418, 4957, 10233, 16548, 23018, 28709,
        32767 };
    const uint16_t bounce5[65] = { 0, 610, 1212, 1629, 1777, 1698, 1539, 1510, 1805,
        2529, 3647, 4976, 6225, 7068, 7246, 6649, 5376, 3731, 2164, 1166, 1137,
        2272, 4482, 7394, 10413, 12861, 14137, 13881, 12086, 9124, 5685, 2630,
        792, 763, 2738, 6436, 11142, 15851, 19496, 21205, 20517, 17524, 12871,
        7638, 3097, 418, 390, 3204, 8390, 14889, 21288, 26132, 28273, 27153,
        22961, 16619, 9592, 3563, 45, 16, 3670, 10343, 18637, 26726, 32767 };
    const uint16_t bounce6[65] = { 0, 631, 1204, 1500, 1485, 1331, 1336, 1768, 2722,
        4037, 5330, 6131, 6082, 5114, 3524, 1914, 994, 1319, 3052, 5850, 8934,
        11323, 12178, 11121, 8419, 4952, 1954, 603, 1603, 4891, 9605, 14320,
        17506, 18052, 15680, 11098, 5815, 1677, 250, 2265, 7325, 13973, 20134,
        23790, 23666, 19705, 13143, 6157, 1165, 24, 3378, 10382, 18931, 26309,
        30085, 28937, 23146, 14559, 6030, 501, 16, 5004, 14080, 24443, 32767 };
    const uint16_t bounce7[65] = { 0, 651, 1184, 1353, 1236, 1184, 1590, 2606, 3982,
        5145, 5489, 4736, 3170, 1583, 939, 1882, 4349, 7496, 10016, 10732, 9201,
        6018, 2639, 777, 1593, 5094, 10021, 14330, 16091, 14408, 9917, 4608,
        995, 987, 4959, 11476, 17842, 21263, 20125, 14810, 7630, 1874, 363,
        4129, 11855, 20357, 25945, 26076, 20564, 11773, 3655, 31, 2850, 11231,
        21744, 29860, 31954, 26977, 17029, 6526, 295, 1412, 9754, 21947, 32767 };
    const uint16_t bounce8[65] = { 0, 650, 1114, 1164, 1040, 1255, 2141, 3492, 4601,
        4719, 3638, 1980, 928, 1510, 3857, 6959, 9141, 9061, 6615, 3175, 910,
        1520, 5127, 10027, 13555, 13618, 10029, 4785, 1051, 1344, 5968, 12666,
        17778, 18333, 13859, 6837, 1413, 1042, 6408, 14852, 21751, 23140, 18074,
        9351, 2053, 680, 6482, 16570, 25418, 27974, 22636, 12337, 3027, 325,
        6230, 17813, 28726, 32767, 27499, 15799, 4383, 44, 5702, 18583, 31630 };
    const uint16_t bounce9[65] = { 0, 640, 1024, 974, 937, 1514, 2762, 3963, 4150,
        3015, 1392, 780, 2174, 5098, 7715, 8103, 5800, 2406, 609, 2218, 6638,
        11042, 12296, 9328, 4155, 657, 1810, 7364, 13754, 16501, 13490, 6726,
        1145, 1151, 7317, 15703, 20484, 18130, 10149, 2271, 471, 6597, 16789,
        24013, 23047, 14395, 4197, 10, 5355, 16969, 26879, 28009, 19372, 7038,
        9, 3792, 16260, 28903, 32767, 24934, 10853, 694, 2141, 14740, 29954 };
    
    const uint16_t trifold_1[65] = { 0, 512, 1024, 1536, 2048, 2560, 3072, 3584,
        4096, 4608, 5120, 5632, 6144, 6656, 7168, 7680, 8192, 8704, 9216, 9728,
        10240, 10752, 11264, 11776, 12288, 12800, 13312, 13824, 14336, 14848,
        15360, 15872, 16384, 16896, 17408, 17920, 18432, 18944, 19456, 19968,
        20480, 20992, 21504, 22016, 22528, 23040, 23552, 24064, 24576, 25088,
        25600, 26112, 26624, 27136, 27648, 28160, 28672, 29184, 29696, 30208,
        30720, 31232, 31744, 32256, 32767 };
    const uint16_t trifold_2[65] = { 32767, 31232, 29696, 28160, 26624, 25088,
        23552, 22016, 20480, 18944, 17408, 15872, 14336, 12800, 11264, 9728,
        8192, 6656, 5120, 3584, 2048, 512, 0, 1536, 3072, 4608, 6144, 7680,
        9216, 10752, 12288, 13824, 15360, 16896, 18432, 19968, 21504, 23040,
        24576, 26112, 27648, 29184, 30720, 32256, 31744, 30208, 28672, 27136,
        25600, 24064, 22528, 20992, 19456, 17920, 16384, 14848, 13312, 11776,
        10240, 8704, 7168, 5632, 4096, 2560, 1024 };
    const uint16_t trifold_3[65] = { 16384, 18432, 20480, 22528, 24576, 26624,
        28672, 30720, 32767, 31232, 29184, 27136, 25088, 23040, 20992, 18944,
        16896, 14848, 12800, 10752, 8704, 6656, 4608, 2560, 512, 1024, 3072,
        5120, 7168, 9216, 11264, 13312, 15360, 17408, 19456, 21504, 23552,
        25600, 27648, 29696, 31744, 32256, 30208, 28160, 26112, 24064, 22016,
        19968, 17920, 15872, 13824, 11776, 9728, 7680, 5632, 3584, 1536, 0,
        2048, 4096, 6144, 8192, 10240, 12288, 14336 };
    const uint16_t trifold_4[65] = { 0, 2521, 5041, 7562, 10082, 12603, 15124,
        17644, 20165, 22686, 25206, 27727, 30247, 32767, 30247, 27727, 25206,
        22686, 20165, 17644, 15124, 12603, 10082, 7562, 5041, 2521, 0, 2521,
        5041, 7562, 10082, 12603, 15124, 17644, 20165, 22686, 25206, 27727,
        30247, 32767, 30247, 27727, 25206, 22686, 20165, 17644, 15124, 12603,
        10082, 7562, 5041, 2521, 0, 2521, 5041, 7562, 10082, 12603, 15124,
        17644, 20165, 22686, 25206, 27727, 30247 };
    const uint16_t trifold_5[65] = { 16384, 13312, 10240, 7168, 4096, 1024, 1536,
        4608, 7680, 10752, 13824, 16896, 19968, 23040, 26112, 29184, 32256,
        30720, 27648, 24576, 21504, 18432, 15360, 12288, 9216, 6144, 3072, 0,
        2560, 5632, 8704, 11776, 14848, 17920, 20992, 24064, 27136, 30208,
        32767, 29696, 26624, 23552, 20480, 17408, 14336, 11264, 8192, 5120,
        2048, 512, 3584, 6656, 9728, 12800, 15872, 18944, 22016, 25088, 28160,
        31232, 31744, 28672, 25600, 22528, 19456 };
    const uint16_t trifold_6[65] = { 32767, 29184, 25600, 22016, 18432, 14848,
        11264, 7680, 4096, 512, 2048, 5632, 9216, 12800, 16384, 19968, 23552,
        27136, 30720, 31232, 27648, 24064, 20480, 16896, 13312, 9728, 6144,
        2560, 0, 3584, 7168, 10752, 14336, 17920, 21504, 25088, 28672, 32256,
        29696, 26112, 22528, 18944, 15360, 11776, 8192, 4608, 1024, 1536, 5120,
        8704, 12288, 15872, 19456, 23040, 26624, 30208, 31744, 28160, 24576,
        20992, 17408, 13824, 10240, 6656, 3072 };
    const uint16_t trifold_7[65] = { 16384, 20480, 24576, 28672, 32767, 29184,
        25088, 20992, 16896, 12800, 8704, 4608, 512, 3072, 7168, 11264, 15360,
        19456, 23552, 27648, 31744, 30208, 26112, 22016, 17920, 13824, 9728,
        5632, 1536, 2048, 6144, 10240, 14336, 18432, 22528, 26624, 30720, 31232,
        27136, 23040, 18944, 14848, 10752, 6656, 2560, 1024, 5120, 9216, 13312,
        17408, 21504, 25600, 29696, 32256, 28160, 24064, 19968, 15872, 11776,
        7680, 3584, 0, 4096, 8192, 12288 };
    const uint16_t trifold_8[65] = { 0, 4608, 9216, 13824, 18432, 23040, 27648,
        32256, 29696, 25088, 20480, 15872, 11264, 6656, 2048, 2560, 7168, 11776,
        16384, 20992, 25600, 30208, 31744, 27136, 22528, 17920, 13312, 8704,
        4096, 512, 5120, 9728, 14336, 18944, 23552, 28160, 32767, 29184, 24576,
        19968, 15360, 10752, 6144, 1536, 3072, 7680, 12288, 16896, 21504, 26112,
        30720, 31232, 26624, 22016, 17408, 12800, 8192, 3584, 1024, 5632, 10240,
        14848, 19456, 24064, 28672 };
    const uint16_t trifold_9[65] = { 16384, 10923, 5461, 0, 2731, 8192, 13653,
        19115, 24576, 30037, 32767, 27307, 21845, 16384, 10923, 5461, 0, 2731,
        8192, 13653, 19115, 24576, 30037, 32767, 27307, 21845, 16384, 10923,
        5461, 0, 2731, 8192, 13653, 19115, 24576, 30037, 32767, 27307, 21845,
        16384, 10923, 5461, 0, 2731, 8192, 13653, 19115, 24576, 30037, 32767,
        27307, 21845, 16384, 10923, 5461, 0, 2731, 8192, 13653, 19115, 24576,
        30037, 32767, 27307, 21845 };
    
    const uint16_t triodd_1[65] = { 0, 512, 1024, 1536, 2048, 2560, 3072, 3584,
        4096, 4608, 5120, 5632, 6144, 6656, 7168, 7680, 8192, 8704, 9216, 9728,
        10240, 10752, 11264, 11776, 12288, 12800, 13312, 13824, 14336, 14848,
        15360, 15872, 16384, 16896, 17408, 17920, 18432, 18944, 19456, 19968,
        20480, 20992, 21504, 22016, 22528, 23040, 23552, 24064, 24576, 25088,
        25600, 26112, 26624, 27136, 27648, 28160, 28672, 29184, 29696, 30208,
        30720, 31232, 31744, 32256, 32767 };
    const uint16_t triodd_2[65] = { 1024, 2560, 4096, 5632, 7168, 8704, 10240,
        11776, 13312, 14848, 16384, 17920, 19456, 20992, 22528, 24064, 25600,
        27136, 28672, 30208, 31744, 32256, 30720, 29184, 27648, 26112, 24576,
        23040, 21504, 19968, 18432, 16896, 15360, 13824, 12288, 10752, 9216,
        7680, 6144, 4608, 3072, 1536, 0, 512, 2048, 3584, 5120, 6656, 8192,
        9728, 11264, 12800, 14336, 15872, 17408, 18944, 20480, 22016, 23552,
        25088, 26624, 28160, 29696, 31232, 32767 };
    const uint16_t triodd_3[65] = { 0, 2521, 5041, 7562, 10082, 12603, 15124, 17644,
        20165, 22686, 25206, 27727, 30247, 32767, 30247, 27727, 25206, 22686,
        20165, 17644, 15124, 12603, 10082, 7562, 5041, 2521, 0, 2521, 5041,
        7562, 10082, 12603, 15124, 17644, 20165, 22686, 25206, 27727, 30247,
        32767, 30247, 27727, 25206, 22686, 20165, 17644, 15124, 12603, 10082,
        7562, 5041, 2521, 0, 2521, 5041, 7562, 10082, 12603, 15124, 17644,
        20165, 22686, 25206, 27727, 30247 };
    const uint16_t triodd_4[65] = { 3072, 6656, 10240, 13824, 17408, 20992, 24576,
        28160, 31744, 30208, 26624, 23040, 19456, 15872, 12288, 8704, 5120,
        1536, 1024, 4608, 8192, 11776, 15360, 18944, 22528, 26112, 29696, 32256,
        28672, 25088, 21504, 17920, 14336, 10752, 7168, 3584, 0, 2560, 6144,
        9728, 13312, 16896, 20480, 24064, 27648, 31232, 30720, 27136, 23552,
        19968, 16384, 12800, 9216, 5632, 2048, 512, 4096, 7680, 11264, 14848,
        18432, 22016, 25600, 29184, 32767 };
    const uint16_t triodd_5[65] = { 0, 4608, 9216, 13824, 18432, 23040, 27648,
        32256, 29696, 25088, 20480, 15872, 11264, 6656, 2048, 2560, 7168, 11776,
        16384, 20992, 25600, 30208, 31744, 27136, 22528, 17920, 13312, 8704,
        4096, 512, 5120, 9728, 14336, 18944, 23552, 28160, 32767, 29184, 24576,
        19968, 15360, 10752, 6144, 1536, 3072, 7680, 12288, 16896, 21504, 26112,
        30720, 31232, 26624, 22016, 17408, 12800, 8192, 3584, 1024, 5632, 10240,
        14848, 19456, 24064, 28672 };
    const uint16_t triodd_6[65] = { 5120, 10752, 16384, 22016, 27648, 32256, 26624,
        20992, 15360, 9728, 4096, 512, 6144, 11776, 17408, 23040, 28672, 31232,
        25600, 19968, 14336, 8704, 3072, 1536, 7168, 12800, 18432, 24064, 29696,
        30208, 24576, 18944, 13312, 7680, 2048, 2560, 8192, 13824, 19456, 25088,
        30720, 29184, 23552, 17920, 12288, 6656, 1024, 3584, 9216, 14848, 20480,
        26112, 31744, 28160, 22528, 16896, 11264, 5632, 0, 4608, 10240, 15872,
        21504, 27136, 32767 };
    const uint16_t triodd_7[65] = { 0, 6554, 13107, 19661, 26214, 32767, 26214,
        19661, 13107, 6554, 0, 6554, 13107, 19661, 26214, 32767, 26214, 19661,
        13107, 6554, 0, 6554, 13107, 19661, 26214, 32767, 26214, 19661, 13107,
        6554, 0, 6554, 13107, 19661, 26214, 32767, 26214, 19661, 13107, 6554, 0,
        6554, 13107, 19661, 26214, 32767, 26214, 19661, 13107, 6554, 0, 6554,
        13107, 19661, 26214, 32767, 26214, 19661, 13107, 6554, 0, 6554, 13107,
        19661, 26214 };
    const uint16_t triodd_8[65] = { 7562, 15124, 22686, 30247, 27727, 20165, 12603,
        5041, 2521, 10082, 17644, 25206, 32767, 25206, 17644, 10082, 2521, 5041,
        12603, 20165, 27727, 30247, 22686, 15124, 7562, 0, 7562, 15124, 22686,
        30247, 27727, 20165, 12603, 5041, 2521, 10082, 17644, 25206, 32767,
        25206, 17644, 10082, 2521, 5041, 12603, 20165, 27727, 30247, 22686,
        15124, 7562, 0, 7562, 15124, 22686, 30247, 27727, 20165, 12603, 5041,
        2521, 10082, 17644, 25206, 32767 };
    const uint16_t triodd_9[65] = { 0, 8704, 17408, 26112, 31744, 23040, 14336,
        5632, 3072, 11776, 20480, 29184, 28672, 19968, 11264, 2560, 6144, 14848,
        23552, 32256, 25600, 16896, 8192, 512, 9216, 17920, 26624, 31232, 22528,
        13824, 5120, 3584, 12288, 20992, 29696, 28160, 19456, 10752, 2048, 6656,
        15360, 24064, 32767, 25088, 16384, 7680, 1024, 9728, 18432, 27136,
        30720, 22016, 13312, 4608, 4096, 12800, 21504, 30208, 27648, 18944,
        10240, 1536, 7168, 15872, 24576 };
    
    const uint16_t trifudge_1[65] = { 256, 752, 1248, 1744, 2240, 2736, 3232, 3728,
        4224, 4720, 5216, 5712, 6208, 6704, 7200, 7696, 8192, 8704, 9216, 9728,
        10240, 10752, 11264, 11776, 12288, 12800, 13312, 13824, 14336, 14848,
        15360, 15872, 16384, 16896, 17408, 17920, 18432, 18944, 19456, 19968,
        20480, 20992, 21504, 22016, 22528, 23040, 23552, 24064, 24576, 25104,
        25632, 26160, 26688, 27216, 27744, 28272, 28800, 29328, 29856, 30384,
        30912, 31440, 31968, 32496, 32512 };
    const uint16_t trifudge_2[65] = { 0, 1632, 3328, 5088, 6912, 8800, 10752, 12768,
        14848, 16992, 19200, 21472, 23808, 26208, 28672, 31200, 32256, 31232,
        30208, 29184, 28160, 27136, 26112, 25088, 24064, 23040, 22016, 20992,
        19968, 18944, 17920, 16896, 15872, 14848, 13824, 12800, 11776, 10752,
        9728, 8704, 7680, 6656, 5632, 4608, 3584, 2560, 1536, 512, 0, 2528,
        4992, 7392, 9728, 12000, 14208, 16352, 18432, 20448, 22400, 24288,
        26112, 27872, 29568, 31200, 32767 };
    const uint16_t trifudge_3[65] = { 1024, 2560, 4096, 5632, 7168, 8704, 10240,
        11776, 13312, 14848, 16384, 17920, 19456, 20992, 22528, 24064, 25600,
        27136, 28672, 30208, 31744, 32256, 30720, 29184, 27648, 26112, 24576,
        23040, 21504, 19968, 18432, 16896, 15360, 13824, 12288, 10752, 9216,
        7680, 6144, 4608, 3072, 1536, 0, 512, 2048, 3584, 5120, 6656, 8192,
        9728, 11264, 12800, 14336, 15872, 17408, 18944, 20480, 22016, 23552,
        25088, 26624, 28160, 29696, 31232, 32767 };
    const uint16_t trifudge_4[65] = { 0, 3072, 6583, 10533, 14921, 19749, 25015,
        30720, 32767, 31232, 29184, 27136, 25088, 23040, 20992, 18944, 16896,
        14848, 12800, 10752, 8704, 6656, 4608, 2560, 512, 1024, 3072, 5120,
        7168, 9216, 11264, 13312, 15360, 17408, 19456, 21504, 23552, 25600,
        27648, 29696, 31744, 32256, 30208, 28160, 26112, 24064, 22016, 19968,
        17920, 15872, 13824, 11776, 9728, 7680, 5632, 3584, 1536, 0, 5998,
        11557, 16677, 21358, 25600, 29403, 32767 };
    const uint16_t trifudge_5[65] = { 0, 2521, 5041, 7562, 10082, 12603, 15124,
        17644, 20165, 22686, 25206, 27727, 30247, 32767, 30247, 27727, 25206,
        22686, 20165, 17644, 15124, 12603, 10082, 7562, 5041, 2521, 0, 2521,
        5041, 7562, 10082, 12603, 15124, 17644, 20165, 22686, 25206, 27727,
        30247, 32767, 30247, 27727, 25206, 22686, 20165, 17644, 15124, 12603,
        10082, 7562, 5041, 2521, 0, 2521, 5041, 7562, 10082, 12603, 15124,
        17644, 20165, 22686, 25206, 27727, 30247 };
    const uint16_t trifudge_6[65] = { 0, 6016, 13312, 21888, 31744, 31232, 28160,
        25088, 22016, 18944, 15872, 12800, 9728, 6656, 3584, 512, 2048, 5120,
        8192, 11264, 14336, 17408, 20480, 23552, 26624, 29696, 32767, 30208,
        27136, 24064, 20992, 17920, 14848, 11776, 8704, 5632, 2560, 0, 3072,
        6144, 9216, 12288, 15360, 18432, 21504, 24576, 27648, 30720, 32256,
        29184, 26112, 23040, 19968, 16896, 13824, 10752, 7680, 4608, 1536, 1024,
        4096, 13184, 20992, 27520, 32767 };
    const uint16_t trifudge_7[65] = { 3072, 6656, 10240, 13824, 17408, 20992, 24576,
        28160, 31744, 30208, 26624, 23040, 19456, 15872, 12288, 8704, 5120,
        1536, 1024, 4608, 8192, 11776, 15360, 18944, 22528, 26112, 29696, 32256,
        28672, 25088, 21504, 17920, 14336, 10752, 7168, 3584, 0, 2560, 6144,
        9728, 13312, 16896, 20480, 24064, 27648, 31232, 30720, 27136, 23552,
        19968, 16384, 12800, 9216, 5632, 2048, 512, 4096, 7680, 11264, 14848,
        18432, 22016, 25600, 29184, 32767 };
    const uint16_t trifudge_8[65] = { 0, 7168, 16725, 28672, 32767, 29184, 25088,
        20992, 16896, 12800, 8704, 4608, 512, 3072, 7168, 11264, 15360, 19456,
        23552, 27648, 31744, 30208, 26112, 22016, 17920, 13824, 9728, 5632,
        1536, 2048, 6144, 10240, 14336, 18432, 22528, 26624, 30720, 31232,
        27136, 23040, 18944, 14848, 10752, 6656, 2560, 1024, 5120, 9216, 13312,
        17408, 21504, 25600, 29696, 32256, 28160, 24064, 19968, 15872, 11776,
        7680, 3584, 0, 13312, 24235, 32767 };
    const uint16_t trifudge_9[65] = { 0, 4608, 9216, 13824, 18432, 23040, 27648,
        32256, 29696, 25088, 20480, 15872, 11264, 6656, 2048, 2560, 7168, 11776,
        16384, 20992, 25600, 30208, 31744, 27136, 22528, 17920, 13312, 8704,
        4096, 512, 5120, 9728, 14336, 18944, 23552, 28160, 32767, 29184, 24576,
        19968, 15360, 10752, 6144, 1536, 3072, 7680, 12288, 16896, 21504, 26112,
        30720, 31232, 26624, 22016, 17408, 12800, 8192, 3584, 1024, 5632, 10240,
        14848, 19456, 24064, 28672 };
    
    const uint16_t moog1attack[65] = { 21659, 21503, 20634, 18818, 16219, 13251,
        10408, 8124, 6692, 6231, 6690, 7878, 9512, 11283, 12902, 14146, 14884,
        15086, 14809, 14180, 13364, 12531, 11830, 11367, 11196, 11315, 11676,
        12202, 12798, 13372, 13850, 14183, 14352, 14367, 14262, 14084, 13886,
        13715, 13609, 13588, 13658, 13807, 14014, 14251, 14490, 14705, 14880,
        15005, 15082, 15119, 15129, 15128, 15131, 15151, 15195, 15267, 15365,
        15483, 15612, 15745, 15872, 15988, 16090, 16177, 16251 };
    const uint16_t moog1release[65] = { 21602, 21529, 21444, 21360, 21275, 21190,
        21105, 21020, 20934, 20849, 20764, 20679, 20594, 20509, 20424, 20340,
        20256, 20172, 20087, 20003, 19918, 19833, 19747, 19661, 19575, 19488,
        19403, 19317, 19233, 19149, 19066, 18983, 18901, 18818, 18735, 18650,
        18564, 18477, 18388, 18299, 18210, 18121, 18034, 17950, 17868, 17788,
        17710, 17633, 17556, 17477, 17394, 17307, 17216, 17120, 17022, 16922,
        16825, 16731, 16645, 16566, 16496, 16433, 16374, 16315, 16251 };
    const uint16_t moog2attack[65] = { 21503, 21557, 21528, 21343, 20945, 20305,
        19421, 18318, 17038, 15636, 14173, 12714, 11320, 10046, 8940, 8037,
        7366, 6939, 6760, 6822, 7107, 7591, 8243, 9025, 9899, 10825, 11764,
        12680, 13539, 14313, 14979, 15522, 15931, 16203, 16340, 16350, 16246,
        16045, 15764, 15426, 15053, 14667, 14287, 13934, 13623, 13368, 13179,
        13062, 13021, 13055, 13161, 13332, 13559, 13834, 14144, 14477, 14821,
        15165, 15497, 15808, 16090, 16338, 16546, 16713, 16839 };
    const uint16_t moog2release[65] = { 21455, 21377, 21295, 21209, 21120, 21026,
        20929, 20829, 20725, 20619, 20510, 20401, 20293, 20185, 20080, 19978,
        19881, 19789, 19704, 19625, 19553, 19489, 19430, 19378, 19331, 19287,
        19246, 19204, 19162, 19115, 19063, 19003, 18933, 18853, 18761, 18656,
        18538, 18408, 18267, 18117, 17959, 17796, 17632, 17470, 17313, 17166,
        17031, 16913, 16813, 16735, 16680, 16647, 16637, 16648, 16677, 16721,
        16775, 16834, 16891, 16940, 16974, 16987, 16972, 16924, 16839 };
    const uint16_t moog3attack[65] = { 21000, 21133, 21247, 21318, 21324, 21244,
        21061, 20767, 20358, 19836, 19207, 18482, 17675, 16804, 15885, 14937,
        13981, 13035, 12116, 11244, 10431, 9694, 9042, 8486, 8034, 7689, 7454,
        7331, 7317, 7409, 7601, 7887, 8257, 8703, 9213, 9776, 10381, 11015,
        11667, 12326, 12979, 13617, 14229, 14808, 15346, 15835, 16272, 16651,
        16971, 17229, 17426, 17563, 17642, 17665, 17637, 17562, 17446, 17295,
        17114, 16911, 16692, 16464, 16232, 16004, 15784 };
    const uint16_t moog3release[65] = { 20885, 20751, 20621, 20496, 20376, 20264,
        20158, 20062, 19975, 19897, 19829, 19772, 19725, 19688, 19661, 19643,
        19633, 19631, 19634, 19641, 19652, 19663, 19674, 19682, 19685, 19682,
        19670, 19647, 19612, 19563, 19499, 19417, 19318, 19201, 19065, 18911,
        18738, 18547, 18341, 18119, 17885, 17640, 17388, 17130, 16870, 16612,
        16359, 16115, 15883, 15667, 15470, 15296, 15148, 15027, 14937, 14879,
        14855, 14864, 14907, 14983, 15091, 15228, 15392, 15578, 15784 };
    const uint16_t moog5attack[65] = { 21901, 21982, 22047, 22087, 22093, 22057,
        21970, 21826, 21619, 21347, 21009, 20606, 20140, 19614, 19035, 18407,
        17739, 17038, 16312, 15569, 14819, 14069, 13328, 12604, 11905, 11238,
        10610, 10027, 9494, 9015, 8596, 8238, 7945, 7718, 7557, 7463, 7435,
        7473, 7573, 7734, 7952, 8223, 8544, 8911, 9318, 9760, 10233, 10731,
        11249, 11781, 12322, 12866, 13410, 13947, 14473, 14984, 15477, 15946,
        16390, 16805, 17188, 17539, 17854, 18134, 18377 };
    const uint16_t moog5release[65] = { 21874, 21772, 21659, 21535, 21400, 21253,
        21096, 20928, 20750, 20563, 20367, 20164, 19954, 19738, 19518, 19294,
        19070, 18845, 18622, 18401, 18186, 17976, 17775, 17583, 17403, 17235,
        17081, 16943, 16821, 16716, 16631, 16565, 16518, 16492, 16486, 16501,
        16535, 16589, 16662, 16753, 16860, 16982, 17117, 17263, 17419, 17582,
        17749, 17917, 18085, 18250, 18407, 18555, 18690, 18809, 18910, 18990,
        19046, 19075, 19075, 19045, 18982, 18885, 18752, 18583, 18377 };
    const uint16_t moog6attack[65] = { 19268, 19400, 19537, 19676, 19810, 19933,
        20041, 20127, 20187, 20217, 20213, 20172, 20093, 19974, 19816, 19617,
        19380, 19105, 18795, 18452, 18078, 17677, 17253, 16808, 16347, 15873,
        15390, 14902, 14414, 13928, 13448, 12978, 12522, 12082, 11662, 11265,
        10893, 10549, 10234, 9950, 9700, 9484, 9303, 9159, 9051, 8980, 8946,
        8948, 8986, 9059, 9167, 9307, 9479, 9681, 9912, 10168, 10449, 10753,
        11077, 11418, 11775, 12146, 12527, 12917, 13313 };
    const uint16_t moog6release[65] = { 19223, 19117, 19020, 18934, 18858, 18793,
        18739, 18696, 18664, 18644, 18634, 18636, 18648, 18671, 18703, 18745,
        18795, 18854, 18920, 18992, 19070, 19152, 19238, 19326, 19416, 19505,
        19594, 19680, 19762, 19840, 19911, 19974, 20028, 20072, 20105, 20125,
        20132, 20123, 20099, 20057, 19999, 19921, 19825, 19709, 19574, 19418,
        19241, 19045, 18828, 18591, 18335, 18060, 17768, 17457, 17131, 16790,
        16435, 16068, 15691, 15305, 14912, 14514, 14114, 13712, 13313 };
    const uint16_t moog7attack[65] = { 20353, 20310, 20270, 20231, 20193, 20151,
        20103, 20048, 19982, 19903, 19810, 19700, 19572, 19425, 19258, 19072,
        18865, 18639, 18393, 18129, 17848, 17549, 17236, 16910, 16571, 16223,
        15866, 15503, 15135, 14765, 14395, 14026, 13661, 13301, 12949, 12606,
        12273, 11954, 11648, 11358, 11085, 10830, 10595, 10380, 10186, 10014,
        9866, 9740, 9638, 9560, 9506, 9477, 9472, 9490, 9532, 9598, 9686, 9797,
        9929, 10081, 10254, 10446, 10655, 10881, 11123 };
    const uint16_t moog7release[65] = { 20321, 20362, 20407, 20455, 20505, 20557,
        20609, 20662, 20715, 20766, 20816, 20864, 20908, 20949, 20985, 21015,
        21040, 21058, 21069, 21072, 21066, 21050, 21025, 20990, 20943, 20885,
        20816, 20734, 20639, 20532, 20412, 20278, 20131, 19971, 19797, 19610,
        19410, 19197, 18972, 18734, 18484, 18223, 17951, 17669, 17378, 17078,
        16770, 16456, 16135, 15809, 15480, 15147, 14813, 14478, 14144, 13812,
        13484, 13159, 12841, 12529, 12226, 11933, 11651, 11380, 11123 };
    const uint16_t moog8attack[65] = { 22736, 22717, 22692, 22659, 22617, 22566,
        22504, 22430, 22343, 22241, 22122, 21988, 21835, 21665, 21476, 21268,
        21042, 20797, 20534, 20253, 19955, 19640, 19311, 18967, 18609, 18240,
        17861, 17472, 17075, 16672, 16265, 15855, 15443, 15031, 14620, 14213,
        13811, 13415, 13027, 12647, 12278, 11921, 11577, 11248, 10933, 10635,
        10355, 10093, 9849, 9626, 9423, 9241, 9080, 8942, 8825, 8731, 8660,
        8611, 8585, 8581, 8599, 8640, 8702, 8786, 8890 };
    const uint16_t moog8release[65] = { 22767, 22790, 22806, 22815, 22815, 22807,
        22790, 22763, 22726, 22679, 22621, 22552, 22471, 22379, 22275, 22158,
        22030, 21889, 21736, 21570, 21392, 21201, 20998, 20783, 20555, 20316,
        20066, 19804, 19532, 19250, 18957, 18656, 18346, 18027, 17701, 17369,
        17030, 16687, 16339, 15987, 15633, 15277, 14920, 14563, 14208, 13855,
        13504, 13158, 12817, 12483, 12156, 11837, 11527, 11228, 10940, 10665,
        10402, 10155, 9922, 9705, 9505, 9323, 9160, 9015, 8890 };
    const uint16_t moog9attack[65] = { 23211, 23356, 23491, 23614, 23725, 23824,
        23909, 23979, 24033, 24070, 24088, 24088, 24069, 24029, 23968, 23885,
        23782, 23656, 23509, 23341, 23151, 22940, 22709, 22458, 22187, 21898,
        21592, 21269, 20930, 20577, 20210, 19831, 19441, 19041, 18632, 18217,
        17795, 17369, 16940, 16508, 16077, 15646, 15217, 14791, 14371, 13955,
        13547, 13148, 12757, 12377, 12008, 11652, 11309, 10981, 10667, 10370,
        10089, 9825, 9579, 9352, 9143, 8954, 8784, 8635, 8505 };
    const uint16_t moog9release[65] = { 23600, 23429, 23246, 23052, 22846, 22629,
        22401, 22163, 21913, 21654, 21384, 21104, 20815, 20517, 20211, 19896,
        19573, 19243, 18906, 18563, 18215, 17861, 17503, 17142, 16778, 16411,
        16043, 15674, 15305, 14937, 14571, 14207, 13846, 13489, 13137, 12791,
        12451, 12119, 11794, 11479, 11174, 10879, 10595, 10324, 10066, 9821,
        9591, 9375, 9176, 8993, 8826, 8677, 8546, 8434, 8340, 8266, 8211, 8176,
        8162, 8167, 8194, 8241, 8308, 8397, 8505 };
    
    const uint16_t moog9attack2[65] = { 13722, 12707, 10958, 12036, 12302, 11953,
        12138, 12307, 12301, 12374, 12473, 12535, 12604, 12682, 12754, 12825,
        12899, 12972, 13044, 13117, 13190, 13262, 13335, 13408, 13481, 13553,
        13626, 13699, 13772, 13844, 13917, 13990, 14063, 14136, 14208, 14281,
        14354, 14427, 14499, 14572, 14645, 14718, 14790, 14863, 14936, 15009,
        15081, 15154, 15227, 15300, 15373, 15445, 15518, 15591, 15664, 15736,
        15809, 15882, 15955, 16027, 16100, 16173, 16246, 16318, 16391 };
    const uint16_t moog9release2[65] = { 13674, 20975, 20903, 20830, 20757, 20684,
        20612, 20539, 20466, 20393, 20320, 20248, 20175, 20102, 20029, 19957,
        19884, 19811, 19738, 19666, 19593, 19520, 19447, 19375, 19302, 19229,
        19156, 19083, 19011, 18938, 18865, 18792, 18720, 18647, 18574, 18501,
        18429, 18356, 18283, 18210, 18138, 18065, 17992, 17919, 17847, 17774,
        17701, 17628, 17555, 17483, 17410, 17337, 17264, 17192, 17119, 17046,
        16973, 16901, 16828, 16755, 16682, 16610, 16537, 16464, 16391 };
    const uint16_t moog8attack2[65] = { 17119, 8161, 14448, 10228, 13085, 11480,
        12468, 12119, 12317, 12425, 12389, 12592, 12542, 12717, 12711, 12841,
        12875, 12972, 13030, 13111, 13180, 13254, 13327, 13399, 13473, 13544,
        13618, 13690, 13763, 13836, 13909, 13981, 14054, 14127, 14200, 14273,
        14345, 14418, 14491, 14564, 14636, 14709, 14782, 14855, 14927, 15000,
        15073, 15146, 15218, 15291, 15364, 15437, 15510, 15582, 15655, 15728,
        15801, 15873, 15946, 16019, 16092, 16164, 16237, 16310, 16383 };
    const uint16_t moog8release2[65] = { 17071, 20967, 20894, 20821, 20749, 20676,
        20603, 20530, 20457, 20385, 20312, 20239, 20166, 20094, 20021, 19948,
        19875, 19803, 19730, 19657, 19584, 19512, 19439, 19366, 19293, 19221,
        19148, 19075, 19002, 18929, 18857, 18784, 18711, 18638, 18566, 18493,
        18420, 18347, 18275, 18202, 18129, 18056, 17984, 17911, 17838, 17765,
        17692, 17620, 17547, 17474, 17401, 17329, 17256, 17183, 17110, 17038,
        16965, 16892, 16819, 16747, 16674, 16601, 16528, 16455, 16383 };
    const uint16_t moog7attack2[65] = { 19553, 9783, 8656, 14934, 12325, 10044,
        13074, 12968, 11312, 12450, 13003, 12152, 12438, 12964, 12655, 12659,
        13006, 12969, 12933, 13133, 13203, 13199, 13316, 13412, 13444, 13525,
        13618, 13675, 13744, 13829, 13897, 13965, 14043, 14116, 14185, 14260,
        14334, 14405, 14478, 14551, 14623, 14696, 14769, 14842, 14914, 14987,
        15060, 15133, 15206, 15279, 15351, 15424, 15497, 15570, 15642, 15715,
        15788, 15861, 15933, 16006, 16079, 16152, 16224, 16297, 16370 };
    const uint16_t moog7release2[65] = { 19505, 20954, 20881, 20809, 20736, 20663,
        20590, 20517, 20445, 20372, 20299, 20226, 20154, 20081, 20008, 19935,
        19863, 19790, 19717, 19644, 19572, 19499, 19426, 19353, 19280, 19208,
        19135, 19062, 18989, 18917, 18844, 18771, 18698, 18626, 18553, 18480,
        18407, 18335, 18262, 18189, 18116, 18044, 17971, 17898, 17825, 17752,
        17680, 17607, 17534, 17461, 17389, 17316, 17243, 17170, 17098, 17025,
        16952, 16879, 16807, 16734, 16661, 16588, 16515, 16443, 16370 };
    const uint16_t moog6attack2[65] = { 20585, 15420, 8051, 7469, 12607, 15579,
        13361, 10237, 10443, 12900, 14015, 12856, 11584, 11908, 13076, 13490,
        12931, 12454, 12723, 13288, 13454, 13214, 13070, 13266, 13555, 13642,
        13564, 13555, 13698, 13863, 13930, 13932, 13976, 14086, 14197, 14262,
        14302, 14366, 14457, 14546, 14612, 14671, 14741, 14823, 14902, 14971,
        15038, 15110, 15187, 15262, 15333, 15403, 15476, 15551, 15625, 15696,
        15768, 15841, 15915, 15988, 16060, 16132, 16205, 16278, 16351 };
    const uint16_t moog6release2[65] = { 20537, 20935, 20862, 20789, 20717, 20644,
        20571, 20498, 20426, 20353, 20280, 20207, 20135, 20062, 19989, 19916,
        19843, 19771, 19698, 19625, 19552, 19480, 19407, 19334, 19261, 19189,
        19116, 19043, 18970, 18898, 18825, 18752, 18679, 18606, 18534, 18461,
        18388, 18315, 18243, 18170, 18097, 18024, 17952, 17879, 17806, 17733,
        17661, 17588, 17515, 17442, 17370, 17297, 17224, 17151, 17078, 17006,
        16933, 16860, 16787, 16715, 16642, 16569, 16496, 16424, 16351 };
    const uint16_t moog5attack2[65] = { 20901, 19021, 14108, 8861, 6550, 8110,
        11858, 15053, 15828, 14206, 11719, 10150, 10361, 11920, 13630, 14427,
        14029, 12964, 12079, 11944, 12547, 13409, 13984, 14008, 13619, 13188,
        13041, 13263, 13687, 14054, 14188, 14095, 13924, 13844, 13934, 14150,
        14378, 14517, 14543, 14506, 14489, 14544, 14668, 14816, 14936, 15003,
        15031, 15056, 15109, 15196, 15303, 15403, 15481, 15538, 15587, 15646,
        15721, 15807, 15895, 15973, 16042, 16104, 16168, 16239, 16317 };
    const uint16_t moog5release2[65] = { 20853, 20906, 20833, 20761, 20688, 20615,
        20542, 20470, 20397, 20324, 20251, 20179, 20106, 20033, 19960, 19887,
        19815, 19742, 19669, 19596, 19524, 19451, 19378, 19305, 19233, 19160,
        19087, 19014, 18941, 18869, 18796, 18723, 18651, 18578, 18505, 18432,
        18359, 18286, 18214, 18142, 18069, 17996, 17922, 17849, 17777, 17705,
        17633, 17560, 17487, 17413, 17339, 17266, 17194, 17124, 17053, 16980,
        16904, 16828, 16754, 16683, 16615, 16546, 16474, 16397, 16317 };
    const uint16_t moog4attack2[65] = { 20953, 20437, 18473, 15119, 11316, 8217,
        6671, 6960, 8775, 11391, 13935, 15674, 16213, 15571, 14120, 12427,
        11054, 10395, 10575, 11450, 12686, 13885, 14714, 14993, 14734, 14108,
        13374, 12790, 12532, 12658, 13100, 13705, 14291, 14707, 14871, 14790,
        14542, 14247, 14020, 13944, 14043, 14286, 14602, 14909, 15137, 15250,
        15252, 15177, 15082, 15019, 15024, 15110, 15261, 15445, 15625, 15768,
        15858, 15898, 15903, 15899, 15910, 15953, 16032, 16140, 16264 };
    const uint16_t moog4release2[65] = { 20904, 20862, 20790, 20717, 20645, 20573,
        20501, 20428, 20354, 20281, 20207, 20133, 20061, 19988, 19917, 19845,
        19774, 19702, 19629, 19555, 19480, 19405, 19331, 19258, 19186, 19116,
        19046, 18977, 18905, 18832, 18756, 18679, 18601, 18525, 18452, 18382,
        18315, 18249, 18183, 18113, 18039, 17960, 17877, 17793, 17713, 17639,
        17572, 17512, 17456, 17397, 17331, 17255, 17168, 17073, 16977, 16887,
        16812, 16753, 16708, 16670, 16628, 16571, 16490, 16386, 16264 };
    const uint16_t moog3attack2[65] = { 20908, 20833, 20267, 18982, 17007, 14574,
        12023, 9711, 7942, 6922, 6736, 7344, 8600, 10282, 12126, 13873, 15297,
        16241, 16626, 16461, 15828, 14867, 13752, 12662, 11757, 11156, 10924,
        11071, 11552, 12281, 13142, 14015, 14788, 15371, 15712, 15795, 15642,
        15306, 14859, 14386, 13963, 13655, 13505, 13529, 13719, 14042, 14453,
        14896, 15316, 15668, 15919, 16053, 16073, 15995, 15850, 15675, 15506,
        15376, 15311, 15323, 15414, 15574, 15784, 16022, 16262 };
    const uint16_t moog3release2[65] = { 20852, 20780, 20704, 20630, 20559, 20493,
        20428, 20366, 20304, 20241, 20175, 20105, 20030, 19950, 19865, 19777,
        19688, 19601, 19517, 19438, 19367, 19304, 19247, 19196, 19147, 19097,
        19042, 18980, 18907, 18824, 18729, 18627, 18519, 18412, 18310, 18218,
        18141, 18081, 18036, 18005, 17983, 17962, 17935, 17894, 17833, 17749,
        17639, 17509, 17364, 17214, 17070, 16944, 16846, 16782, 16755, 16761,
        16791, 16832, 16868, 16882, 16857, 16784, 16657, 16480, 16262 };
    const uint16_t moog2attack2[65] = { 20947, 20955, 20820, 20435, 19732, 18698,
        17369, 15817, 14141, 12447, 10843, 9427, 8282, 7467, 7017, 6945, 7235,
        7853, 8743, 9837, 11059, 12328, 13564, 14698, 15667, 16426, 16944,
        17208, 17221, 17002, 16584, 16011, 15332, 14602, 13874, 13199, 12622,
        12176, 11887, 11768, 11821, 12036, 12395, 12870, 13429, 14036, 14655,
        15249, 15789, 16246, 16603, 16848, 16976, 16991, 16904, 16731, 16493,
        16213, 15917, 15629, 15370, 15161, 15016, 14944, 14951 };
    const uint16_t moog2release2[65] = { 20920, 20863, 20794, 20714, 20623, 20521,
        20410, 20292, 20168, 20044, 19920, 19802, 19693, 19595, 19512, 19443,
        19392, 19356, 19335, 19327, 19326, 19330, 19334, 19331, 19318, 19289,
        19240, 19169, 19074, 18954, 18812, 18651, 18475, 18290, 18104, 17923,
        17755, 17609, 17489, 17402, 17349, 17332, 17350, 17399, 17472, 17562,
        17657, 17749, 17824, 17873, 17885, 17852, 17769, 17632, 17443, 17206,
        16930, 16624, 16304, 15984, 15681, 15412, 15193, 15036, 14951 };
    const uint16_t moog1attack2[65] = { 20345, 20343, 20322, 20245, 20079, 19798,
        19386, 18837, 18157, 17358, 16460, 15489, 14471, 13438, 12418, 11443,
        10538, 9729, 9037, 8478, 8065, 7806, 7704, 7757, 7960, 8302, 8771, 9350,
        10020, 10760, 11548, 12362, 13180, 13980, 14742, 15449, 16085, 16636,
        17092, 17447, 17696, 17839, 17879, 17820, 17670, 17440, 17141, 16787,
        16392, 15971, 15540, 15113, 14704, 14326, 13991, 13708, 13486, 13331,
        13245, 13232, 13289, 13415, 13606, 13855, 14155 };
    const uint16_t moog1release2[65] = { 20381, 20395, 20418, 20447, 20479, 20511,
        20540, 20564, 20578, 20581, 20569, 20539, 20490, 20421, 20330, 20216,
        20081, 19924, 19748, 19555, 19348, 19130, 18904, 18676, 18449, 18228,
        18018, 17824, 17649, 17498, 17374, 17280, 17217, 17186, 17189, 17223,
        17287, 17379, 17495, 17629, 17778, 17934, 18091, 18243, 18382, 18503,
        18597, 18660, 18685, 18669, 18607, 18498, 18341, 18135, 17883, 17588,
        17255, 16890, 16500, 16094, 15681, 15270, 14872, 14497, 14155 };
    
    const uint16_t two_step[65] = { 0, 164, 645, 1415, 2427, 3621, 4926, 6263, 7551,
        8715, 9683, 10398, 10818, 10923, 10923, 10923, 10923, 10923, 10923,
        10923, 10923, 10923, 10923, 10923, 10923, 10923, 10949, 11242, 11843,
        12716, 13809, 15057, 16384, 17711, 18958, 20051, 20925, 21526, 21819,
        21845, 21845, 21845, 21845, 21845, 21845, 21845, 21845, 21845, 21845,
        21845, 21845, 21845, 21950, 22369, 23085, 24053, 25217, 26505, 27842,
        29146, 30341, 31353, 32123, 32604, 32767 };
    const uint16_t two_step_plateau[65] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        10, 353, 1165, 2399, 3980, 5814, 7790, 9790, 11695, 13389, 14772, 15760,
        16295, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
        16384, 16384, 16384, 16384, 16473, 17008, 17996, 19379, 21073, 22978,
        24978, 26954, 28788, 30369, 31603, 32415, 32758, 32767, 32767, 32767,
        32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t three_step[65] = { 0, 239, 930, 1990, 3297, 4697, 6027, 7131,
        7880, 8187, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8315,
        8882, 9848, 11099, 12489, 13855, 15039, 15900, 16340, 16384, 16384,
        16384, 16384, 16384, 16384, 16384, 16384, 16384, 16428, 16868, 17729,
        18913, 20279, 21669, 22920, 23886, 24453, 24576, 24576, 24576, 24576,
        24576, 24576, 24576, 24576, 24576, 24581, 24888, 25637, 26741, 28071,
        29471, 30778, 31838, 32529, 32767 };
    const uint16_t three_step_plateau[65] = { 0, 0, 0, 0, 0, 0, 0, 0, 312, 1345,
        2907, 4697, 6372, 7609, 8172, 8192, 8192, 8192, 8192, 8192, 8192, 8192,
        8368, 9253, 10721, 12489, 14219, 15578, 16305, 16384, 16384, 16384,
        16384, 16384, 16384, 16384, 16463, 17190, 18549, 20279, 22047, 23515,
        24400, 24576, 24576, 24576, 24576, 24576, 24576, 24576, 24596, 25159,
        26396, 28071, 29861, 31423, 32456, 32767, 32767, 32767, 32767, 32767,
        32767, 32767, 32767 };
    const uint16_t four_step[65] = { 0, 315, 1198, 2481, 3916, 5229, 6167, 6550,
        6554, 6554, 6554, 6554, 6554, 6554, 6554, 6745, 7513, 8726, 10152,
        11515, 12555, 13072, 13107, 13107, 13107, 13107, 13107, 13107, 13107,
        13205, 13851, 14983, 16384, 17785, 18917, 19563, 19661, 19661, 19661,
        19661, 19661, 19661, 19661, 19696, 20213, 21253, 22616, 24042, 25255,
        26023, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26218, 26601,
        27539, 28852, 30287, 31570, 32453, 32767 };
    const uint16_t four_step_plateau[65] = { 0, 0, 0, 0, 0, 0, 16, 645, 2023, 3758,
        5356, 6362, 6554, 6554, 6554, 6554, 6554, 6554, 6695, 7630, 9191, 10934,
        12363, 13072, 13107, 13107, 13107, 13107, 13107, 13107, 13494, 14699,
        16384, 18069, 19274, 19661, 19661, 19661, 19661, 19661, 19661, 19696,
        20405, 21834, 23577, 25138, 26073, 26214, 26214, 26214, 26214, 26214,
        26214, 26406, 27412, 29010, 30745, 32123, 32752, 32767, 32767, 32767,
        32767, 32767, 32767 };
    const uint16_t five_step[65] = { 0, 388, 1443, 2865, 4248, 5199, 5461, 5461,
        5461, 5461, 5461, 5461, 5514, 6169, 7399, 8855, 10123, 10841, 10923,
        10923, 10923, 10923, 10923, 10923, 11131, 12027, 13386, 14821, 15924,
        16381, 16384, 16384, 16384, 16384, 16384, 16387, 16844, 17947, 19382,
        20741, 21637, 21845, 21845, 21845, 21845, 21845, 21845, 21927, 22644,
        23908, 25362, 26590, 27243, 27296, 27296, 27296, 27296, 27296, 27296,
        27558, 28512, 29898, 31322, 32379, 32767 };
    const uint16_t five_step_plateau[65] = { 0, 0, 0, 0, 0, 3, 620, 2067, 3776,
        5073, 5461, 5461, 5461, 5461, 5461, 5491, 6261, 7791, 9479, 10660,
        10923, 10923, 10923, 10923, 10923, 11005, 11921, 13519, 15170, 16224,
        16384, 16384, 16384, 16384, 16384, 16544, 17598, 19249, 20847, 21763,
        21845, 21845, 21845, 21845, 21845, 22107, 23286, 24970, 26498, 27266,
        27296, 27299, 27302, 27305, 27307, 27695, 28992, 30701, 32148, 32765,
        32767, 32767, 32767, 32767, 32767 };
    
    const uint16_t fivept_sawbend_pre[5] = { 0, 10813, 16384, 21627, 32767 };
    const uint16_t fivept_sawbend_second[5] = { 0, 24576, 16384, 8192, 32767 };
    const uint16_t fivept_sawbend_third[5] = { 0, 21627, 16384, 10813, 32767 };
    const uint16_t fivept_sawbend_fourth[5] = { 0, 26214, 16384, 6554, 32767 };
    const uint16_t fivept_sawbend_fifth[5] = { 0, 32767, 16384, 0, 32767 };
    
    const uint16_t excitebike1[9] = { 0, 16384, 16384, 32767, 16384, 16384, 0,
        16384, 32767 };
    const uint16_t excitebike2[9] = { 0, 0, 16384, 32767, 16384, 0, 16384, 32767,
        32767 };
    const uint16_t excitebike3[9] = { 0, 32767, 16384, 0, 16384, 32767, 16384, 0,
        32767 };
    const uint16_t excitebike4[9] = { 0, 10912, 21843, 32767, 21845, 10923, 0,
        16384, 32767 };
    const uint16_t excitebike5[9] = { 0, 21843, 21843, 32767, 10922, 10923, 0,
        21823, 32767 };
    const uint16_t excitebike6[9] = { 0, 16384, 16384, 10813, 10813, 24576, 24576,
        21823, 32767 };
    const uint16_t excitebike7[9] = { 0, 26214, 6554, 24576, 8192, 21627, 10813,
        21955, 32767 };
    const uint16_t excitebike8[9] = { 0, 18350, 13107, 21299, 29491, 13435, 25559,
        20316, 32767 };
    const uint16_t excitebike9[9] = { 0, 13107, 13107, 19661, 26214, 13107, 13107,
        22938, 32767 };
    
    // conforming, with otherwise random distribution of values
    
    const uint16_t rand32[9] = { 0, 1493, 9928, 295, 24535, 10417, 28796, 10518,
        32767 };
    const uint16_t rand31[9] = { 0, 22857, 16065, 14102, 16997, 22115, 5129, 31427,
        32767 };
    const uint16_t rand30[9] = { 0, 7731, 12805, 17639, 29403, 27034, 16561, 8420,
        32767 };
    const uint16_t rand29[9] = { 0, 29691, 14159, 22083, 11535, 12766, 18763, 16833,
        32767 };
    const uint16_t rand28[9] = { 0, 27627, 20652, 133, 10516, 22268, 8889, 3523,
        32767 };
    const uint16_t rand27[9] =
    { 0, 12239, 3116, 5575, 26, 9119, 25263, 14209, 32767 };
    const uint16_t rand26[9] = { 0, 15692, 19073, 30977, 8964, 3348, 18797, 25470,
        32767 };
    const uint16_t rand25[9] = { 0, 21090, 22064, 31653, 10852, 27094, 22948, 17322,
        32767 };
    const uint16_t rand24[9] = { 0, 27565, 31968, 2599, 18411, 2265, 22983, 23235,
        32767 };
    const uint16_t rand23[9] = { 0, 12642, 13518, 32505, 18229, 4969, 14453, 30121,
        32767 };
    const uint16_t rand22[9] = { 0, 17637, 6487, 32496, 22873, 15642, 21667, 16807,
        32767 };
    const uint16_t rand21[9] = { 0, 2131, 31784, 14508, 29894, 28373, 9826, 7715,
        32767 };
    const uint16_t rand20[9] = { 0, 11846, 19607, 1159, 15756, 8109, 6877, 2689,
        32767 };
    const uint16_t rand19[9] = { 0, 18725, 11414, 17908, 12882, 19396, 3229, 28304,
        32767 };
    const uint16_t rand18[9] = { 0, 27481, 15895, 24679, 20925, 28474, 22059, 12831,
        32767 };
    const uint16_t rand17[9] = { 0, 21221, 19357, 9554, 13411, 24713, 31287, 1820,
        32767 };
    const uint16_t rand16[9] = { 0, 15605, 26494, 31126, 17348, 13258, 32484, 27582,
        32767 };
    const uint16_t rand15[9] = { 0, 7176, 16461, 19822, 29926, 16865, 15778, 22007,
        32767 };
    const uint16_t rand14[9] = { 0, 30349, 29059, 30605, 13528, 12642, 6929, 23989,
        32767 };
    const uint16_t rand13[9] = { 0, 13137, 29823, 28006, 26707, 9234, 18833, 8357,
        32767 };
    const uint16_t rand12[9] = { 0, 31370, 16253, 2414, 23284, 17215, 14270, 27559,
        32767 };
    const uint16_t rand11[9] = { 0, 29804, 18615, 9750, 22615, 14391, 21557, 2970,
        32767 };
    const uint16_t rand10[9] = { 0, 12654, 1268, 12860, 13043, 24974, 9055, 20666,
        32767 };
    const uint16_t rand9[9] = { 0, 24079, 30391, 3283, 6162, 28788, 15976, 2238,
        32767 };
    const uint16_t rand8[9] = { 0, 23974, 11982, 7385, 1682, 15239, 14296, 15544,
        32767 };
    const uint16_t rand7[9] = { 0, 22634, 9076, 15554, 18962, 27668, 32334, 14728,
        32767 };
    const uint16_t rand6[9] = { 0, 30352, 19172, 18175, 11822, 11115, 102, 19468,
        32767 };
    const uint16_t rand5[9] = { 0, 5944, 18625, 15316, 22884, 11756, 18715, 11303,
        32767 };
    const uint16_t rand4[9] = { 0, 27091, 26434, 29608, 9363, 16315, 12260, 20538,
        32767 };
    const uint16_t rand3[9] = { 0, 27215, 27741, 21409, 16903, 6534, 28248, 19447,
        32767 };
    const uint16_t rand2[9] = { 0, 22192, 8852, 11568, 19026, 4554, 1833, 20813,
        32767 };
    const uint16_t rand1[9] = { 0, 11151, 22417, 27851, 28455, 30586, 16587, 25338,
        32767 };
    const uint16_t rand0[9] = { 0, 4386, 399, 27875, 31776, 29667, 2523, 19933,
        32767 };
    
    //conforming, with gaussian distribution centered at .5, standard deviation progresses from 0 to .9
    
    const uint16_t gauss32[9] = { 0, 4856, 15794, 16207, 19423, 22985, 11060, 20072,
        32767 };
    const uint16_t gauss31[9] = { 0, 12792, 13218, 8247, 32767, 21286, 18827, 529,
        32767 };
    const uint16_t gauss30[9] = { 0, 24240, 11829, 21355, 2575, 0, 22100, 26298,
        32767 };
    const uint16_t gauss29[9] = { 0, 15295, 32767, 24868, 4794, 0, 0, 4853, 32767 };
    const uint16_t gauss28[9] = { 0, 27480, 24389, 23811, 14757, 13005, 26726,
        19225, 32767 };
    const uint16_t gauss27[9] = { 0, 13869, 13666, 19341, 17123, 21086, 18300, 6241,
        32767 };
    const uint16_t gauss26[9] = { 0, 19043, 32037, 21181, 13314, 10755, 25954,
        32767, 32767 };
    const uint16_t gauss25[9] = { 0, 32767, 5711, 29557, 8809, 7314, 17688, 18814,
        32767 };
    const uint16_t gauss24[9] = { 0, 15578, 12830, 1704, 20451, 22529, 7638, 5921,
        32767 };
    const uint16_t gauss23[9] = { 0, 18392, 20164, 16760, 17322, 22983, 19332,
        12337, 32767 };
    const uint16_t gauss22[9] = { 0, 20476, 2129, 32767, 18481, 9845, 9471, 16375,
        32767 };
    const uint16_t gauss21[9] = { 0, 11687, 19124, 17372, 27525, 22739, 20930,
        19144, 32767 };
    const uint16_t gauss20[9] = { 0, 21545, 13979, 16198, 6131, 19222, 14924, 15006,
        32767 };
    const uint16_t gauss19[9] = { 0, 26164, 7624, 9339, 3736, 20255, 15595, 21039,
        32767 };
    const uint16_t gauss18[9] = { 0, 4025, 13676, 14964, 17662, 16336, 16103, 8503,
        32767 };
    const uint16_t gauss17[9] = { 0, 15004, 13470, 16340, 12224, 13959, 6820, 6096,
        32767 };
    const uint16_t gauss16[9] = { 0, 25064, 14415, 20612, 7860, 23828, 9985, 19495,
        32767 };
    const uint16_t gauss15[9] = { 0, 10471, 16464, 23158, 11004, 20674, 19647,
        22649, 32767 };
    const uint16_t gauss14[9] = { 0, 10037, 16674, 12813, 18113, 17778, 20068,
        25539, 32767 };
    const uint16_t gauss13[9] = { 0, 18548, 19303, 12456, 17769, 31230, 16992,
        16352, 32767 };
    const uint16_t gauss12[9] = { 0, 14993, 16041, 15208, 13927, 14193, 13076,
        21015, 32767 };
    const uint16_t gauss11[9] = { 0, 14135, 20818, 9378, 18054, 13493, 14678, 14523,
        32767 };
    const uint16_t gauss10[9] = { 0, 16600, 18421, 24556, 17565, 16128, 17304,
        17672, 32767 };
    const uint16_t gauss9[9] = { 0, 15601, 15118, 19037, 15786, 9460, 10665, 12924,
        32767 };
    const uint16_t gauss8[9] = { 0, 19369, 18736, 17385, 19601, 21455, 14800, 16035,
        32767 };
    const uint16_t gauss7[9] = { 0, 17539, 16093, 18766, 14618, 13106, 17230, 17357,
        32767 };
    const uint16_t gauss6[9] = { 0, 14287, 13939, 18432, 15103, 18885, 16847, 18033,
        32767 };
    const uint16_t gauss5[9] = { 0, 19586, 13272, 18702, 16248, 17154, 16310, 17152,
        32767 };
    const uint16_t gauss4[9] = { 0, 19099, 16054, 16615, 17602, 15597, 14517, 14848,
        32767 };
    const uint16_t gauss3[9] = { 0, 14859, 16976, 16495, 16771, 15640, 15143, 16088,
        32767 };
    const uint16_t gauss2[9] = { 0, 17004, 15967, 16692, 16860, 15801, 14812, 16711,
        32767 };
    const uint16_t gauss1[9] = { 0, 16572, 16335, 16661, 16630, 16928, 16534, 16410,
        32767 };
    const uint16_t gauss0[9] = { 0, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
        32767 };
    
    //nonconforming
    
    const uint16_t gauss_noconform32[9] = { 26114, 21653, 28960, 29236, 31384,
        32767, 25798, 31817, 21428 };
    const uint16_t gauss_noconform31[9] = { 32767, 26955, 27239, 23918, 32767,
        32629, 30986, 18763, 28836 };
    const uint16_t gauss_noconform30[9] = { 23172, 32767, 26311, 32675, 20129,
        16777, 32767, 32767, 22130 };
    const uint16_t gauss_noconform29[9] = { 25087, 28627, 32767, 32767, 21612,
        18378, 17547, 21651, 32767 };
    const uint16_t gauss_noconform28[9] = { 32767, 32767, 32767, 32767, 28267,
        27097, 32767, 31252, 31720 };
    const uint16_t gauss_noconform27[9] = { 32699, 27674, 27538, 31330, 29848,
        32495, 30634, 22578, 32767 };
    const uint16_t gauss_noconform26[9] = { 32767, 31131, 32767, 32558, 27303,
        25594, 32767, 32767, 32767 };
    const uint16_t gauss_noconform25[9] = { 32767, 32767, 22224, 32767, 24294,
        23295, 30225, 30977, 27215 };
    const uint16_t gauss_noconform24[9] = { 32767, 28816, 26980, 19548, 32071,
        32767, 23511, 22365, 32767 };
    const uint16_t gauss_noconform23[9] = { 31683, 30695, 31879, 29605, 29981,
        32767, 31323, 26651, 30241 };
    const uint16_t gauss_noconform22[9] = { 30985, 32087, 19831, 32767, 30755,
        24986, 24736, 29348, 19912 };
    const uint16_t gauss_noconform21[9] = { 32767, 26216, 31185, 30014, 32767,
        32767, 32391, 31198, 32767 };
    const uint16_t gauss_noconform20[9] = { 32767, 32767, 27748, 29230, 22505,
        31250, 28379, 28433, 31947 };
    const uint16_t gauss_noconform19[9] = { 32767, 32767, 23502, 24648, 20905,
        31940, 28827, 32463, 32591 };
    const uint16_t gauss_noconform18[9] = { 31041, 21098, 27545, 28405, 30208,
        29322, 29166, 24089, 25474 };
    const uint16_t gauss_noconform17[9] = { 29610, 28433, 27407, 29325, 26575,
        27734, 22965, 22482, 25683 };
    const uint16_t gauss_noconform16[9] = { 29712, 32767, 28039, 32178, 23660,
        32767, 25080, 31433, 25247 };
    const uint16_t gauss_noconform15[9] = { 29423, 25404, 29407, 32767, 25760,
        32220, 31534, 32767, 31340 };
    const uint16_t gauss_noconform14[9] = { 21675, 25114, 29548, 26968, 30509,
        30285, 31815, 32767, 29832 };
    const uint16_t gauss_noconform13[9] = { 27025, 30800, 31304, 26730, 30279,
        32767, 29760, 29333, 26015 };
    const uint16_t gauss_noconform12[9] = { 28410, 28425, 29125, 28569, 27713,
        27890, 27144, 32448, 30524 };
    const uint16_t gauss_noconform11[9] = { 27757, 27852, 32316, 24674, 30470,
        27423, 28214, 28111, 32750 };
    const uint16_t gauss_noconform10[9] = { 28389, 29498, 30715, 32767, 30143,
        29183, 29968, 30214, 31604 };
    const uint16_t gauss_noconform9[9] = { 26968, 28831, 28508, 31126, 28954, 24729,
        25534, 27043, 29917 };
    const uint16_t gauss_noconform8[9] = { 26159, 31348, 30925, 30023, 31503, 32742,
        28296, 29121, 31129 };
    const uint16_t gauss_noconform7[9] = { 27545, 30125, 29159, 30945, 28174, 27164,
        29919, 30004, 27974 };
    const uint16_t gauss_noconform6[9] = { 28755, 27953, 27721, 30722, 28498, 31025,
        29663, 30456, 28091 };
    const uint16_t gauss_noconform5[9] = { 30175, 31493, 27275, 30902, 29263, 29868,
        29304, 29867, 28376 };
    const uint16_t gauss_noconform4[9] = { 29032, 31168, 29134, 29509, 30168, 28828,
        28107, 28328, 29498 };
    const uint16_t gauss_noconform3[9] = { 28789, 28335, 29750, 29428, 29613, 28857,
        28525, 29157, 30679 };
    const uint16_t gauss_noconform2[9] = { 28956, 29768, 29075, 29560, 29672, 28965,
        28304, 29572, 28667 };
    const uint16_t gauss_noconform1[9] = { 29267, 29480, 29321, 29539, 29519, 29718,
        29454, 29371, 29335 };
    const uint16_t gauss_noconform0[9] = { 29354, 29354, 29354, 29354, 29354, 29354,
        29354, 29354, 29354 };
    
    //conforming, with gaussian distribution centered and reflected about 0, standard deviation progresses from 0 to 2
    
    const uint16_t gauss_low32[9] = { 0, 17909, 1103, 469, 4472, 9945, 8377, 5469,
        32767 };
    const uint16_t gauss_low31[9] = { 0, 5715, 5062, 12699, 32377, 7334, 3556,
        24557, 32767 };
    const uint16_t gauss_low30[9] = { 0, 11874, 7195, 7441, 21414, 29125, 8585,
        15036, 32767 };
    const uint16_t gauss_low29[9] = { 0, 1870, 32767, 12838, 18005, 25443, 27354,
        17914, 32767 };
    const uint16_t gauss_low28[9] = { 0, 16851, 12102, 11214, 2696, 5389, 15692,
        4168, 32767 };
    const uint16_t gauss_low27[9] = { 0, 4061, 4374, 4347, 939, 7027, 2747, 15781,
        32767 };
    const uint16_t gauss_low26[9] = { 0, 3889, 23853, 7173, 4914, 8846, 14507,
        25265, 32767 };
    const uint16_t gauss_low25[9] = { 0, 28177, 16595, 20042, 11835, 14132, 1806,
        3536, 32767 };
    const uint16_t gauss_low24[9] = { 0, 1435, 5657, 22751, 6051, 9244, 13635,
        16272, 32767 };
    const uint16_t gauss_low23[9] = { 0, 2888, 5611, 380, 1244, 9942, 4332, 6415,
        32767 };
    const uint16_t gauss_low22[9] = { 0, 6090, 22099, 27000, 3025, 10243, 10819,
        212, 32767 };
    const uint16_t gauss_low21[9] = { 0, 7414, 4013, 1322, 16920, 9567, 6787, 4044,
        32767 };
    const uint16_t gauss_low20[9] = { 0, 7733, 3892, 483, 15951, 4163, 2440, 2314,
        32767 };
    const uint16_t gauss_low19[9] = { 0, 14829, 13657, 11022, 19630, 5751, 1409,
        6955, 32767 };
    const uint16_t gauss_low18[9] = { 0, 19186, 4357, 2379, 1767, 271, 629, 12306,
        32767 };
    const uint16_t gauss_low17[9] = { 0, 2317, 4674, 264, 6589, 3923, 14892, 16003,
        32767 };
    const uint16_t gauss_low16[9] = { 0, 13139, 3222, 6298, 13293, 11240, 10028,
        4584, 32767 };
    const uint16_t gauss_low15[9] = { 0, 9282, 74, 10211, 8464, 6394, 4817, 9430,
        32767 };
    const uint16_t gauss_low14[9] = { 0, 9949, 248, 5684, 2460, 1944, 5464, 13869,
        32767 };
    const uint16_t gauss_low13[9] = { 0, 3128, 4288, 6232, 1931, 22613, 738, 246,
        32767 };
    const uint16_t gauss_low12[9] = { 0, 2334, 724, 2003, 3971, 3564, 5280, 6918,
        32767 };
    const uint16_t gauss_low11[9] = { 0, 3652, 6615, 10961, 2369, 4639, 2818, 3056,
        32767 };
    const uint16_t gauss_low10[9] = { 0, 135, 2932, 12359, 1617, 591, 1216, 1781,
        32767 };
    const uint16_t gauss_low9[9] = { 0, 1401, 2143, 3879, 1116, 10836, 8984, 5513,
        32767 };
    const uint16_t gauss_low8[9] = { 0, 4389, 3417, 1341, 4745, 7595, 2630, 734,
        32767 };
    const uint16_t gauss_low7[9] = { 0, 1577, 645, 3463, 2910, 5234, 1103, 1297,
        32767 };
    const uint16_t gauss_low6[9] = { 0, 3420, 3954, 2949, 2165, 3646, 515, 2337,
        32767 };
    const uint16_t gauss_low5[9] =
    { 0, 4723, 4979, 3364, 406, 986, 311, 982, 32767 };
    const uint16_t gauss_low4[9] = { 0, 3975, 704, 158, 1675, 1407, 3066, 2558,
        32767 };
    const uint16_t gauss_low3[9] = { 0, 2541, 713, 27, 398, 1340, 2104, 651, 32767 };
    const uint16_t gauss_low2[9] = { 0, 756, 838, 276, 534, 1093, 2612, 305, 32767 };
    const uint16_t gauss_low1[9] = { 0, 92, 272, 228, 182, 639, 33, 157, 32767 };
    const uint16_t gauss_low0[9] = { 0, 197, 197, 197, 197, 197, 197, 197, 32767 };
    
    //nonconforming
    
    const uint16_t gauss_low_noconform32[9] = { 8297, 19449, 1182, 493, 4878, 10827,
        9088, 5962, 20011 };
    const uint16_t gauss_low_noconform31[9] = { 24232, 6195, 5485, 13786, 32767,
        7989, 3883, 26675, 1492 };
    const uint16_t gauss_low_noconform30[9] = { 15652, 12923, 7804, 8105, 23259,
        31640, 9349, 16360, 18258 };
    const uint16_t gauss_low_noconform29[9] = { 10865, 2015, 32767, 13971, 19553,
        27638, 29715, 19454, 13944 };
    const uint16_t gauss_low_noconform28[9] = { 11879, 18334, 13171, 12207, 2914,
        5840, 17074, 4547, 5717 };
    const uint16_t gauss_low_noconform27[9] = { 8164, 4397, 4737, 4742, 1037, 7655,
        3003, 17136, 14472 };
    const uint16_t gauss_low_noconform26[9] = { 16232, 4244, 25944, 7814, 5325,
        9598, 15786, 27479, 25824 };
    const uint16_t gauss_low_noconform25[9] = { 16442, 30644, 18021, 21802, 12847,
        15344, 1980, 3861, 5546 };
    const uint16_t gauss_low_noconform24[9] = { 9035, 1543, 6132, 24713, 6594,
        10065, 14804, 17670, 25211 };
    const uint16_t gauss_low_noconform23[9] = { 5625, 3156, 6116, 430, 1369, 10823,
        4726, 6955, 2021 };
    const uint16_t gauss_low_noconform22[9] = { 3881, 6636, 24004, 29365, 3306,
        11117, 11743, 213, 23802 };
    const uint16_t gauss_low_noconform21[9] = { 11098, 8042, 4379, 1454, 18409,
        10416, 7394, 4413, 10919 };
    const uint16_t gauss_low_noconform20[9] = { 21935, 8422, 4213, 507, 17320, 4542,
        2635, 2499, 6286 };
    const uint16_t gauss_low_noconform19[9] = { 14896, 16136, 14827, 11963, 21320,
        6268, 1515, 7577, 7896 };
    const uint16_t gauss_low_noconform18[9] = { 4020, 20837, 4719, 2568, 1938, 277,
        667, 13359, 9897 };
    const uint16_t gauss_low_noconform17[9] = { 443, 2501, 5064, 270, 7145, 4247,
        16170, 17378, 9375 };
    const uint16_t gauss_low_noconform16[9] = { 699, 14298, 3485, 6863, 14432,
        12234, 10883, 4999, 10464 };
    const uint16_t gauss_low_noconform15[9] = { 26, 10072, 64, 11116, 9182, 6967,
        5253, 10267, 4767 };
    const uint16_t gauss_low_noconform14[9] = { 19394, 10798, 287, 6161, 2691, 2131,
        5956, 15092, 997 };
    const uint16_t gauss_low_noconform13[9] = { 6020, 3417, 4678, 6757, 2116, 24597,
        819, 250, 8544 };
    const uint16_t gauss_low_noconform12[9] = { 2556, 2519, 770, 2160, 4300, 3857,
        5722, 7537, 2728 };
    const uint16_t gauss_low_noconform11[9] = { 4191, 3953, 7208, 11897, 2592, 5025,
        3046, 3304, 8293 };
    const uint16_t gauss_low_noconform10[9] = { 2609, 163, 3204, 13451, 1775, 625,
        1339, 1953, 5428 };
    const uint16_t gauss_low_noconform9[9] = { 6162, 1505, 2312, 4233, 1196, 11761,
        9748, 5975, 1211 };
    const uint16_t gauss_low_noconform8[9] = { 8183, 4788, 3732, 1475, 5175, 8273,
        2842, 780, 4241 };
    const uint16_t gauss_low_noconform7[9] = { 4719, 1731, 684, 3782, 3146, 5672,
        1217, 1427, 3648 };
    const uint16_t gauss_low_noconform6[9] = { 1694, 3700, 4280, 3223, 2336, 3980,
        577, 2558, 3354 };
    const uint16_t gauss_low_noconform5[9] = { 1856, 5150, 5395, 3674, 424, 1088,
        321, 1085, 2643 };
    const uint16_t gauss_low_noconform4[9] = { 1002, 4337, 748, 189, 1837, 1512,
        3316, 2763, 163 };
    const uint16_t gauss_low_noconform3[9] = { 1609, 2745, 792, 12, 449, 1439, 2270,
        691, 3114 };
    const uint16_t gauss_low_noconform2[9] = { 1192, 839, 894, 317, 598, 1170, 2822,
        348, 1914 };
    const uint16_t gauss_low_noconform1[9] = { 415, 117, 279, 265, 214, 712, 53,
        153, 246 };
    const uint16_t gauss_low_noconform0[9] = { 197, 197, 197, 197, 197, 197, 197,
        197, 197 };
    
    const uint16_t algerian_q[65] = { 0, 2142, 2035, 1961, 3159, 2608, 2621, 3746,
        3604, 4296, 6119, 8789, 12825, 17204, 20774, 24266, 28197, 31204, 32523,
        32767, 31563, 28844, 25803, 22397, 17954, 13560, 10256, 7348, 11678,
        16083, 19668, 23236, 27438, 30497, 30930, 29418, 25592, 21227, 17645,
        14080, 9818, 6352, 5365, 6506, 8794, 9276, 8286, 10313, 10366, 30019,
        27360, 24118, 19738, 15286, 11803, 8570, 5577, 4799, 6438, 9335, 13533,
        17963, 21519, 24950, 28738 };
    //horizontal Algerian
    const uint16_t algerian_w[65] = { 0, 3981, 10044, 15298, 20526, 26592, 31764,
        31459, 29045, 23370, 18089, 13354, 16470, 22772, 25985, 20923, 14621,
        9710, 13518, 18774, 24969, 25124, 19873, 13599, 15753, 21001, 24663,
        20383, 15163, 10144, 12697, 18995, 24106, 26729, 26687, 23057, 17910,
        12667, 6375, 2167, 1604, 3319, 9262, 14513, 18313, 13388, 8126, 3175,
        543, 271, 0, 822, 5787, 12077, 15322, 10157, 4085, 1604, 1739, 5473,
        11723, 16965, 22200, 28262, 32767 };
    //horizontal Algerian
    const uint16_t algerian_e[65] = { 0, 8179, 19208, 14274, 15458, 20508, 29127,
        25220, 28282, 32767, 32767, 32767, 32767, 32767, 31391, 27276, 22251,
        18860, 16804, 16726, 15279, 14207, 9168, 3901, 2309, 2320, 2330, 2341,
        2352, 3219, 7866, 8117, 4977, 4132, 7072, 13119, 15779, 16240, 15285,
        10251, 5216, 6504, 12543, 17053, 17386, 14686, 17123, 22396, 20435,
        20203, 24363, 28356, 28737, 27364, 29332, 29445, 25318, 20464, 22543,
        28596, 30796, 30392, 27643, 27723, 32767 };
    //horizontal Algerian
    const uint16_t algerian_r[65] = { 0, 913, 2763, 5060, 8379, 12305, 23196, 31224,
        29921, 25983, 21734, 19459, 20047, 24806, 28967, 28828, 27911, 29721,
        28751, 24081, 19425, 21275, 26990, 29415, 25435, 20673, 17516, 15454,
        14782, 13934, 10376, 5963, 4040, 4040, 5250, 9341, 14092, 16916, 16467,
        14880, 10600, 6021, 3183, 2840, 2534, 2227, 2227, 4002, 7876, 12646,
        15287, 13137, 8589, 3961, 944, 3116, 5774, 9514, 13583, 17622, 20068,
        23677, 28175, 31328, 32767 };
    //horizontal Algerian
    const uint16_t algerian_t[65] = { 0, 1029, 1992, 2864, 3623, 4186, 5499, 7518,
        9853, 12207, 12792, 10800, 8518, 6496, 5462, 5081, 6061, 7045, 9116,
        11425, 13113, 13193, 13193, 13193, 13193, 13193, 13193, 13193, 13193,
        13193, 13193, 13193, 12582, 10747, 9812, 12192, 14573, 16953, 19333,
        21247, 20419, 18987, 18710, 18710, 18710, 18710, 18710, 18710, 18710,
        18710, 18710, 18710, 18710, 18710, 19175, 21202, 23544, 25744, 27226,
        28148, 29007, 29843, 30918, 32093, 32767 };
    //vertical Algerian
    const uint16_t algerian_u[65] = { 0, 677, 3774, 7756, 10742, 11958, 9303, 8766,
        8766, 8766, 8766, 8766, 8803, 8835, 9368, 11638, 15368, 19277, 21970,
        23569, 24338, 24526, 24562, 24578, 24594, 24616, 24638, 23531, 21331,
        22469, 26416, 30362, 32767, 30485, 29511, 29511, 29511, 29511, 29511,
        29476, 29233, 28781, 27665, 24924, 21300, 17369, 14416, 11501, 7897,
        8332, 12054, 14986, 17955, 21849, 25292, 27204, 28080, 28573, 28712,
        28712, 28712, 28712, 28712, 28712, 32767 };
    //vertical Algerian
    const uint16_t algerian_i[65] = { 0, 4857, 9519, 14182, 18844, 23507, 27058,
        24650, 20855, 19827, 19827, 19827, 19827, 19827, 19827, 19827, 19827,
        19827, 19827, 19827, 19827, 20042, 22939, 26516, 22994, 17166, 12503,
        7841, 3178, 1000, 3007, 6592, 7524, 7524, 7524, 7524, 7524, 7524, 7524,
        7524, 7524, 7524, 7524, 7524, 6969, 3814, 346, 28676, 25091, 24514,
        24514, 24514, 24514, 24514, 24514, 24514, 24514, 24514, 24514, 24514,
        24514, 25753, 28851, 31949, 32767 };
    //vertical Algerian
    const uint16_t algerian_o[65] = { 0, 484, 1648, 3572, 6252, 9517, 13197, 17028,
        20770, 24108, 27275, 29268, 30014, 30214, 29899, 29033, 27468, 25196,
        22173, 18570, 17989, 16666, 12154, 9742, 8495, 7927, 7769, 7960, 8625,
        10184, 12365, 10918, 9331, 8712, 8670, 9018, 9938, 11926, 15292, 18997,
        25097, 27836, 29847, 31342, 32014, 31953, 31344, 30039, 28034, 25349,
        22035, 18330, 14491, 10768, 8817, 12671, 16456, 20277, 23838, 26941,
        29396, 31156, 32246, 32739, 32767 };
    //vertical Algerian
    const uint16_t algerian_a[65] = { 0, 1518, 6196, 11094, 14889, 17058, 23564,
        20902, 16357, 13399, 16823, 21535, 25470, 19444, 14959, 16384, 21805,
        32767, 32767, 30941, 25296, 21802, 20926, 20569, 17076, 13188, 8366,
        3571, 1958, 1958, 3417, 8969, 13936, 11499, 5426, 1037, 662, 442, 10,
        22, 1612, 7144, 12094, 9294, 10839, 11156, 7429, 10223, 7574, 2844,
        1958, 1958, 4466, 10056, 15041, 17574, 20943, 22854, 27777, 31307,
        26790, 21814, 21569, 27524, 32767 };
    //horizontal Algerian
    const uint16_t algerian_s[65] = { 0, 1643, 4008, 7152, 10702, 14895, 27708,
        29476, 29511, 27460, 24094, 22481, 25721, 28493, 28981, 27489, 30250,
        26230, 24646, 27866, 31089, 31478, 32185, 32767, 32241, 30470, 27588,
        24075, 20609, 17547, 16018, 15192, 14004, 11698, 8308, 4731, 3409, 3810,
        5401, 8195, 10522, 6985, 3293, 3400, 2931, 2103, 1646, 2186, 4344, 7252,
        10742, 14246, 17078, 19164, 20359, 21403, 23521, 26880, 29759, 30832,
        29361, 26640, 24943, 28146, 31336 };
    //horizontal Algerian
    
    const uint16_t iExpo[65] = { 0, 3367, 6388, 9099, 11532, 13715, 15674, 17432,
        19009, 20425, 21695, 22835, 23858, 24776, 25599, 26339, 27002, 27597,
        28131, 28610, 29040, 29426, 29773, 30083, 30362, 30612, 30837, 31038,
        31219, 31382, 31527, 31658, 31775, 31880, 31975, 32059, 32135, 32204,
        32265, 32320, 32369, 32413, 32453, 32489, 32521, 32549, 32575, 32598,
        32619, 32637, 32654, 32669, 32683, 32695, 32705, 32715, 32724, 32732,
        32739, 32745, 32751, 32756, 32760, 32764, 32767 };
    const uint16_t iQuint[65] = { 0, 2481, 4810, 6993, 9038, 10950, 12738, 14406,
        15961, 17409, 18755, 20006, 21165, 22239, 23231, 24148, 24992, 25769,
        26483, 27137, 27735, 28282, 28780, 29232, 29643, 30015, 30350, 30652,
        30923, 31165, 31381, 31574, 31744, 31894, 32026, 32142, 32243, 32330,
        32405, 32470, 32525, 32572, 32611, 32643, 32670, 32692, 32710, 32725,
        32736, 32745, 32752, 32757, 32760, 32763, 32765, 32766, 32767, 32767,
        32767, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t iQuart[65] = { 0, 2000, 3908, 5725, 7455, 9101, 10665, 12151,
        13560, 14896, 16160, 17357, 18487, 19555, 20561, 21509, 22400, 23237,
        24023, 24759, 25447, 26091, 26690, 27249, 27768, 28250, 28695, 29108,
        29487, 29837, 30158, 30452, 30720, 30964, 31186, 31387, 31567, 31730,
        31875, 32005, 32120, 32221, 32310, 32388, 32455, 32513, 32563, 32605,
        32640, 32669, 32693, 32712, 32727, 32739, 32748, 32755, 32760, 32763,
        32765, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t iCube[65] = { 0, 1512, 2977, 4395, 5768, 7096, 8379, 9619, 10816,
        11971, 13085, 14158, 15192, 16187, 17143, 18062, 18944, 19790, 20601,
        21377, 22120, 22830, 23507, 24153, 24768, 25353, 25909, 26436, 26936,
        27409, 27855, 28276, 28672, 29044, 29393, 29719, 30024, 30308, 30571,
        30815, 31040, 31247, 31437, 31610, 31768, 31911, 32039, 32154, 32256,
        32346, 32425, 32493, 32552, 32602, 32643, 32677, 32704, 32725, 32741,
        32752, 32760, 32765, 32767, 32767, 32767 };
    const uint16_t iQuad[65] = { 0, 1016, 2016, 3000, 3968, 4920, 5856, 6776, 7680,
        8568, 9440, 10296, 11136, 11960, 12768, 13560, 14336, 15096, 15840,
        16568, 17280, 17976, 18656, 19320, 19968, 20600, 21216, 21816, 22400,
        22968, 23520, 24056, 24576, 25080, 25568, 26040, 26496, 26936, 27360,
        27768, 28160, 28536, 28896, 29240, 29568, 29880, 30176, 30456, 30720,
        30968, 31200, 31416, 31616, 31800, 31968, 32120, 32256, 32376, 32480,
        32568, 32640, 32696, 32736, 32760, 32767 };
    
    const uint16_t quad[65] = { 0, 8, 32, 72, 128, 200, 288, 392, 512, 648, 800,
        968, 1152, 1352, 1568, 1800, 2048, 2312, 2592, 2888, 3200, 3528, 3872,
        4232, 4608, 5000, 5408, 5832, 6272, 6728, 7200, 7688, 8192, 8712, 9248,
        9800, 10368, 10952, 11552, 12168, 12800, 13448, 14112, 14792, 15488,
        16200, 16928, 17672, 18432, 19208, 20000, 20808, 21632, 22472, 23328,
        24200, 25088, 25992, 26912, 27848, 28800, 29768, 30752, 31752, 32767 };
    const uint16_t cube[65] = { 0, 0, 1, 3, 8, 16, 27, 43, 64, 91, 125, 166, 216,
        275, 343, 422, 512, 614, 729, 857, 1000, 1158, 1331, 1521, 1728, 1953,
        2197, 2460, 2744, 3049, 3375, 3724, 4096, 4492, 4913, 5359, 5832, 6332,
        6859, 7415, 8000, 8615, 9261, 9938, 10648, 11391, 12167, 12978, 13824,
        14706, 15625, 16581, 17576, 18610, 19683, 20797, 21952, 23149, 24389,
        25672, 27000, 28373, 29791, 31256, 32767 };
    const uint16_t quart[65] = { 0, 0, 0, 0, 0, 1, 3, 5, 8, 13, 20, 29, 40, 56, 75,
        99, 128, 163, 205, 255, 312, 380, 458, 547, 648, 763, 893, 1038, 1200,
        1381, 1582, 1804, 2048, 2316, 2610, 2931, 3280, 3660, 4073, 4518, 5000,
        5519, 6078, 6677, 7320, 8009, 8745, 9531, 10368, 11259, 12207, 13213,
        14280, 15411, 16608, 17872, 19208, 20617, 22103, 23667, 25312, 27043,
        28860, 30768, 32767 };
    const uint16_t quint[65] = { 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 5, 8, 11, 16, 23,
        32, 43, 58, 76, 98, 125, 157, 196, 243, 298, 363, 438, 525, 626, 742,
        874, 1024, 1194, 1387, 1603, 1845, 2116, 2418, 2753, 3125, 3536, 3988,
        4486, 5033, 5631, 6285, 6999, 7776, 8620, 9537, 10529, 11603, 12762,
        14013, 15359, 16807, 18362, 20030, 21818, 23730, 25775, 27958, 30287,
        32767 };
    const uint16_t expo[65] = { 0, 4, 8, 12, 17, 23, 29, 36, 44, 53, 63, 73, 85, 99,
        114, 131, 149, 170, 193, 219, 247, 279, 315, 355, 399, 448, 503, 564,
        633, 709, 793, 888, 993, 1110, 1241, 1386, 1549, 1730, 1931, 2156, 2406,
        2685, 2995, 3342, 3728, 4158, 4637, 5171, 5766, 6429, 7169, 7992, 8910,
        9933, 11073, 12343, 13759, 15336, 17094, 19053, 21236, 23669, 26380,
        29401, 32767 };
    
    const uint16_t gamma1[65] = { 0, 2481, 4810, 6993, 9038, 10950, 12738, 14406,
        15961, 17409, 18755, 20006, 21165, 22239, 23231, 24148, 24992, 25769,
        26483, 27137, 27735, 28282, 28780, 29232, 29643, 30015, 30350, 30652,
        30923, 31165, 31381, 31574, 31744, 31894, 32026, 32142, 32243, 32330,
        32405, 32470, 32525, 32572, 32611, 32643, 32670, 32692, 32710, 32725,
        32736, 32745, 32752, 32757, 32760, 32763, 32765, 32766, 32767, 32767,
        32767, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t gamma2[65] = { 0, 2000, 3908, 5725, 7455, 9101, 10665, 12151,
        13560, 14896, 16160, 17357, 18487, 19555, 20561, 21509, 22400, 23237,
        24023, 24759, 25447, 26091, 26690, 27249, 27768, 28250, 28695, 29108,
        29487, 29837, 30158, 30452, 30720, 30964, 31186, 31387, 31567, 31730,
        31875, 32005, 32120, 32221, 32310, 32388, 32455, 32513, 32563, 32605,
        32640, 32669, 32693, 32712, 32727, 32739, 32748, 32755, 32760, 32763,
        32765, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t gamma3[65] = { 0, 1512, 2977, 4395, 5768, 7096, 8379, 9619,
        10816, 11971, 13085, 14158, 15192, 16187, 17143, 18062, 18944, 19790,
        20601, 21377, 22120, 22830, 23507, 24153, 24768, 25353, 25909, 26436,
        26936, 27409, 27855, 28276, 28672, 29044, 29393, 29719, 30024, 30308,
        30571, 30815, 31040, 31247, 31437, 31610, 31768, 31911, 32039, 32154,
        32256, 32346, 32425, 32493, 32552, 32602, 32643, 32677, 32704, 32725,
        32741, 32752, 32760, 32765, 32767, 32767, 32767 };
    const uint16_t gamma4[65] = { 0, 1016, 2016, 3000, 3968, 4920, 5856, 6776, 7680,
        8568, 9440, 10296, 11136, 11960, 12768, 13560, 14336, 15096, 15840,
        16568, 17280, 17976, 18656, 19320, 19968, 20600, 21216, 21816, 22400,
        22968, 23520, 24056, 24576, 25080, 25568, 26040, 26496, 26936, 27360,
        27768, 28160, 28536, 28896, 29240, 29568, 29880, 30176, 30456, 30720,
        30968, 31200, 31416, 31616, 31800, 31968, 32120, 32256, 32376, 32480,
        32568, 32640, 32696, 32736, 32760, 32767 };
    // gamma5 = linear
    const uint16_t gamma6[65] = { 0, 8, 32, 72, 128, 200, 288, 392, 512, 648, 800,
        968, 1152, 1352, 1568, 1800, 2048, 2312, 2592, 2888, 3200, 3528, 3872,
        4232, 4608, 5000, 5408, 5832, 6272, 6728, 7200, 7688, 8192, 8712, 9248,
        9800, 10368, 10952, 11552, 12168, 12800, 13448, 14112, 14792, 15488,
        16200, 16928, 17672, 18432, 19208, 20000, 20808, 21632, 22472, 23328,
        24200, 25088, 25992, 26912, 27848, 28800, 29768, 30752, 31752, 32767 };
    const uint16_t gamma7[65] = { 0, 0, 1, 3, 8, 16, 27, 43, 64, 91, 125, 166, 216,
        275, 343, 422, 512, 614, 729, 857, 1000, 1158, 1331, 1521, 1728, 1953,
        2197, 2460, 2744, 3049, 3375, 3724, 4096, 4492, 4913, 5359, 5832, 6332,
        6859, 7415, 8000, 8615, 9261, 9938, 10648, 11391, 12167, 12978, 13824,
        14706, 15625, 16581, 17576, 18610, 19683, 20797, 21952, 23149, 24389,
        25672, 27000, 28373, 29791, 31256, 32767 };
    const uint16_t gamma8[65] = { 0, 0, 0, 0, 0, 1, 3, 5, 8, 13, 20, 29, 40, 56, 75,
        99, 128, 163, 205, 255, 312, 380, 458, 547, 648, 763, 893, 1038, 1200,
        1381, 1582, 1804, 2048, 2316, 2610, 2931, 3280, 3660, 4073, 4518, 5000,
        5519, 6078, 6677, 7320, 8009, 8745, 9531, 10368, 11259, 12207, 13213,
        14280, 15411, 16608, 17872, 19208, 20617, 22103, 23667, 25312, 27043,
        28860, 30768, 32767 };
    const uint16_t gamma9[65] = { 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 5, 8, 11, 16, 23,
        32, 43, 58, 76, 98, 125, 157, 196, 243, 298, 363, 438, 525, 626, 742,
        874, 1024, 1194, 1387, 1603, 1845, 2116, 2418, 2753, 3125, 3536, 3988,
        4486, 5033, 5631, 6285, 6999, 7776, 8620, 9537, 10529, 11603, 12762,
        14013, 15359, 16807, 18362, 20030, 21818, 23730, 25775, 27958, 30287,
        32767 };
    
    // a=b=1, n= {.3, .66, 1.33, 2, 5}
    const uint16_t superEllipse1_1[65] = { 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 6, 7,
        10, 13, 16, 21, 26, 32, 39, 47, 56, 67, 79, 93, 109, 128, 149, 172, 198,
        228, 262, 300, 342, 389, 442, 502, 568, 642, 725, 818, 922, 1038, 1169,
        1315, 1480, 1665, 1874, 2110, 2378, 2683, 3032, 3431, 3893, 4430, 5060,
        5804, 6696, 7781, 9130, 10852, 13143, 16390, 21558, 32767 };
    const uint16_t superEllipse1_2[65] = { 0, 54, 131, 227, 338, 464, 602, 752, 914,
        1087, 1271, 1465, 1670, 1884, 2108, 2342, 2586, 2839, 3102, 3374, 3657,
        3949, 4250, 4561, 4882, 5213, 5554, 5905, 6267, 6638, 7021, 7415, 7819,
        8235, 8663, 9103, 9554, 10019, 10497, 10988, 11494, 12013, 12548, 13099,
        13667, 14252, 14854, 15477, 16121, 16788, 17476, 18191, 18934, 19707,
        20513, 21357, 22242, 23177, 24167, 25224, 26363, 27611, 29007, 30638,
        32767 };
    //astroid
    const uint16_t superEllipse1_3[65] = { 0, 1392, 2543, 3578, 4535, 5436, 6292,
        7112, 7901, 8662, 9400, 10116, 10814, 11493, 12157, 12805, 13440, 14061,
        14669, 15265, 15849, 16424, 16987, 17540, 18083, 18617, 19142, 19657,
        20165, 20663, 21153, 21635, 22109, 22574, 23032, 23482, 23924, 24359,
        24786, 25205, 25617, 26021, 26417, 26806, 27187, 27560, 27926, 28283,
        28632, 28973, 29305, 29629, 29943, 30249, 30544, 30830, 31105, 31368,
        31619, 31858, 32081, 32288, 32476, 32639, 32767 };
    const uint16_t superEllipse1_4[65] = { 0, 3356, 5639, 7472, 9037, 10421, 11666,
        12804, 13853, 14831, 15744, 16603, 17414, 18181, 18909, 19602, 20262,
        20892, 21495, 22071, 22623, 23153, 23661, 24148, 24616, 25065, 25497,
        25912, 26310, 26693, 27061, 27414, 27753, 28079, 28392, 28691, 28978,
        29253, 29516, 29767, 30007, 30236, 30454, 30661, 30858, 31044, 31220,
        31386, 31542, 31688, 31825, 31952, 32070, 32178, 32277, 32367, 32447,
        32519, 32581, 32635, 32679, 32715, 32741, 32759, 32767 };
    const uint16_t superEllipse1_5[65] = { 0, 8438, 12860, 15907, 18222, 20078,
        21614, 22913, 24028, 24996, 25845, 26593, 27257, 27849, 28376, 28849,
        29272, 29653, 29996, 30303, 30581, 30830, 31054, 31255, 31436, 31598,
        31743, 31873, 31989, 32092, 32183, 32265, 32336, 32399, 32455, 32503,
        32546, 32582, 32614, 32641, 32664, 32684, 32700, 32714, 32725, 32735,
        32743, 32749, 32754, 32757, 32760, 32763, 32764, 32766, 32767, 32767,
        32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767 };
    
    const uint16_t moogShiftedAttack1[65] = { 0, 135, 651, 1522, 2715, 4189, 5894,
        7777, 9782, 11853, 13935, 15970, 17910, 19709, 21327, 22729, 23890,
        24793, 25427, 25790, 25892, 25742, 25360, 24775, 24014, 23113, 22108,
        21037, 19940, 18854, 17813, 16851, 15998, 15278, 14713, 14319, 14100,
        14067, 14212, 14533, 15019, 15652, 16416, 17286, 18240, 19253, 20299,
        21350, 22383, 23376, 24304, 25152, 25902, 26544, 27068, 27467, 27745,
        27903, 27943, 27880, 27719, 27480, 27172, 26819, 26432 };
    
    const uint16_t moogShiftedAttack2[65] = { 0, 678, 2124, 4205, 6764, 9622, 12590,
        15481, 18133, 20400, 22175, 23387, 24004, 24035, 23522, 22545, 21204,
        19616, 17909, 16206, 14627, 13278, 12235, 11559, 11281, 11404, 11907,
        12747, 13858, 15165, 16585, 18033, 19422, 20685, 21754, 22589, 23162,
        23462, 23497, 23293, 22888, 22332, 21677, 20985, 20311, 19705, 19216,
        18877, 18709, 18725, 18924, 19291, 19803, 20433, 21141, 21890, 22638,
        23354, 23999, 24554, 24996, 25316, 25510, 25588, 25560 };
    //
    const uint16_t moogShiftedAttack3[65] = { 0, 1406, 4310, 8199, 12463, 16502,
        19794, 21977, 22867, 22486, 21022, 18800, 16222, 13702, 11609, 10220,
        9683, 10023, 11135, 12821, 14812, 16830, 18618, 19966, 20754, 20946,
        20592, 19815, 18782, 17688, 16710, 15998, 15651, 15707, 16146, 16893,
        17843, 18867, 19838, 20652, 21233, 21542, 21589, 21408, 21073, 20668,
        20278, 19977, 19827, 19855, 20065, 20435, 20920, 21471, 22026, 22530,
        22939, 23233, 23401, 23459, 23427, 23344, 23249, 23179, 23166 };
    //
    const uint16_t moogShiftedAttack4[65] = { 0, 663, 4827, 10829, 16666, 20656,
        21893, 20420, 17091, 13206, 10056, 8544, 8957, 10965, 13801, 16551,
        18454, 19094, 18499, 17063, 15379, 14039, 13447, 13736, 14750, 16139,
        17483, 18437, 18814, 18628, 18059, 17382, 16861, 16687, 16914, 17472,
        18197, 18901, 19424, 19683, 19688, 19516, 19298, 19153, 19165, 19362,
        19709, 20131, 20544, 20872, 21078, 21170, 21181, 21172, 21198, 21296,
        21477, 21725, 22010, 22290, 22528, 22714, 22845, 22941, 23028 };
    //
    const uint16_t moogShiftedAttack5[65] = { 0, 3561, 12116, 19408, 21177, 17475,
        11798, 8217, 8699, 12257, 16160, 17979, 17071, 14640, 12620, 12312,
        13688, 15656, 16968, 17023, 16135, 15151, 14816, 15323, 16290, 17128,
        17434, 17222, 16831, 16649, 16854, 17347, 17868, 18185, 18244, 18160,
        18121, 18247, 18530, 18867, 19141, 19294, 19358, 19415, 19536, 19735,
        19979, 20207, 20385, 20515, 20627, 20762, 20933, 21129, 21330, 21508,
        21666, 21807, 21953, 22115, 22293, 22476, 22652, 22816, 22974 };
    //
    const uint16_t moogShiftedAttack6[65] = { 0, 12503, 19735, 14338, 6736, 7237,
        13216, 15929, 13109, 10013, 10802, 13644, 14651, 13291, 12130, 12785,
        14160, 14564, 13980, 13629, 14106, 14810, 15021, 14831, 14810, 15158,
        15559, 15722, 15727, 15834, 16102, 16372, 16530, 16627, 16783, 17005,
        17221, 17382, 17525, 17696, 17895, 18087, 18255, 18418, 18594, 18781,
        18963, 19136, 19306, 19484, 19667, 19847, 20019, 20195, 20372, 20552,
        20730, 20905, 21080, 21258, 21436, 21613, 21791, 21966, 22144 };
    //
    const uint16_t moogShiftedAttack7[65] = { 0, 16728, 9776, 3698, 11772, 11489,
        7077, 10109, 11583, 9315, 10077, 11479, 10655, 10666, 11591, 11492,
        11396, 11929, 12115, 12105, 12417, 12672, 12758, 12973, 13221, 13373,
        13557, 13783, 13965, 14146, 14354, 14548, 14732, 14932, 15129, 15318,
        15513, 15707, 15899, 16094, 16288, 16483, 16674, 16869, 17063, 17258,
        17452, 17647, 17839, 18033, 18228, 18422, 18614, 18809, 19003, 19198,
        19390, 19584, 19779, 19973, 20165, 20359, 20554, 20748, 20940 };
    //
    const uint16_t moogShiftedAttack8[65] = { 0, 16087, 5289, 12600, 8493, 11021,
        10128, 10634, 10911, 10819, 11338, 11210, 11658, 11643, 11975, 12062,
        12310, 12459, 12666, 12843, 13032, 13219, 13403, 13592, 13774, 13963,
        14148, 14334, 14521, 14708, 14892, 15079, 15266, 15453, 15639, 15824,
        16010, 16197, 16384, 16568, 16755, 16942, 17129, 17313, 17500, 17686,
        17873, 18057, 18244, 18431, 18618, 18805, 18989, 19176, 19362, 19549,
        19733, 19920, 20107, 20294, 20478, 20665, 20852, 21038, 21223 };
    //
    const uint16_t moogShiftedAttack9[65] = { 0, 3526, 4397, 3255, 3860, 4413, 4393,
        4632, 4956, 5159, 5384, 5640, 5875, 6107, 6349, 6588, 6824, 7063, 7301,
        7537, 7776, 8015, 8253, 8489, 8728, 8966, 9205, 9441, 9680, 9918, 10157,
        10396, 10632, 10870, 11109, 11348, 11583, 11822, 12061, 12300, 12535,
        12774, 13013, 13252, 13487, 13726, 13965, 14204, 14443, 14678, 14917,
        15156, 15394, 15630, 15869, 16108, 16346, 16582, 16821, 17060, 17298,
        17534, 17773, 18011, 18250 };
    //
    const uint16_t moogShiftedRelease1[65] = { 260, 919, 1970, 3392, 5153, 7212,
        9515, 11996, 14591, 17220, 19810, 22281, 24566, 26600, 28330, 29727,
        30776, 31491, 31913, 32109, 32162, 32167, 32259, 32295, 32353, 32427,
        32508, 32590, 32664, 32725, 32760, 32767, 32737, 32661, 32536, 32361,
        32129, 31839, 31496, 31096, 30648, 30157, 29630, 29076, 28501, 27920,
        27343, 26780, 26246, 25752, 25307, 24923, 24607, 24368, 24208, 24129,
        24136, 24223, 24386, 24620, 24915, 25256, 25635, 26032, 26432 };
    //
    const uint16_t moogShiftedRelease2[65] = { 168, 1221, 3127, 5805, 9117, 12869,
        16831, 20751, 24381, 27489, 29908, 31552, 32452, 32767, 32749, 32686,
        32553, 32391, 32204, 31991, 31753, 31493, 31217, 30927, 30637, 30347,
        30071, 29816, 29587, 29393, 29232, 29112, 29028, 28979, 28960, 28958,
        28967, 28977, 28970, 28939, 28871, 28757, 28591, 28369, 28088, 27756,
        27379, 26968, 26535, 26100, 25676, 25284, 24942, 24661, 24458, 24334,
        24294, 24336, 24451, 24622, 24832, 25054, 25269, 25445, 25560 };
    //
    const uint16_t moogShiftedRelease3[65] = { 430, 2788, 6879, 12224, 18123, 23748,
        28315, 31286, 32595, 32767, 32639, 32472, 32296, 32125, 31961, 31808,
        31658, 31515, 31371, 31226, 31073, 30911, 30738, 30553, 30356, 30153,
        29947, 29746, 29552, 29369, 29205, 29059, 28927, 28810, 28696, 28581,
        28454, 28310, 28141, 27949, 27730, 27494, 27244, 26997, 26761, 26548,
        26370, 26232, 26127, 26056, 26005, 25956, 25894, 25799, 25658, 25464,
        25210, 24909, 24574, 24227, 23894, 23603, 23376, 23228, 23166 };
    //
    const uint16_t moogShiftedRelease4[65] = { 3547, 10657, 19383, 27078, 31584,
        32767, 32656, 32559, 32394, 32227, 32061, 31896, 31731, 31563, 31394,
        31226, 31056, 30887, 30721, 30554, 30391, 30226, 30063, 29898, 29730,
        29560, 29388, 29216, 29047, 28879, 28714, 28553, 28393, 28234, 28069,
        27902, 27727, 27551, 27372, 27197, 27030, 26869, 26715, 26564, 26413,
        26252, 26082, 25901, 25711, 25518, 25334, 25165, 25011, 24873, 24745,
        24609, 24458, 24283, 24084, 23866, 23646, 23439, 23267, 23132, 23028 };
    //
    const uint16_t moogShiftedRelease5[65] = { 5275, 17251, 28465, 32757, 32647,
        32767, 32601, 32437, 32270, 32104, 31937, 31773, 31606, 31440, 31273,
        31109, 30942, 30775, 30609, 30442, 30278, 30111, 29945, 29778, 29614,
        29447, 29280, 29114, 28949, 28783, 28616, 28449, 28283, 28118, 27952,
        27785, 27621, 27454, 27288, 27121, 26954, 26788, 26623, 26459, 26292,
        26126, 25957, 25790, 25626, 25462, 25297, 25131, 24964, 24795, 24626,
        24460, 24295, 24135, 23973, 23807, 23633, 23460, 23291, 23129, 22974 };
    //
    const uint16_t moogShiftedRelease6[65] = { 1416, 19348, 31916, 31800, 32767,
        32590, 32413, 32238, 32060, 31882, 31705, 31529, 31352, 31174, 30996,
        30821, 30644, 30466, 30288, 30111, 29936, 29758, 29580, 29403, 29227,
        29050, 28872, 28695, 28519, 28342, 28164, 27986, 27811, 27634, 27456,
        27278, 27101, 26925, 26748, 26570, 26393, 26217, 26040, 25862, 25684,
        25509, 25332, 25154, 24976, 24801, 24623, 24446, 24268, 24093, 23915,
        23738, 23560, 23382, 23207, 23030, 22852, 22674, 22499, 22321, 22144 };
    //
    const uint16_t moogShiftedRelease7[65] = { 3003, 29035, 28907, 32767, 32573,
        32382, 32187, 31993, 31798, 31604, 31412, 31217, 31023, 30828, 30636,
        30442, 30247, 30053, 29861, 29667, 29472, 29278, 29086, 28891, 28697,
        28502, 28308, 28116, 27921, 27727, 27532, 27340, 27146, 26951, 26757,
        26565, 26371, 26176, 25982, 25790, 25595, 25401, 25206, 25014, 24820,
        24625, 24431, 24236, 24044, 23850, 23655, 23461, 23269, 23075, 22880,
        22686, 22494, 22299, 22105, 21910, 21718, 21524, 21329, 21135, 20940 };
    
    const uint16_t moogShiftedRelease8[65] = { 22922, 22799, 32767, 32581, 32394,
        32210, 32023, 31837, 31650, 31463, 31279, 31092, 30905, 30718, 30534,
        30347, 30161, 29974, 29790, 29603, 29416, 29229, 29045, 28858, 28671,
        28485, 28300, 28114, 27927, 27740, 27553, 27369, 27182, 26995, 26809,
        26624, 26438, 26251, 26064, 25880, 25693, 25506, 25319, 25135, 24948,
        24762, 24575, 24388, 24204, 24017, 23830, 23643, 23459, 23272, 23085,
        22899, 22714, 22528, 22341, 22154, 21970, 21783, 21596, 21409, 21223 };
    //
    const uint16_t moogShiftedRelease9[65] = { 5721, 9042, 8885, 32767, 32532,
        32294, 32055, 31816, 31581, 31342, 31103, 30864, 30625, 30390, 30151,
        29912, 29673, 29438, 29199, 28960, 28721, 28486, 28247, 28008, 27770,
        27534, 27295, 27056, 26818, 26579, 26343, 26104, 25866, 25627, 25391,
        25153, 24914, 24675, 24439, 24201, 23962, 23723, 23487, 23249, 23010,
        22771, 22536, 22297, 22058, 21819, 21580, 21345, 21106, 20867, 20628,
        20393, 20154, 19915, 19677, 19441, 19202, 18963, 18725, 18489, 18250 };
    //
    
    const uint16_t moogNormalizedAttack1[65] = { 32167, 32162, 32109, 31913, 31491,
        30776, 29727, 28330, 26600, 24566, 22281, 19810, 17220, 14591, 11996,
        9515, 7212, 5153, 3392, 1970, 919, 260, 0, 135, 651, 1522, 2715, 4189,
        5894, 7777, 9782, 11853, 13935, 15970, 17910, 19709, 21327, 22729,
        23890, 24793, 25427, 25790, 25892, 25742, 25360, 24775, 24014, 23113,
        22108, 21037, 19940, 18854, 17813, 16851, 15998, 15278, 14713, 14319,
        14100, 14067, 14212, 14533, 15019, 15652, 16416 };
    //
    const uint16_t moogNormalizedAttack2[65] = { 32749, 32767, 32452, 31552, 29908,
        27489, 24381, 20751, 16831, 12869, 9117, 5805, 3127, 1221, 168, 0, 678,
        2124, 4205, 6764, 9622, 12590, 15481, 18133, 20400, 22175, 23387, 24004,
        24035, 23522, 22545, 21204, 19616, 17909, 16206, 14627, 13278, 12235,
        11559, 11281, 11404, 11907, 12747, 13858, 15165, 16585, 18033, 19422,
        20685, 21754, 22589, 23162, 23462, 23497, 23293, 22888, 22332, 21677,
        20985, 20311, 19705, 19216, 18877, 18709, 18725 };
    //
    const uint16_t moogNormalizedAttack3[65] = { 32767, 32595, 31286, 28315, 23748,
        18123, 12224, 6879, 2788, 430, 0, 1406, 4310, 8199, 12463, 16502, 19794,
        21977, 22867, 22486, 21022, 18800, 16222, 13702, 11609, 10220, 9683,
        10023, 11135, 12821, 14812, 16830, 18618, 19966, 20754, 20946, 20592,
        19815, 18782, 17688, 16710, 15998, 15651, 15707, 16146, 16893, 17843,
        18867, 19838, 20652, 21233, 21542, 21589, 21408, 21073, 20668, 20278,
        19977, 19827, 19855, 20065, 20435, 20920, 21471, 22026 };
    //
    const uint16_t moogNormalizedAttack4[65] = { 32767, 31584, 27078, 19383, 10657,
        3547, 0, 663, 4827, 10829, 16666, 20656, 21893, 20420, 17091, 13206,
        10056, 8544, 8957, 10965, 13801, 16551, 18454, 19094, 18499, 17063,
        15379, 14039, 13447, 13736, 14750, 16139, 17483, 18437, 18814, 18628,
        18059, 17382, 16861, 16687, 16914, 17472, 18197, 18901, 19424, 19683,
        19688, 19516, 19298, 19153, 19165, 19362, 19709, 20131, 20544, 20872,
        21078, 21170, 21181, 21172, 21198, 21296, 21477, 21725, 22010 };
    //
    const uint16_t moogNormalizedAttack5[65] = { 32757, 28465, 17251, 5275, 0, 3561,
        12116, 19408, 21177, 17475, 11798, 8217, 8699, 12257, 16160, 17979,
        17071, 14640, 12620, 12312, 13688, 15656, 16968, 17023, 16135, 15151,
        14816, 15323, 16290, 17128, 17434, 17222, 16831, 16649, 16854, 17347,
        17868, 18185, 18244, 18160, 18121, 18247, 18530, 18867, 19141, 19294,
        19358, 19415, 19536, 19735, 19979, 20207, 20385, 20515, 20627, 20762,
        20933, 21129, 21330, 21508, 21666, 21807, 21953, 22115, 22293 };
    //
    const uint16_t moogNormalizedAttack6[65] = { 31916, 19348, 1416, 0, 12503,
        19735, 14338, 6736, 7237, 13216, 15929, 13109, 10013, 10802, 13644,
        14651, 13291, 12130, 12785, 14160, 14564, 13980, 13629, 14106, 14810,
        15021, 14831, 14810, 15158, 15559, 15722, 15727, 15834, 16102, 16372,
        16530, 16627, 16783, 17005, 17221, 17382, 17525, 17696, 17895, 18087,
        18255, 18418, 18594, 18781, 18963, 19136, 19306, 19484, 19667, 19847,
        20019, 20195, 20372, 20552, 20730, 20905, 21080, 21258, 21436, 21613 };
    //
    const uint16_t moogNormalizedAttack7[65] = { 29035, 3003, 0, 16728, 9776, 3698,
        11772, 11489, 7077, 10109, 11583, 9315, 10077, 11479, 10655, 10666,
        11591, 11492, 11396, 11929, 12115, 12105, 12417, 12672, 12758, 12973,
        13221, 13373, 13557, 13783, 13965, 14146, 14354, 14548, 14732, 14932,
        15129, 15318, 15513, 15707, 15899, 16094, 16288, 16483, 16674, 16869,
        17063, 17258, 17452, 17647, 17839, 18033, 18228, 18422, 18614, 18809,
        19003, 19198, 19390, 19584, 19779, 19973, 20165, 20359, 20554 };
    //
    const uint16_t moogNormalizedAttack8[65] = { 22922, 0, 16087, 5289, 12600, 8493,
        11021, 10128, 10634, 10911, 10819, 11338, 11210, 11658, 11643, 11975,
        12062, 12310, 12459, 12666, 12843, 13032, 13219, 13403, 13592, 13774,
        13963, 14148, 14334, 14521, 14708, 14892, 15079, 15266, 15453, 15639,
        15824, 16010, 16197, 16384, 16568, 16755, 16942, 17129, 17313, 17500,
        17686, 17873, 18057, 18244, 18431, 18618, 18805, 18989, 19176, 19362,
        19549, 19733, 19920, 20107, 20294, 20478, 20665, 20852, 21038 };
    //
    const uint16_t moogNormalizedAttack9[65] = { 9042, 5721, 0, 3526, 4397, 3255,
        3860, 4413, 4393, 4632, 4956, 5159, 5384, 5640, 5875, 6107, 6349, 6588,
        6824, 7063, 7301, 7537, 7776, 8015, 8253, 8489, 8728, 8966, 9205, 9441,
        9680, 9918, 10157, 10396, 10632, 10870, 11109, 11348, 11583, 11822,
        12061, 12300, 12535, 12774, 13013, 13252, 13487, 13726, 13965, 14204,
        14443, 14678, 14917, 15156, 15394, 15630, 15869, 16108, 16346, 16582,
        16821, 17060, 17298, 17534, 17773 };
    //
    const uint16_t moogNormalizedRelease1[65] = { 32259, 32295, 32353, 32427, 32508,
        32590, 32664, 32725, 32760, 32767, 32737, 32661, 32536, 32361, 32129,
        31839, 31496, 31096, 30648, 30157, 29630, 29076, 28501, 27920, 27343,
        26780, 26246, 25752, 25307, 24923, 24607, 24368, 24208, 24129, 24136,
        24223, 24386, 24620, 24915, 25256, 25635, 26032, 26432, 26819, 27172,
        27480, 27719, 27880, 27943, 27903, 27745, 27467, 27068, 26544, 25902,
        25152, 24304, 23376, 22383, 21350, 20299, 19253, 18240, 17286, 16416 };
    //
    const uint16_t moogNormalizedRelease2[65] = { 32686, 32553, 32391, 32204, 31991,
        31753, 31493, 31217, 30927, 30637, 30347, 30071, 29816, 29587, 29393,
        29232, 29112, 29028, 28979, 28960, 28958, 28967, 28977, 28970, 28939,
        28871, 28757, 28591, 28369, 28088, 27756, 27379, 26968, 26535, 26100,
        25676, 25284, 24942, 24661, 24458, 24334, 24294, 24336, 24451, 24622,
        24832, 25054, 25269, 25445, 25560, 25588, 25510, 25316, 24996, 24554,
        23999, 23354, 22638, 21890, 21141, 20433, 19803, 19291, 18924, 18725 };
    //
    const uint16_t moogNormalizedRelease3[65] = { 32639, 32472, 32296, 32125, 31961,
        31808, 31658, 31515, 31371, 31226, 31073, 30911, 30738, 30553, 30356,
        30153, 29947, 29746, 29552, 29369, 29205, 29059, 28927, 28810, 28696,
        28581, 28454, 28310, 28141, 27949, 27730, 27494, 27244, 26997, 26761,
        26548, 26370, 26232, 26127, 26056, 26005, 25956, 25894, 25799, 25658,
        25464, 25210, 24909, 24574, 24227, 23894, 23603, 23376, 23228, 23166,
        23179, 23249, 23344, 23427, 23459, 23401, 23233, 22939, 22530, 22026 };
    //
    const uint16_t moogNormalizedRelease4[65] = { 32656, 32559, 32394, 32227, 32061,
        31896, 31731, 31563, 31394, 31226, 31056, 30887, 30721, 30554, 30391,
        30226, 30063, 29898, 29730, 29560, 29388, 29216, 29047, 28879, 28714,
        28553, 28393, 28234, 28069, 27902, 27727, 27551, 27372, 27197, 27030,
        26869, 26715, 26564, 26413, 26252, 26082, 25901, 25711, 25518, 25334,
        25165, 25011, 24873, 24745, 24609, 24458, 24283, 24084, 23866, 23646,
        23439, 23267, 23132, 23028, 22941, 22845, 22714, 22528, 22290, 22010 };
    //
    const uint16_t moogNormalizedRelease5[65] = { 32647, 32767, 32601, 32437, 32270,
        32104, 31937, 31773, 31606, 31440, 31273, 31109, 30942, 30775, 30609,
        30442, 30278, 30111, 29945, 29778, 29614, 29447, 29280, 29114, 28949,
        28783, 28616, 28449, 28283, 28118, 27952, 27785, 27621, 27454, 27288,
        27121, 26954, 26788, 26623, 26459, 26292, 26126, 25957, 25790, 25626,
        25462, 25297, 25131, 24964, 24795, 24626, 24460, 24295, 24135, 23973,
        23807, 23633, 23460, 23291, 23129, 22974, 22816, 22652, 22476, 22293 };
    //
    const uint16_t moogNormalizedRelease6[65] = { 31800, 32767, 32590, 32413, 32238,
        32060, 31882, 31705, 31529, 31352, 31174, 30996, 30821, 30644, 30466,
        30288, 30111, 29936, 29758, 29580, 29403, 29227, 29050, 28872, 28695,
        28519, 28342, 28164, 27986, 27811, 27634, 27456, 27278, 27101, 26925,
        26748, 26570, 26393, 26217, 26040, 25862, 25684, 25509, 25332, 25154,
        24976, 24801, 24623, 24446, 24268, 24093, 23915, 23738, 23560, 23382,
        23207, 23030, 22852, 22674, 22499, 22321, 22144, 21966, 21791, 21613 };
    //
    const uint16_t moogNormalizedRelease7[65] = { 28907, 32767, 32573, 32382, 32187,
        31993, 31798, 31604, 31412, 31217, 31023, 30828, 30636, 30442, 30247,
        30053, 29861, 29667, 29472, 29278, 29086, 28891, 28697, 28502, 28308,
        28116, 27921, 27727, 27532, 27340, 27146, 26951, 26757, 26565, 26371,
        26176, 25982, 25790, 25595, 25401, 25206, 25014, 24820, 24625, 24431,
        24236, 24044, 23850, 23655, 23461, 23269, 23075, 22880, 22686, 22494,
        22299, 22105, 21910, 21718, 21524, 21329, 21135, 20940, 20748, 20554 };
    //
    const uint16_t moogNormalizedRelease8[65] = { 22799, 32767, 32581, 32394, 32210,
        32023, 31837, 31650, 31463, 31279, 31092, 30905, 30718, 30534, 30347,
        30161, 29974, 29790, 29603, 29416, 29229, 29045, 28858, 28671, 28485,
        28300, 28114, 27927, 27740, 27553, 27369, 27182, 26995, 26809, 26624,
        26438, 26251, 26064, 25880, 25693, 25506, 25319, 25135, 24948, 24762,
        24575, 24388, 24204, 24017, 23830, 23643, 23459, 23272, 23085, 22899,
        22714, 22528, 22341, 22154, 21970, 21783, 21596, 21409, 21223, 21038 };
    //
    const uint16_t moogNormalizedRelease9[65] = { 8885, 32767, 32532, 32294, 32055,
        31816, 31581, 31342, 31103, 30864, 30625, 30390, 30151, 29912, 29673,
        29438, 29199, 28960, 28721, 28486, 28247, 28008, 27770, 27534, 27295,
        27056, 26818, 26579, 26343, 26104, 25866, 25627, 25391, 25153, 24914,
        24675, 24439, 24201, 23962, 23723, 23487, 23249, 23010, 22771, 22536,
        22297, 22058, 21819, 21580, 21345, 21106, 20867, 20628, 20393, 20154,
        19915, 19677, 19441, 19202, 18963, 18725, 18489, 18250, 18011, 17773 };
    //
    
    const uint16_t moogInvertedTimeAttack1[65] = { 0, 473, 415, 341, 260, 178, 104,
        43, 8, 0, 31, 107, 232, 407, 639, 929, 1272, 1672, 2120, 2611, 3138,
        3692, 4267, 4848, 5425, 5988, 6522, 7016, 7461, 7845, 8161, 8400, 8560,
        8639, 8632, 8545, 8382, 8148, 7853, 7512, 7133, 6736, 6336, 5949, 5596,
        5288, 5049, 4888, 4825, 4865, 5023, 5301, 5700, 6224, 6866, 7616, 8464,
        9392, 10385, 11418, 12469, 13515, 14528, 15482, 16352 };
    //
    const uint16_t moogInvertedTimeAttack2[65] =
    { 0, 215, 377, 564, 777, 1015, 1275, 1551, 1841, 2131, 2421, 2697, 2952,
        3181, 3375, 3536, 3656, 3740, 3789, 3808, 3810, 3801, 3791,
        3798, 3829, 3897, 4011, 4177, 4399, 4680, 5012, 5389, 5800,
        6233, 6668, 7092, 7484, 7826, 8107, 8310, 8434, 8474, 8432,
        8317, 8146, 7936, 7714, 7499, 7323, 7208, 7180, 7258, 7452,
        7772, 8214, 8769, 9414, 10130, 10878, 11627, 12335, 12965,
        13477, 13844, 14043 };
    //
    const uint16_t moogInvertedTimeAttack3[65] = { 0, 296, 472, 643, 807, 960, 1110,
        1253, 1397, 1542, 1695, 1857, 2030, 2215, 2412, 2615, 2821, 3022, 3216,
        3399, 3563, 3709, 3841, 3958, 4072, 4187, 4314, 4458, 4627, 4819, 5038,
        5274, 5524, 5771, 6007, 6220, 6398, 6536, 6641, 6712, 6763, 6812, 6874,
        6969, 7110, 7304, 7558, 7859, 8194, 8541, 8874, 9165, 9392, 9540, 9602,
        9589, 9519, 9424, 9341, 9309, 9367, 9535, 9829, 10238, 10742 };
    //
    const uint16_t moogInvertedTimeAttack4[65] = { 0, 209, 374, 541, 707, 872, 1037,
        1205, 1374, 1542, 1712, 1881, 2047, 2214, 2377, 2542, 2705, 2870, 3038,
        3208, 3380, 3552, 3721, 3889, 4054, 4215, 4375, 4534, 4699, 4866, 5041,
        5217, 5396, 5571, 5738, 5899, 6053, 6204, 6355, 6516, 6686, 6867, 7057,
        7250, 7434, 7603, 7757, 7895, 8023, 8159, 8310, 8485, 8684, 8902, 9122,
        9329, 9501, 9636, 9740, 9827, 9923, 10054, 10240, 10478, 10758 };
    //
    const uint16_t moogInvertedTimeAttack5[65] = { 0, 0, 167, 331, 498, 664, 831,
        995, 1162, 1328, 1495, 1659, 1826, 1993, 2159, 2326, 2490, 2657, 2823,
        2990, 3154, 3321, 3488, 3654, 3819, 3985, 4152, 4319, 4485, 4650, 4816,
        4983, 5147, 5314, 5480, 5647, 5814, 5980, 6145, 6309, 6476, 6642, 6811,
        6978, 7142, 7306, 7471, 7637, 7804, 7973, 8142, 8308, 8473, 8633, 8795,
        8961, 9135, 9308, 9477, 9639, 9794, 9952, 10116, 10292, 10475 };
    //
    const uint16_t moogInvertedTimeAttack6[65] = { 0, 0, 178, 355, 530, 708, 886,
        1063, 1239, 1416, 1594, 1772, 1947, 2124, 2302, 2480, 2657, 2832, 3010,
        3188, 3365, 3541, 3718, 3896, 4073, 4249, 4426, 4604, 4782, 4957, 5134,
        5312, 5490, 5667, 5843, 6020, 6198, 6375, 6551, 6728, 6906, 7084, 7259,
        7436, 7614, 7792, 7967, 8145, 8322, 8500, 8675, 8853, 9030, 9208, 9386,
        9561, 9738, 9916, 10094, 10269, 10447, 10624, 10802, 10977, 11155 };
    //
    const uint16_t moogInvertedTimeAttack7[65] = { 0, 0, 195, 386, 581, 775, 970,
        1164, 1356, 1551, 1745, 1940, 2132, 2326, 2521, 2715, 2907, 3101, 3296,
        3490, 3682, 3877, 4071, 4266, 4460, 4652, 4847, 5041, 5236, 5428, 5622,
        5817, 6011, 6203, 6397, 6592, 6786, 6978, 7173, 7367, 7562, 7754, 7948,
        8143, 8337, 8532, 8724, 8918, 9113, 9307, 9499, 9693, 9888, 10082,
        10274, 10469, 10663, 10858, 11050, 11244, 11439, 11633, 11828, 12020,
        12214 };
    //
    const uint16_t moogInvertedTimeAttack8[65] = { 0, 0, 187, 374, 558, 745, 931,
        1118, 1305, 1489, 1676, 1863, 2050, 2234, 2421, 2607, 2794, 2978, 3165,
        3352, 3539, 3723, 3910, 4097, 4283, 4468, 4654, 4841, 5028, 5215, 5399,
        5586, 5773, 5959, 6144, 6330, 6517, 6704, 6888, 7075, 7262, 7449, 7633,
        7820, 8006, 8193, 8380, 8564, 8751, 8938, 9125, 9309, 9496, 9683, 9869,
        10054, 10240, 10427, 10614, 10798, 10985, 11172, 11359, 11545, 11730 };
    //
    const uint16_t moogInvertedTimeAttack9[65] = { 0, 0, 236, 474, 713, 952, 1187,
        1426, 1665, 1904, 2143, 2378, 2617, 2856, 3095, 3330, 3569, 3808, 4047,
        4282, 4521, 4760, 4998, 5234, 5473, 5712, 5950, 6189, 6425, 6664, 6902,
        7141, 7377, 7615, 7854, 8093, 8329, 8567, 8806, 9045, 9281, 9519, 9758,
        9997, 10232, 10471, 10710, 10949, 11188, 11423, 11662, 11901, 12140,
        12375, 12614, 12853, 13091, 13327, 13566, 13805, 14043, 14279, 14518,
        14757, 14995 };
    //
    
    const uint16_t moogInvertedTimeRelease1[65] = { 601, 606, 659, 855, 1277, 1992,
        3041, 4438, 6168, 8202, 10487, 12958, 15548, 18177, 20772, 23253, 25556,
        27615, 29376, 30798, 31849, 32508, 32767, 32633, 32117, 31246, 30053,
        28579, 26874, 24991, 22986, 20915, 18833, 16798, 14858, 13059, 11441,
        10039, 8878, 7975, 7341, 6978, 6876, 7026, 7408, 7993, 8754, 9655,
        10660, 11731, 12828, 13914, 14955, 15917, 16770, 17490, 18055, 18449,
        18668, 18701, 18556, 18235, 17749, 17116, 16352 };
    //
    const uint16_t moogInvertedTimeRelease2[65] = { 19, 0, 316, 1216, 2860, 5279,
        8387, 12017, 15937, 19899, 23651, 26963, 29641, 31547, 32600, 32767,
        32090, 30644, 28563, 26004, 23146, 20178, 17287, 14635, 12368, 10593,
        9381, 8764, 8733, 9246, 10223, 11564, 13152, 14859, 16562, 18141, 19490,
        20533, 21209, 21487, 21364, 20861, 20021, 18910, 17603, 16183, 14735,
        13346, 12083, 11014, 10179, 9606, 9306, 9271, 9475, 9880, 10436, 11091,
        11783, 12457, 13063, 13552, 13891, 14059, 14043 };
    //
    const uint16_t moogInvertedTimeRelease3[65] = { 0, 173, 1482, 4453, 9020, 14645,
        20544, 25889, 29980, 32338, 32767, 31362, 28458, 24569, 20305, 16266,
        12974, 10791, 9901, 10282, 11746, 13968, 16546, 19066, 21159, 22548,
        23085, 22745, 21633, 19947, 17956, 15938, 14150, 12802, 12014, 11822,
        12176, 12953, 13986, 15080, 16058, 16770, 17117, 17061, 16622, 15875,
        14925, 13901, 12930, 12116, 11535, 11226, 11179, 11360, 11695, 12100,
        12490, 12791, 12941, 12913, 12703, 12333, 11848, 11297, 10742 };
    //
    const uint16_t moogInvertedTimeRelease4[65] = { 0, 1184, 5690, 13385, 22111,
        29221, 32767, 32105, 27941, 21939, 16102, 12112, 10875, 12348, 15677,
        19562, 22712, 24224, 23811, 21803, 18967, 16217, 14314, 13674, 14269,
        15705, 17389, 18729, 19321, 19032, 18018, 16629, 15285, 14331, 13954,
        14140, 14709, 15386, 15907, 16081, 15854, 15296, 14571, 13867, 13344,
        13085, 13080, 13252, 13470, 13615, 13603, 13406, 13059, 12637, 12224,
        11896, 11690, 11598, 11587, 11596, 11570, 11472, 11291, 11043, 10758 };
    //
    const uint16_t moogInvertedTimeRelease5[65] = { 11, 4303, 15517, 27493, 32767,
        29207, 20652, 13360, 11591, 15293, 20970, 24551, 24069, 20511, 16608,
        14789, 15697, 18128, 20148, 20456, 19080, 17112, 15800, 15745, 16633,
        17617, 17952, 17445, 16478, 15640, 15334, 15546, 15937, 16119, 15914,
        15421, 14900, 14583, 14524, 14608, 14647, 14521, 14238, 13901, 13627,
        13474, 13410, 13353, 13232, 13033, 12789, 12561, 12383, 12253, 12141,
        12006, 11835, 11639, 11438, 11260, 11102, 10961, 10815, 10653, 10475 };
    //
    const uint16_t moogInvertedTimeRelease6[65] = { 852, 13420, 31352, 32767, 20265,
        13033, 18430, 26032, 25531, 19552, 16839, 19659, 22755, 21966, 19124,
        18117, 19477, 20638, 19983, 18608, 18204, 18788, 19139, 18662, 17958,
        17747, 17937, 17958, 17610, 17209, 17046, 17041, 16934, 16666, 16396,
        16238, 16141, 15985, 15763, 15547, 15386, 15243, 15072, 14873, 14681,
        14513, 14350, 14174, 13987, 13805, 13632, 13462, 13284, 13101, 12921,
        12749, 12573, 12396, 12216, 12038, 11863, 11688, 11510, 11332, 11155 };
    //
    const uint16_t moogInvertedTimeRelease7[65] = { 3733, 29765, 32767, 16040,
        22992, 29070, 20996, 21279, 25691, 22659, 21185, 23453, 22691, 21289,
        22113, 22102, 21177, 21276, 21372, 20839, 20653, 20663, 20351, 20096,
        20010, 19795, 19547, 19395, 19211, 18985, 18803, 18622, 18414, 18220,
        18036, 17836, 17639, 17450, 17255, 17061, 16869, 16674, 16480, 16285,
        16094, 15899, 15705, 15510, 15316, 15121, 14929, 14735, 14540, 14346,
        14154, 13959, 13765, 13570, 13378, 13184, 12989, 12795, 12603, 12409,
        12214 };
    //
    const uint16_t moogInvertedTimeRelease8[65] = { 9846, 32767, 16681, 27479,
        20168, 24275, 21747, 22640, 22134, 21857, 21949, 21430, 21558, 21110,
        21125, 20793, 20706, 20458, 20309, 20102, 19925, 19736, 19549, 19365,
        19176, 18994, 18805, 18620, 18434, 18247, 18060, 17876, 17689, 17502,
        17315, 17129, 16944, 16758, 16571, 16384, 16200, 16013, 15826, 15639,
        15455, 15268, 15082, 14895, 14711, 14524, 14337, 14150, 13963, 13779,
        13592, 13406, 13219, 13035, 12848, 12661, 12474, 12290, 12103, 11916,
        11730 };
    //
    const uint16_t moogInvertedTimeRelease9[65] = { 23726, 27047, 32767, 29242,
        28371, 29513, 28908, 28355, 28375, 28136, 27812, 27609, 27384, 27128,
        26893, 26661, 26419, 26180, 25944, 25705, 25467, 25231, 24992, 24753,
        24515, 24279, 24040, 23802, 23563, 23327, 23088, 22850, 22611, 22372,
        22136, 21898, 21659, 21420, 21185, 20946, 20707, 20468, 20233, 19994,
        19755, 19516, 19281, 19042, 18803, 18564, 18325, 18090, 17851, 17612,
        17374, 17138, 16899, 16660, 16422, 16186, 15947, 15708, 15470, 15234,
        14995 };
    //
    const uint16_t moogSquareShiftedAttack1[65] = { 0, 0, 77, 253, 511, 839, 1222,
        1647, 2101, 2572, 3047, 3519, 3977, 4414, 4822, 5197, 5535, 5834, 6091,
        6304, 6476, 6605, 6696, 6750, 6769, 6757, 6718, 6654, 6570, 6470, 6358,
        6237, 6110, 5980, 5851, 5724, 5604, 5501, 5454, 5511, 5720, 6116, 6724,
        7549, 8587, 9819, 11223, 12768, 14419, 16139, 17895, 19648, 21369,
        23027, 24599, 26061, 27396, 28592, 29638, 30531, 31268, 31852, 32284,
        32576, 32733 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftedAttack2[65] = { 0, 130, 465, 958, 1563, 2237,
        2940, 3635, 4294, 4893, 5416, 5851, 6193, 6440, 6598, 6671, 6671, 6609,
        6497, 6348, 6172, 5985, 5793, 5607, 5434, 5281, 5149, 5041, 4961, 4904,
        4873, 4862, 4870, 4893, 4929, 4973, 5022, 5075, 5127, 5176, 5221, 5260,
        5293, 5319, 5338, 5351, 5408, 5645, 6217, 7219, 8681, 10567, 12798,
        15268, 17859, 20455, 22952, 25260, 27311, 29053, 30461, 31523, 32246,
        32651, 32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftedAttack3[65] = { 0, 517, 1350, 2363, 3420, 4411,
        5258, 5912, 6357, 6594, 6649, 6555, 6357, 6094, 5806, 5528, 5281, 5082,
        4940, 4856, 4824, 4837, 4882, 4947, 5025, 5102, 5173, 5232, 5277, 5306,
        5319, 5319, 5310, 5293, 5274, 5252, 5232, 5214, 5201, 5192, 5187, 5186,
        5187, 5191, 5197, 5202, 5207, 5213, 5217, 5220, 5221, 5232, 5442, 6323,
        8190, 11033, 14593, 18493, 22345, 25822, 28688, 30810, 32156, 32767,
        32754 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftedAttack4[65] = { 0, 392, 1616, 3172, 4645, 5771,
        6437, 6654, 6522, 6174, 5748, 5355, 5058, 4889, 4840, 4883, 4980, 5097,
        5202, 5280, 5323, 5333, 5321, 5292, 5261, 5232, 5213, 5202, 5199, 5203,
        5212, 5220, 5228, 5232, 5235, 5236, 5235, 5232, 5229, 5228, 5227, 5227,
        5225, 5227, 5227, 5228, 5228, 5228, 5228, 5228, 5228, 5228, 5228, 5228,
        5228, 5228, 5270, 6072, 8870, 13678, 19462, 24962, 29235, 31832, 32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftedAttack5[65] = { 0, 515, 2636, 4827, 6186, 6531,
        6163, 5535, 5011, 4754, 4750, 4893, 5060, 5177, 5217, 5199, 5154, 5111,
        5088, 5085, 5094, 5106, 5116, 5121, 5120, 5117, 5113, 5111, 5110, 5111,
        5113, 5113, 5113, 5113, 5113, 5113, 5113, 5113, 5113, 5113, 5113, 5113,
        5113, 5113, 5113, 5113, 5113, 5113, 5113, 5113, 5113, 5113, 5113, 5113,
        5113, 5113, 5113, 5113, 5113, 5286, 7988, 15104, 23691, 30097, 32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftedAttack6[65] = { 0, 531, 3910, 5986, 5955, 5043,
        4436, 4412, 4656, 4833, 4849, 4784, 4732, 4725, 4742, 4757, 4759, 4755,
        4751, 4751, 4751, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752,
        4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752,
        4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752,
        4752, 4752, 4752, 4752, 4752, 4752, 4752, 5423, 13056, 25734, 32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftedAttack7[65] = { 0, 3094, 6087, 5333, 4465, 4643,
        4894, 4853, 4782, 4790, 4810, 4809, 4803, 4803, 4805, 4805, 4805, 4805,
        4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805,
        4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805,
        4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805,
        4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 6973, 22516, 32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftedAttack8[65] = { 0, 2457, 4246, 2961, 3357, 3344,
        3291, 3320, 3314, 3312, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314,
        3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314,
        3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314,
        3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314,
        3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 3314, 9862, 32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftedAttack9[65] = { 0, 3162, 2547, 2646, 2636, 2636,
        2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636,
        2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636,
        2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636,
        2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636,
        2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 2636, 16681, 32767 };
    //phase-aligned squarewave through ladder filter
    
    const uint16_t moogSquareShiftRelease1[65] = { 185, 473, 904, 1484, 2219, 3110,
        4155, 5350, 6687, 8149, 9722, 11383, 13107, 14866, 16626, 18353, 20011,
        21565, 22979, 24222, 25269, 26106, 26725, 27133, 27353, 27421, 27381,
        27288, 27175, 27054, 26929, 26800, 26671, 26544, 26423, 26311, 26213,
        26130, 26067, 26027, 26017, 26037, 26091, 26183, 26313, 26485, 26699,
        26957, 27254, 27594, 27969, 28377, 28813, 29271, 29741, 30215, 30684,
        31137, 31559, 31940, 32265, 32521, 32692, 32767, 32733 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftRelease2[65] = { 118, 525, 1249, 2312, 3722, 5467,
        7519, 9828, 12328, 14926, 17518, 19987, 22218, 24103, 25563, 26562,
        27130, 27362, 27413, 27419, 27433, 27452, 27478, 27511, 27550, 27595,
        27644, 27695, 27747, 27797, 27841, 27878, 27901, 27909, 27898, 27867,
        27811, 27729, 27622, 27492, 27337, 27164, 26979, 26787, 26600, 26425,
        26275, 26162, 26101, 26100, 26174, 26331, 26578, 26919, 27353, 27875,
        28474, 29132, 29828, 30529, 31204, 31808, 32302, 32638, 32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftRelease3[65] = { 0, 614, 1959, 4083, 6947, 10425,
        14278, 18178, 21738, 24581, 26448, 27327, 27537, 27537, 27548, 27550,
        27552, 27556, 27562, 27567, 27573, 27578, 27582, 27584, 27582, 27577,
        27569, 27555, 27537, 27517, 27495, 27476, 27460, 27450, 27450, 27464,
        27492, 27537, 27596, 27667, 27745, 27822, 27888, 27933, 27945, 27914,
        27829, 27687, 27488, 27241, 26963, 26676, 26414, 26215, 26121, 26175,
        26412, 26856, 27511, 28358, 29350, 30406, 31419, 32253, 32754 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftRelease4[65] = { 936, 3533, 7806, 13306, 19090,
        23898, 26696, 27498, 27498, 27540, 27540, 27540, 27540, 27540, 27540,
        27540, 27540, 27540, 27540, 27540, 27541, 27541, 27543, 27541, 27541,
        27540, 27539, 27536, 27533, 27532, 27533, 27536, 27540, 27548, 27556,
        27565, 27569, 27566, 27555, 27536, 27507, 27476, 27447, 27435, 27445,
        27488, 27566, 27671, 27788, 27885, 27928, 27879, 27710, 27413, 27020,
        26594, 26246, 26114, 26331, 26997, 28123, 29596, 31152, 32376, 32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftRelease5[65] = { 2671, 9077, 17664, 24780, 27482,
        27482, 27655, 27655, 27655, 27655, 27655, 27655, 27655, 27655, 27655,
        27655, 27655, 27655, 27655, 27655, 27655, 27655, 27655, 27655, 27655,
        27655, 27655, 27655, 27655, 27655, 27655, 27655, 27655, 27655, 27655,
        27657, 27658, 27657, 27655, 27651, 27648, 27647, 27652, 27662, 27674,
        27683, 27680, 27657, 27614, 27569, 27551, 27591, 27708, 27875, 28018,
        28014, 27757, 27233, 26605, 26237, 26582, 27941, 30132, 32253, 32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftRelease6[65] = { 7034, 19712, 27345, 27345, 28016,
        28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016,
        28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016,
        28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016,
        28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016, 28016, 28017,
        28017, 28017, 28013, 28009, 28011, 28026, 28043, 28036, 27984, 27919,
        27935, 28112, 28356, 28332, 27725, 26813, 26782, 28858, 32237, 32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftRelease7[65] = { 10252, 25795, 25795, 27963,
        27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963,
        27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963,
        27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963,
        27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963, 27963,
        27963, 27963, 27963, 27963, 27963, 27963, 27963, 27965, 27965, 27959,
        27958, 27978, 27986, 27915, 27874, 28125, 28303, 27435, 26681, 29674,
        32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftRelease8[65] = { 22906, 22906, 29454, 29454,
        29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454,
        29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454,
        29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454,
        29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454,
        29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454, 29454,
        29454, 29456, 29454, 29448, 29477, 29424, 29411, 29807, 28522, 30311,
        32767 };
    //phase-aligned squarewave through ladder filter
    const uint16_t moogSquareShiftRelease9[65] = { 16087, 16087, 30132, 30132,
        30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132,
        30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132,
        30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132,
        30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132,
        30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132, 30132,
        30132, 30132, 30132, 30132, 30132, 30132, 30132, 30122, 30221, 29606,
        32767 };
    //phase-aligned squarewave through ladder filter
    
    const uint16_t moogImpossibleTri1[65] = { 0, 154, 509, 1088, 1885, 2866, 3975,
        5134, 6255, 7241, 8008, 8486, 8642, 8470, 8005, 7326, 6537, 5772, 5166,
        4854, 4942, 5499, 6546, 8045, 9898, 11958, 14041, 15942, 17461, 18427,
        18716, 18283, 17158, 15460, 13390, 11208, 9212, 7704, 6953, 7162, 8433,
        10752, 13979, 17845, 21991, 25983, 29375, 31746, 32767, 32245, 30148,
        26638, 22053, 16890, 11736, 7188, 3734, 1624, 744, 589, 495, 430, 286,
        126, 10 };
    const uint16_t moogImpossibleTri2[65] = { 0, 73, 287, 663, 1139, 1691, 2273,
        2823, 3278, 3597, 3766, 3810, 3798, 3815, 3956, 4291, 4851, 5601, 6460,
        7300, 7980, 8387, 8468, 8246, 7838, 7423, 7206, 7366, 8007, 9108, 10525,
        12006, 13249, 13974, 14006, 13336, 12146, 10785, 9696, 9306, 9911,
        11572, 14071, 16932, 19512, 21163, 21400, 20060, 17391, 14036, 10915,
        9006, 9089, 11504, 15997, 21714, 27352, 31447, 32767, 30672, 25370,
        17960, 10222, 4072, 759 };
    const uint16_t moogImpossibleTri3[65] = { 0, 44, 304, 654, 971, 1269, 1570,
        1903, 2282, 2696, 3107, 3478, 3779, 4025, 4267, 4566, 4961, 5443, 5946,
        6376, 6662, 6815, 6923, 7124, 7526, 8136, 8834, 9419, 9719, 9701, 9526,
        9479, 9832, 10660, 11769, 12738, 13158, 12864, 12102, 11459, 11573,
        12743, 14680, 16561, 17422, 16731, 14803, 12786, 12123, 13720, 17277,
        21214, 23392, 22304, 18157, 13085, 10252, 12087, 18648, 27079, 32767,
        31839, 23701, 12036, 2952 };
    const uint16_t moogImpossibleTri4[65] = { 0, 181, 519, 854, 1193, 1535, 1877,
        2213, 2546, 2881, 3225, 3573, 3912, 4240, 4566, 4908, 5266, 5618, 5944,
        6252, 6578, 6944, 7329, 7672, 7954, 8234, 8588, 9022, 9430, 9707, 9897,
        10172, 10650, 11206, 11565, 11636, 11690, 12112, 12911, 13576, 13614,
        13233, 13282, 14301, 15675, 16100, 15140, 14126, 14897, 17448, 19326,
        18193, 15079, 14073, 17720, 23006, 23676, 17748, 11657, 14187, 25168,
        32767, 25904, 9555, 486 };
    const uint16_t moogImpossibleTri5[65] = { 0, 351, 704, 1055, 1409, 1759, 2113,
        2465, 2817, 3169, 3521, 3873, 4226, 4579, 4930, 5282, 5634, 5988, 6340,
        6689, 7044, 7397, 7746, 8098, 8455, 8808, 9151, 9505, 9871, 10214,
        10551, 10921, 11293, 11608, 11945, 12356, 12713, 12972, 13351, 13836,
        14100, 14279, 14830, 15375, 15356, 15542, 16524, 16906, 16283, 16939,
        18678, 18069, 16635, 19099, 21438, 17844, 16556, 23546, 24044, 14164,
        17943, 32767, 22713, 2199, 40 };
    const uint16_t moogImpossibleTri6[65] = { 0, 363, 726, 1089, 1452, 1814, 2177,
        2541, 2903, 3267, 3629, 3993, 4355, 4719, 5080, 5444, 5807, 6170, 6533,
        6896, 7259, 7622, 7985, 8348, 8710, 9073, 9437, 9799, 10163, 10525,
        10889, 11251, 11615, 11978, 12338, 12705, 13064, 13430, 13793, 14151,
        14527, 14869, 15255, 15605, 15954, 16372, 16633, 17128, 17377, 17753,
        18304, 18207, 19280, 18866, 19685, 20466, 18993, 22827, 18613, 23013,
        22695, 16973, 32767, 7223, 902 };
    const uint16_t moogImpossibleTri7[65] = { 0, 488, 980, 1470, 1959, 2449, 2939,
        3429, 3919, 4409, 4899, 5390, 5878, 6370, 6858, 7349, 7838, 8329, 8817,
        9309, 9797, 10289, 10778, 11268, 11758, 12248, 12738, 13228, 13718,
        14207, 14699, 15187, 15679, 16167, 16658, 17147, 17638, 18126, 18618,
        19106, 19598, 20089, 20577, 21069, 21557, 22045, 22540, 23021, 23521,
        24008, 24479, 25025, 25430, 25979, 26545, 26698, 27811, 27662, 28078,
        30423, 26585, 32767, 30713, 21040, 4755 };
    const uint16_t moogImpossibleTri8[65] = { 0, 551, 1103, 1656, 2205, 2758, 3308,
        3861, 4410, 4964, 5513, 6066, 6616, 7169, 7720, 8272, 8823, 9374, 9926,
        10477, 11028, 11579, 12133, 12682, 13235, 13785, 14338, 14887, 15441,
        15990, 16543, 17094, 17646, 18197, 18748, 19300, 19851, 20402, 20954,
        21507, 22056, 22609, 23159, 23712, 24262, 24815, 25364, 25917, 26469,
        27020, 27571, 28123, 28674, 29227, 29782, 30339, 30898, 31453, 31980,
        32433, 32726, 32767, 32558, 31413, 14624 };
    const uint16_t moogImpossibleTri9[65] = { 0, 505, 1010, 1515, 2022, 2525, 3031,
        3535, 4041, 4545, 5051, 5554, 6061, 6566, 7071, 7576, 8081, 8586, 9091,
        9596, 10101, 10606, 11111, 11617, 12121, 12627, 13130, 13637, 14140,
        14647, 15150, 15657, 16162, 16667, 17172, 17677, 18182, 18687, 19192,
        19697, 20203, 20706, 21213, 21716, 22223, 22726, 23233, 23736, 24243,
        24748, 25253, 25758, 26263, 26768, 27273, 27776, 28282, 28791, 29273,
        29851, 30250, 30580, 32767, 26808, 25213 };
    
    const uint16_t twoStep[65] = { 0, 164, 645, 1415, 2427, 3621, 4926, 6263, 7551,
        8715, 9683, 10398, 10818, 10923, 10923, 10923, 10923, 10923, 10923,
        10923, 10923, 10923, 10923, 10923, 10923, 10923, 10949, 11242, 11843,
        12716, 13809, 15057, 16384, 17711, 18958, 20051, 20925, 21526, 21819,
        21845, 21845, 21845, 21845, 21845, 21845, 21845, 21845, 21845, 21845,
        21845, 21845, 21845, 21950, 22369, 23085, 24053, 25217, 26505, 27842,
        29146, 30341, 31353, 32123, 32604, 32767 };
    const uint16_t twoStepPlateau[65] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10,
        353, 1165, 2399, 3980, 5814, 7790, 9790, 11695, 13389, 14772, 15760,
        16295, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384,
        16384, 16384, 16384, 16384, 16473, 17008, 17996, 19379, 21073, 22978,
        24978, 26954, 28788, 30369, 31603, 32415, 32758, 32767, 32767, 32767,
        32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t threeStep[65] = { 0, 239, 930, 1990, 3297, 4697, 6027, 7131,
        7880, 8187, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8315,
        8882, 9848, 11099, 12489, 13855, 15039, 15900, 16340, 16384, 16384,
        16384, 16384, 16384, 16384, 16384, 16384, 16384, 16428, 16868, 17729,
        18913, 20279, 21669, 22920, 23886, 24453, 24576, 24576, 24576, 24576,
        24576, 24576, 24576, 24576, 24576, 24581, 24888, 25637, 26741, 28071,
        29471, 30778, 31838, 32529, 32767 };
    const uint16_t threeStepPlateau[65] = { 0, 0, 0, 0, 0, 0, 0, 0, 312, 1345, 2907,
        4697, 6372, 7609, 8172, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8368,
        9253, 10721, 12489, 14219, 15578, 16305, 16384, 16384, 16384, 16384,
        16384, 16384, 16384, 16463, 17190, 18549, 20279, 22047, 23515, 24400,
        24576, 24576, 24576, 24576, 24576, 24576, 24576, 24596, 25159, 26396,
        28071, 29861, 31423, 32456, 32767, 32767, 32767, 32767, 32767, 32767,
        32767, 32767 };
    const uint16_t fourStep[65] = { 0, 315, 1198, 2481, 3916, 5229, 6167, 6550,
        6554, 6554, 6554, 6554, 6554, 6554, 6554, 6745, 7513, 8726, 10152,
        11515, 12555, 13072, 13107, 13107, 13107, 13107, 13107, 13107, 13107,
        13205, 13851, 14983, 16384, 17785, 18917, 19563, 19661, 19661, 19661,
        19661, 19661, 19661, 19661, 19696, 20213, 21253, 22616, 24042, 25255,
        26023, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26218, 26601,
        27539, 28852, 30287, 31570, 32453, 32767 };
    const uint16_t fourStepPlateau[65] = { 0, 0, 0, 0, 0, 0, 16, 645, 2023, 3758,
        5356, 6362, 6554, 6554, 6554, 6554, 6554, 6554, 6695, 7630, 9191, 10934,
        12363, 13072, 13107, 13107, 13107, 13107, 13107, 13107, 13494, 14699,
        16384, 18069, 19274, 19661, 19661, 19661, 19661, 19661, 19661, 19696,
        20405, 21834, 23577, 25138, 26073, 26214, 26214, 26214, 26214, 26214,
        26214, 26406, 27412, 29010, 30745, 32123, 32752, 32767, 32767, 32767,
        32767, 32767, 32767 };
    const uint16_t fiveStep[65] = { 0, 388, 1443, 2865, 4248, 5199, 5461, 5461,
        5461, 5461, 5461, 5461, 5514, 6169, 7399, 8855, 10123, 10841, 10923,
        10923, 10923, 10923, 10923, 10923, 11131, 12027, 13386, 14821, 15924,
        16381, 16384, 16384, 16384, 16384, 16384, 16387, 16844, 17947, 19382,
        20741, 21637, 21845, 21845, 21845, 21845, 21845, 21845, 21927, 22644,
        23908, 25362, 26590, 27243, 27296, 27296, 27296, 27296, 27296, 27296,
        27558, 28512, 29898, 31322, 32379, 32767 };
    const uint16_t fiveStepPlateau[65] = { 0, 0, 0, 0, 0, 3, 620, 2067, 3776, 5073,
        5461, 5461, 5461, 5461, 5461, 5491, 6261, 7791, 9479, 10660, 10923,
        10923, 10923, 10923, 10923, 11005, 11921, 13519, 15170, 16224, 16384,
        16384, 16384, 16384, 16384, 16544, 17598, 19249, 20847, 21763, 21845,
        21845, 21845, 21845, 21845, 22107, 23286, 24970, 26498, 27266, 27296,
        27299, 27302, 27305, 27307, 27695, 28992, 30701, 32148, 32765, 32767,
        32767, 32767, 32767, 32767 };
    
    const uint16_t ascendingAdditiveClamp2[65] = { 0, 174, 692, 1533, 2670, 4061,
        5659, 7408, 9247, 11114, 12943, 14674, 16250, 17620, 18740, 19579,
        20115, 20338, 20249, 19865, 19210, 18320, 17243, 16030, 14740, 13434,
        12175, 11024, 10038, 9268, 8757, 8540, 8638, 9064, 9816, 10881, 12234,
        13840, 15653, 17620, 19682, 21776, 23839, 25806, 27617, 29219, 30563,
        31611, 32337, 32724, 32767, 32767, 32767, 32767, 32767, 32767, 32767,
        32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t ascendingAdditiveClamp3[65] = { 0, 305, 1210, 2681, 4662, 7081,
        9847, 12856, 15997, 19154, 22207, 25043, 27558, 29656, 31260, 32311,
        32767, 32615, 31858, 30524, 28664, 26347, 23659, 20700, 17581, 14418,
        11328, 8427, 5822, 3612, 1878, 685, 77, 77, 685, 1878, 3612, 5822, 8427,
        11328, 14418, 17581, 20700, 23659, 26347, 28664, 30524, 31858, 32615,
        32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767,
        32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t ascendingAdditiveClamp4[65] = { 0, 546, 2146, 4690, 8002, 11857,
        15994, 20138, 24021, 27398, 30067, 31883, 32767, 32711, 31771, 30067,
        27768, 25078, 22217, 19406, 16844, 14699, 13090, 12084, 11688, 11857,
        12495, 13470, 14627, 15804, 16844, 17618, 18030, 18030, 17618, 16844,
        15804, 14627, 13470, 12495, 11857, 11688, 12084, 13090, 14699, 16844,
        19406, 22217, 25078, 27768, 30067, 31771, 32711, 32767, 32767, 32767,
        32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t ascendingAdditiveClamp5[65] = { 0, 685, 2681, 5822, 9847, 14418,
        19154, 23659, 27558, 30524, 32311, 32767, 31858, 29656, 26347, 22207,
        17581, 12856, 8427, 4662, 1878, 305, 77, 1210, 3612, 7081, 11328, 15997,
        20700, 25043, 28664, 31260, 32615, 32615, 31260, 28664, 25043, 20700,
        15997, 11328, 7081, 3612, 1210, 77, 305, 1878, 4662, 8427, 12856, 17581,
        22207, 26347, 29656, 31858, 32767, 32767, 32767, 32767, 32767, 32767,
        32767, 32767, 32767, 32767, 32767 };
    const uint16_t ascendingAdditiveClamp6[65] = { 0, 995, 3857, 8231, 13575, 19238,
        24536, 28848, 31688, 32767, 32029, 29640, 25969, 21528, 16898, 12651,
        9275, 7113, 6324, 6875, 8560, 11034, 13880, 16669, 19029, 20692, 21528,
        21558, 20934, 19908, 18776, 17829, 17292, 17292, 17829, 18776, 19908,
        20934, 21558, 21528, 20692, 19029, 16669, 13880, 11034, 8560, 6875,
        6324, 7113, 9275, 12651, 16898, 21528, 25969, 29640, 32029, 32767,
        32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t ascendingAdditiveClamp7[65] = { 0, 1210, 4662, 9847, 15997,
        22207, 27558, 31260, 32767, 31858, 28664, 23659, 17581, 11328, 5822,
        1878, 77, 685, 3612, 8427, 14418, 20700, 26347, 30524, 32615, 32311,
        29656, 25043, 19154, 12856, 7081, 2681, 305, 305, 2681, 7081, 12856,
        19154, 25043, 29656, 32311, 32615, 30524, 26347, 20700, 14418, 8427,
        3612, 685, 77, 1878, 5822, 11328, 17581, 23659, 28664, 31858, 32767,
        32767, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t ascendingAdditiveClamp8[65] = { 0, 1592, 6053, 12507, 19693,
        26222, 30859, 32767, 31665, 27868, 22207, 15845, 10030, 5839, 3969,
        4618, 7471, 11799, 16637, 20998, 24086, 25445, 25027, 23165, 20461,
        17623, 15286, 13877, 13523, 14058, 15096, 16157, 16812, 16812, 16157,
        15096, 14058, 13523, 13877, 15286, 17623, 20461, 23165, 25027, 25445,
        24086, 20998, 16637, 11799, 7471, 4618, 3969, 5839, 10030, 15845, 22207,
        27868, 31665, 32767, 32767, 32767, 32767, 32767, 32767, 32767 };
    const uint16_t ascendingAdditiveClamp9[65] = { 0, 1904, 7181, 14622, 22521,
        29070, 32767, 32767, 29070, 22521, 14622, 7181, 1904, 0, 1904, 7181,
        14622, 22521, 29070, 32767, 32767, 29070, 22521, 14622, 7181, 1904, 0,
        1904, 7181, 14622, 22521, 29070, 32767, 32767, 29070, 22521, 14622,
        7181, 1904, 0, 1904, 7181, 14622, 22521, 29070, 32767, 32767, 29070,
        22521, 14622, 7181, 1904, 0, 1904, 7181, 14622, 22521, 29070, 32767,
        32767, 32767, 32767, 32767, 32767, 32767 };
    
    
    const uint16_t sine[65] = { 0, 38, 115, 229, 381, 571, 797, 1060, 1359, 1693,
        2061, 2462, 2896, 3362, 3858, 4383, 4936, 5516, 6122, 6751, 7403, 8076,
        8768, 9478, 10204, 10944, 11698, 12462, 13235, 14016, 14802, 15592,
        16384, 17176, 17966, 18752, 19533, 20306, 21070, 21824, 22564, 23290,
        24000, 24692, 25365, 26017, 26646, 27252, 27832, 28385, 28910, 29406,
        29872, 30306, 30707, 31075, 31409, 31708, 31971, 32197, 32387, 32539,
        32653, 32730, 32767 };
    
    
    const uint16_t imp1[129] = {0, 4, 19, 44, 78, 123, 177, 241, 314, 398, 490, 593, 705, 826, 957, 1097, 1247, 1405, 1572, 1749, 1934, 2128, 2330, 2541, 2761, 2988, 3224, 3467, 3718, 3977, 4244, 4517, 4798, 5086, 5381, 5682, 5989, 6303, 6623, 6949, 7281, 7618, 7960, 8308, 8660, 9017, 9378, 9744, 10113, 10487, 10864, 11244, 11627, 12013, 12402, 12793, 13187, 13582, 13979, 14377, 14777, 15178, 15579, 15981, 16383, 16785, 17187, 17588, 17989, 18389, 18787, 19184, 19579, 19973, 20364, 20753, 21139, 21522, 21902, 22279, 22653, 23022, 23388, 23749, 24106, 24458, 24806, 25148, 25485, 25817, 26143, 26463, 26777, 27084, 27385, 27680, 27968, 28249, 28522, 28789, 29048, 29299, 29542, 29778, 30005, 30225, 30436, 30638, 30832, 31017, 31194, 31361, 31519, 31669, 31809, 31940, 32061, 32173, 32276, 32368, 32452, 32525, 32589, 32643, 32688, 32722, 32747, 32762, 32767};
    const uint16_t imp2[129] = {0, 11, 45, 101, 180, 281, 404, 549, 715, 903, 1112, 1342, 1592, 1862, 2152, 2461, 2788, 3133, 3496, 3876, 4272, 4684, 5111, 5552, 6007, 6475, 6955, 7446, 7949, 8461, 8983, 9512, 10050, 10595, 11145, 11701, 12261, 12825, 13391, 13960, 14529, 15100, 15670, 16238, 16805, 17370, 17931, 18488, 19040, 19587, 20127, 20661, 21188, 21707, 22217, 22718, 23210, 23692, 24163, 24624, 25073, 25510, 25935, 26348, 26749, 27136, 27510, 27871, 28219, 28553, 28873, 29180, 29472, 29751, 30017, 30268, 30506, 30730, 30941, 31139, 31323, 31495, 31655, 31802, 31937, 32060, 32172, 32272, 32363, 32442, 32512, 32573, 32624, 32667, 32701, 32728, 32747, 32760, 32766, 32766, 32761, 32751, 32737, 32718, 32696, 32671, 32643, 32613, 32581, 32548, 32513, 32479, 32444, 32409, 32374, 32341, 32309, 32278, 32249, 32222, 32197, 32175, 32155, 32138, 32124, 32113, 32105, 32100, 32098};
    const uint16_t imp3[129] = {0, 22, 90, 202, 359, 560, 805, 1092, 1420, 1789, 2197, 2643, 3125, 3643, 4193, 4775, 5386, 6025, 6690, 7378, 8087, 8815, 9560, 10320, 11092, 11874, 12664, 13459, 14257, 15056, 15854, 16648, 17437, 18217, 18988, 19748, 20494, 21225, 21939, 22635, 23310, 23965, 24597, 25206, 25791, 26350, 26883, 27389, 27868, 28320, 28744, 29140, 29508, 29848, 30161, 30447, 30706, 30939, 31147, 31330, 31489, 31624, 31738, 31831, 31904, 31959, 31995, 32016, 32022, 32014, 31993, 31962, 31921, 31871, 31814, 31752, 31685, 31614, 31542, 31468, 31394, 31322, 31251, 31184, 31120, 31061, 31007, 30958, 30917, 30882, 30854, 30834, 30821, 30817, 30820, 30831, 30851, 30878, 30912, 30954, 31002, 31057, 31118, 31184, 31255, 31331, 31410, 31493, 31577, 31664, 31751, 31839, 31926, 32012, 32096, 32178, 32256, 32331, 32402, 32467, 32527, 32582, 32630, 32671, 32705, 32732, 32751, 32763, 32767};
    const uint16_t imp4[129] = {0, 37, 151, 340, 603, 939, 1345, 1820, 2361, 2965, 3629, 4349, 5122, 5942, 6807, 7711, 8650, 9619, 10613, 11628, 12657, 13697, 14742, 15787, 16828, 17860, 18879, 19881, 20860, 21815, 22740, 23633, 24491, 25311, 26091, 26829, 27524, 28173, 28776, 29332, 29842, 30304, 30720, 31091, 31416, 31697, 31937, 32135, 32295, 32419, 32509, 32567, 32595, 32597, 32576, 32533, 32473, 32396, 32307, 32208, 32102, 31991, 31877, 31763, 31651, 31543, 31441, 31345, 31259, 31182, 31116, 31062, 31020, 30991, 30975, 30971, 30981, 31002, 31036, 31081, 31136, 31201, 31274, 31355, 31442, 31535, 31631, 31729, 31829, 31929, 32028, 32124, 32217, 32305, 32387, 32463, 32532, 32592, 32644, 32688, 32722, 32746, 32761, 32767, 32763, 32750, 32729, 32700, 32664, 32621, 32572, 32518, 32460, 32399, 32336, 32272, 32207, 32144, 32082, 32023, 31967, 31917, 31871, 31831, 31797, 31771, 31752, 31740, 31736};
    const uint16_t imp5[129] = {0, 56, 225, 504, 892, 1386, 1981, 2673, 3456, 4324, 5269, 6286, 7365, 8498, 9677, 10893, 12138, 13401, 14675, 15950, 17218, 18471, 19700, 20899, 22060, 23177, 24245, 25259, 26213, 27106, 27932, 28692, 29383, 30004, 30556, 31039, 31455, 31806, 32095, 32324, 32497, 32618, 32692, 32722, 32715, 32673, 32604, 32510, 32398, 32273, 32137, 31997, 31856, 31717, 31585, 31461, 31350, 31252, 31171, 31106, 31059, 31031, 31021, 31029, 31056, 31098, 31157, 31229, 31313, 31408, 31511, 31620, 31733, 31849, 31964, 32076, 32185, 32288, 32384, 32470, 32547, 32612, 32666, 32707, 32736, 32753, 32757, 32749, 32731, 32702, 32664, 32618, 32566, 32508, 32447, 32383, 32319, 32255, 32194, 32136, 32083, 32035, 31995, 31962, 31938, 31922, 31916, 31918, 31930, 31950, 31978, 32014, 32057, 32106, 32159, 32217, 32277, 32338, 32399, 32459, 32516, 32570, 32619, 32662, 32698, 32728, 32749, 32762, 32767};
    const uint16_t imp6[129] = {0, 77, 310, 695, 1229, 1904, 2713, 3648, 4699, 5852, 7098, 8421, 9808, 11245, 12717, 14210, 15709, 17201, 18671, 20108, 21500, 22835, 24104, 25299, 26412, 27439, 28374, 29215, 29961, 30611, 31167, 31631, 32007, 32300, 32514, 32656, 32734, 32754, 32725, 32654, 32549, 32418, 32269, 32109, 31944, 31782, 31627, 31484, 31357, 31250, 31166, 31105, 31069, 31058, 31072, 31108, 31167, 31245, 31340, 31448, 31567, 31694, 31825, 31956, 32086, 32209, 32325, 32430, 32523, 32602, 32666, 32714, 32745, 32761, 32761, 32746, 32718, 32679, 32629, 32572, 32509, 32442, 32374, 32307, 32243, 32183, 32131, 32086, 32051, 32026, 32011, 32008, 32015, 32034, 32062, 32099, 32145, 32197, 32254, 32314, 32377, 32439, 32500, 32557, 32610, 32657, 32696, 32728, 32750, 32763, 32766, 32760, 32745, 32722, 32690, 32652, 32608, 32561, 32510, 32458, 32407, 32357, 32311, 32269, 32233, 32204, 32183, 32170, 32166};
    const uint16_t imp7[129] = {0, 102, 409, 914, 1612, 2491, 3538, 4738, 6075, 7528, 9079, 10704, 12383, 14094, 15814, 17523, 19200, 20827, 22387, 23864, 25245, 26519, 27679, 28717, 29631, 30419, 31082, 31625, 32051, 32369, 32586, 32713, 32761, 32741, 32664, 32544, 32391, 32216, 32031, 31846, 31668, 31505, 31364, 31248, 31162, 31108, 31086, 31096, 31137, 31205, 31297, 31410, 31539, 31679, 31825, 31973, 32117, 32254, 32380, 32491, 32585, 32660, 32715, 32749, 32764, 32759, 32736, 32698, 32647, 32586, 32518, 32446, 32373, 32303, 32238, 32180, 32132, 32095, 32071, 32061, 32064, 32079, 32108, 32147, 32196, 32252, 32314, 32379, 32445, 32509, 32570, 32625, 32673, 32711, 32740, 32759, 32766, 32762, 32748, 32724, 32692, 32653, 32609, 32561, 32512, 32464, 32417, 32375, 32339, 32309, 32288, 32276, 32273, 32280, 32295, 32319, 32351, 32389, 32432, 32478, 32525, 32573, 32618, 32660, 32696, 32726, 32748, 32762, 32767};
    const uint16_t imp8[129] = {0, 130, 520, 1160, 2041, 3144, 4449, 5932, 7567, 9324, 11173, 13081, 15018, 16953, 18856, 20700, 22460, 24113, 25642, 27032, 28272, 29356, 30279, 31045, 31656, 32120, 32449, 32654, 32752, 32757, 32686, 32557, 32386, 32189, 31982, 31778, 31587, 31421, 31286, 31187, 31128, 31109, 31130, 31188, 31279, 31397, 31537, 31691, 31853, 32017, 32175, 32322, 32453, 32564, 32652, 32715, 32752, 32765, 32755, 32724, 32676, 32613, 32541, 32464, 32386, 32311, 32243, 32186, 32141, 32111, 32097, 32099, 32117, 32149, 32194, 32250, 32313, 32382, 32452, 32520, 32585, 32642, 32690, 32727, 32752, 32765, 32764, 32752, 32728, 32695, 32654, 32609, 32560, 32511, 32464, 32422, 32386, 32358, 32340, 32332, 32335, 32348, 32370, 32401, 32438, 32481, 32527, 32574, 32620, 32662, 32699, 32729, 32751, 32763, 32766, 32760, 32745, 32721, 32690, 32653, 32613, 32571, 32530, 32490, 32455, 32426, 32404, 32391, 32386};
    const uint16_t imp9[129] = {0, 161, 643, 1433, 2514, 3859, 5439, 7217, 9154, 11208, 13336, 15493, 17639, 19733, 21738, 23622, 25359, 26927, 28310, 29499, 30491, 31287, 31896, 32330, 32606, 32742, 32760, 32684, 32537, 32341, 32119, 31890, 31672, 31479, 31322, 31208, 31143, 31128, 31160, 31237, 31351, 31495, 31661, 31838, 32017, 32191, 32350, 32489, 32603, 32687, 32741, 32765, 32759, 32728, 32676, 32608, 32529, 32445, 32362, 32286, 32220, 32169, 32136, 32121, 32125, 32148, 32188, 32242, 32307, 32379, 32453, 32527, 32595, 32655, 32704, 32739, 32760, 32766, 32758, 32736, 32703, 32661, 32614, 32564, 32514, 32468, 32429, 32398, 32378, 32369, 32372, 32386, 32411, 32445, 32486, 32531, 32579, 32625, 32668, 32705, 32735, 32755, 32765, 32765, 32754, 32734, 32707, 32673, 32635, 32595, 32556, 32520, 32490, 32467, 32452, 32446, 32450, 32463, 32485, 32513, 32548, 32585, 32624, 32662, 32697, 32726, 32748, 32762, 32767};
    const uint16_t imp10[129] = {0, 196, 779, 1733, 3030, 4634, 6501, 8579, 10815, 13149, 15524, 17884, 20176, 22351, 24369, 26196, 27808, 29187, 30328, 31232, 31908, 32372, 32647, 32760, 32739, 32616, 32422, 32187, 31937, 31696, 31484, 31317, 31202, 31147, 31151, 31211, 31319, 31468, 31644, 31836, 32032, 32220, 32389, 32533, 32645, 32721, 32760, 32764, 32737, 32683, 32610, 32524, 32434, 32347, 32269, 32206, 32163, 32141, 32142, 32165, 32208, 32267, 32337, 32415, 32495, 32571, 32639, 32695, 32735, 32760, 32766, 32757, 32732, 32695, 32649, 32598, 32546, 32497, 32455, 32422, 32401, 32393, 32399, 32417, 32447, 32486, 32531, 32580, 32628, 32672, 32710, 32740, 32759, 32766, 32763, 32748, 32723, 32692, 32655, 32616, 32578, 32544, 32516, 32495, 32484, 32484, 32493, 32512, 32539, 32572, 32608, 32646, 32682, 32714, 32740, 32757, 32766, 32765, 32754, 32735, 32709, 32677, 32643, 32608, 32575, 32547, 32525, 32511, 32506};
    const uint16_t imp11[129] = {0, 233, 928, 2058, 3587, 5463, 7625, 10004, 12526, 15114, 17696, 20200, 22566, 24740, 26679, 28355, 29751, 30862, 31696, 32271, 32613, 32756, 32738, 32600, 32380, 32119, 31848, 31599, 31393, 31245, 31166, 31158, 31216, 31333, 31496, 31691, 31901, 32111, 32307, 32477, 32612, 32705, 32756, 32765, 32736, 32677, 32596, 32503, 32407, 32317, 32242, 32188, 32158, 32154, 32176, 32222, 32286, 32363, 32447, 32531, 32609, 32674, 32724, 32755, 32766, 32758, 32732, 32693, 32644, 32590, 32537, 32489, 32450, 32423, 32411, 32415, 32433, 32464, 32505, 32553, 32603, 32652, 32695, 32730, 32754, 32765, 32764, 32750, 32726, 32694, 32657, 32618, 32581, 32549, 32525, 32511, 32507, 32515, 32533, 32560, 32593, 32629, 32667, 32701, 32730, 32752, 32764, 32766, 32758, 32741, 32716, 32685, 32653, 32620, 32590, 32566, 32550, 32543, 32545, 32556, 32576, 32603, 32634, 32667, 32698, 32726, 32748, 32762, 32767};
    const uint16_t imp12[129] = {0, 274, 1088, 2408, 4182, 6342, 8804, 11477, 14265, 17073, 19809, 22394, 24757, 26845, 28621, 30066, 31179, 31971, 32472, 32720, 32760, 32643, 32421, 32142, 31850, 31583, 31369, 31226, 31165, 31185, 31279, 31435, 31634, 31857, 32085, 32298, 32482, 32624, 32718, 32762, 32759, 32715, 32640, 32545, 32442, 32344, 32261, 32200, 32168, 32166, 32194, 32247, 32321, 32407, 32497, 32583, 32658, 32715, 32752, 32766, 32758, 32731, 32688, 32635, 32578, 32524, 32478, 32444, 32427, 32426, 32442, 32474, 32516, 32566, 32618, 32668, 32711, 32743, 32762, 32766, 32757, 32735, 32703, 32666, 32626, 32589, 32558, 32536, 32525, 32526, 32540, 32563, 32595, 32631, 32669, 32704, 32733, 32754, 32765, 32765, 32754, 32734, 32707, 32676, 32644, 32614, 32590, 32573, 32566, 32569, 32582, 32603, 32630, 32661, 32693, 32721, 32744, 32760, 32766, 32763, 32751, 32730, 32704, 32674, 32645, 32618, 32597, 32583, 32578};
    const uint16_t imp13[129] = {0, 319, 1261, 2783, 4815, 7265, 10027, 12981, 16009, 18994, 21829, 24424, 26707, 28631, 30172, 31326, 32115, 32575, 32757, 32722, 32532, 32253, 31940, 31644, 31402, 31240, 31172, 31198, 31308, 31486, 31709, 31952, 32192, 32405, 32577, 32696, 32757, 32762, 32720, 32640, 32539, 32430, 32328, 32246, 32192, 32172, 32187, 32233, 32305, 32393, 32488, 32580, 32660, 32720, 32756, 32766, 32752, 32716, 32666, 32608, 32549, 32498, 32459, 32438, 32436, 32453, 32486, 32532, 32585, 32639, 32689, 32729, 32755, 32766, 32761, 32742, 32711, 32673, 32633, 32595, 32564, 32544, 32537, 32543, 32561, 32590, 32625, 32664, 32700, 32731, 32754, 32765, 32765, 32753, 32731, 32703, 32671, 32640, 32613, 32594, 32584, 32584, 32595, 32615, 32642, 32673, 32703, 32731, 32752, 32764, 32766, 32758, 32742, 32718, 32691, 32663, 32637, 32617, 32604, 32601, 32608, 32623, 32646, 32672, 32701, 32727, 32748, 32762, 32767};
    const uint16_t imp14[129] = {0, 366, 1445, 3181, 5481, 8228, 11285, 14504, 17739, 20851, 23723, 26257, 28389, 30082, 31332, 32161, 32618, 32767, 32681, 32440, 32121, 31789, 31501, 31293, 31188, 31192, 31296, 31479, 31716, 31976, 32229, 32450, 32619, 32726, 32766, 32747, 32679, 32579, 32464, 32353, 32262, 32202, 32180, 32197, 32250, 32330, 32426, 32527, 32620, 32695, 32745, 32766, 32759, 32727, 32676, 32616, 32554, 32501, 32463, 32445, 32448, 32471, 32512, 32565, 32621, 32676, 32721, 32752, 32766, 32763, 32743, 32711, 32672, 32630, 32593, 32565, 32550, 32549, 32562, 32588, 32623, 32662, 32700, 32732, 32755, 32766, 32765, 32751, 32727, 32697, 32665, 32635, 32612, 32599, 32596, 32605, 32624, 32650, 32680, 32711, 32737, 32757, 32766, 32765, 32754, 32735, 32709, 32682, 32656, 32635, 32622, 32618, 32624, 32640, 32662, 32688, 32715, 32739, 32757, 32766, 32766, 32756, 32738, 32715, 32689, 32664, 32643, 32629, 32625};
    const uint16_t imp15[129] = {0, 416, 1642, 3602, 6180, 9226, 12568, 16028, 19430, 22618, 25462, 27868, 29783, 31193, 32120, 32618, 32766, 32655, 32380, 32031, 31687, 31409, 31234, 31181, 31248, 31416, 31654, 31928, 32200, 32438, 32620, 32730, 32766, 32736, 32654, 32542, 32420, 32310, 32229, 32189, 32192, 32238, 32317, 32417, 32523, 32622, 32700, 32749, 32766, 32752, 32711, 32654, 32589, 32528, 32481, 32454, 32451, 32471, 32511, 32565, 32624, 32681, 32726, 32756, 32766, 32757, 32732, 32695, 32652, 32611, 32579, 32559, 32554, 32566, 32592, 32627, 32667, 32706, 32738, 32759, 32766, 32760, 32741, 32713, 32681, 32650, 32625, 32608, 32604, 32612, 32631, 32658, 32689, 32719, 32744, 32761, 32766, 32761, 32746, 32723, 32696, 32669, 32648, 32633, 32629, 32635, 32651, 32673, 32699, 32725, 32747, 32761, 32766, 32762, 32748, 32727, 32702, 32678, 32658, 32644, 32640, 32645, 32659, 32679, 32703, 32728, 32748, 32762, 32767};
    const uint16_t imp16[129] = {0, 470, 1850, 4044, 6908, 10252, 13868, 17541, 21067, 24274, 27028, 29245, 30891, 31983, 32578, 32767, 32656, 32360, 31988, 31631, 31358, 31209, 31198, 31316, 31534, 31811, 32104, 32372, 32583, 32716, 32766, 32740, 32656, 32536, 32408, 32296, 32220, 32190, 32210, 32274, 32370, 32481, 32589, 32680, 32741, 32766, 32756, 32716, 32656, 32588, 32525, 32479, 32456, 32461, 32490, 32539, 32599, 32660, 32713, 32750, 32766, 32761, 32737, 32699, 32656, 32614, 32581, 32563, 32563, 32579, 32610, 32649, 32691, 32727, 32754, 32766, 32764, 32747, 32720, 32687, 32656, 32630, 32615, 32613, 32624, 32645, 32675, 32706, 32735, 32756, 32766, 32765, 32752, 32730, 32704, 32677, 32656, 32642, 32639, 32647, 32664, 32688, 32714, 32738, 32757, 32766, 32765, 32755, 32736, 32713, 32689, 32669, 32656, 32652, 32658, 32672, 32693, 32717, 32740, 32757, 32766, 32766, 32756, 32739, 32717, 32694, 32674, 32660, 32656};
    const uint16_t imp17[129] = {0, 527, 2069, 4508, 7662, 11301, 15174, 19027, 22631, 25800, 28404, 30378, 31718, 32479, 32758, 32680, 32380, 31988, 31613, 31335, 31200, 31219, 31375, 31630, 31935, 32237, 32493, 32671, 32758, 32754, 32679, 32558, 32423, 32304, 32222, 32193, 32219, 32293, 32398, 32516, 32625, 32709, 32757, 32765, 32735, 32679, 32609, 32541, 32489, 32461, 32463, 32493, 32545, 32608, 32671, 32723, 32757, 32766, 32753, 32721, 32678, 32632, 32594, 32571, 32566, 32580, 32609, 32650, 32692, 32730, 32756, 32766, 32760, 32740, 32710, 32676, 32646, 32625, 32617, 32623, 32642, 32671, 32703, 32733, 32755, 32766, 32764, 32750, 32727, 32700, 32675, 32655, 32645, 32647, 32660, 32682, 32708, 32733, 32753, 32765, 32765, 32756, 32737, 32714, 32691, 32672, 32661, 32660, 32669, 32687, 32709, 32732, 32751, 32763, 32766, 32759, 32744, 32723, 32701, 32682, 32670, 32666, 32672, 32687, 32707, 32729, 32748, 32762, 32767};
    const uint16_t imp18[129] = {0, 587, 2299, 4992, 8440, 12369, 16477, 20474, 24107, 27182, 29583, 31272, 32285, 32722, 32721, 32440, 32033, 31633, 31337, 31200, 31233, 31415, 31699, 32024, 32331, 32574, 32722, 32766, 32720, 32609, 32469, 32336, 32239, 32198, 32217, 32291, 32401, 32524, 32637, 32721, 32762, 32760, 32719, 32653, 32580, 32515, 32473, 32463, 32484, 32532, 32596, 32663, 32719, 32756, 32766, 32752, 32717, 32672, 32626, 32590, 32571, 32573, 32595, 32632, 32676, 32718, 32749, 32765, 32763, 32745, 32715, 32681, 32650, 32629, 32622, 32630, 32652, 32683, 32715, 32743, 32761, 32766, 32758, 32738, 32712, 32685, 32663, 32652, 32652, 32664, 32686, 32712, 32737, 32757, 32766, 32764, 32751, 32731, 32708, 32686, 32671, 32666, 32672, 32687, 32708, 32731, 32751, 32763, 32766, 32759, 32744, 32723, 32702, 32685, 32676, 32676, 32685, 32702, 32723, 32744, 32759, 32766, 32764, 32753, 32735, 32714, 32695, 32682, 32677};
    const uint16_t imp19[129] = {0, 650, 2541, 5494, 9240, 13448, 17768, 21871, 25482, 28410, 30562, 31937, 32620, 32759, 32532, 32122, 31693, 31363, 31205, 31236, 31431, 31735, 32077, 32390, 32623, 32747, 32759, 32680, 32545, 32398, 32276, 32209, 32208, 32270, 32378, 32506, 32627, 32718, 32762, 32758, 32713, 32643, 32566, 32504, 32469, 32470, 32505, 32564, 32633, 32698, 32745, 32766, 32758, 32726, 32680, 32632, 32594, 32574, 32577, 32601, 32641, 32687, 32728, 32756, 32766, 32757, 32732, 32698, 32664, 32638, 32626, 32630, 32650, 32680, 32713, 32743, 32762, 32766, 32756, 32735, 32708, 32682, 32662, 32655, 32660, 32677, 32702, 32729, 32751, 32764, 32766, 32755, 32736, 32713, 32691, 32676, 32671, 32678, 32694, 32716, 32738, 32756, 32766, 32765, 32754, 32735, 32714, 32696, 32684, 32681, 32688, 32704, 32724, 32744, 32759, 32766, 32763, 32751, 32733, 32714, 32697, 32687, 32686, 32694, 32710, 32730, 32748, 32762, 32767};
    const uint16_t imp20[129] = {0, 717, 2793, 6015, 10058, 14534, 19039, 23206, 26746, 29479, 31344, 32391, 32758, 32641, 32254, 31795, 31419, 31219, 31227, 31421, 31737, 32095, 32419, 32649, 32758, 32746, 32643, 32494, 32345, 32240, 32202, 32238, 32333, 32463, 32595, 32699, 32758, 32762, 32720, 32647, 32568, 32503, 32470, 32476, 32517, 32583, 32655, 32718, 32757, 32766, 32745, 32703, 32652, 32608, 32581, 32577, 32598, 32637, 32684, 32727, 32757, 32766, 32756, 32728, 32693, 32659, 32636, 32629, 32640, 32665, 32699, 32731, 32756, 32766, 32761, 32742, 32715, 32688, 32667, 32658, 32664, 32682, 32707, 32734, 32755, 32766, 32764, 32750, 32729, 32705, 32686, 32676, 32678, 32691, 32712, 32734, 32754, 32765, 32765, 32755, 32737, 32716, 32698, 32688, 32687, 32696, 32713, 32734, 32752, 32764, 32766, 32758, 32743, 32724, 32706, 32694, 32691, 32698, 32713, 32732, 32750, 32763, 32766, 32761, 32747, 32729, 32711, 32698, 32693};
    const uint16_t imp21[129] = {0, 786, 3056, 6552, 10892, 15622, 20282, 24469, 27890, 30385, 31938, 32656, 32737, 32420, 31946, 31512, 31249, 31212, 31386, 31706, 32080, 32420, 32658, 32762, 32736, 32617, 32457, 32311, 32221, 32210, 32275, 32394, 32535, 32660, 32742, 32766, 32736, 32667, 32584, 32513, 32474, 32477, 32520, 32588, 32663, 32726, 32761, 32763, 32735, 32687, 32636, 32596, 32578, 32588, 32620, 32667, 32714, 32750, 32766, 32759, 32734, 32698, 32662, 32638, 32632, 32644, 32672, 32707, 32739, 32761, 32766, 32755, 32732, 32703, 32678, 32663, 32663, 32677, 32701, 32729, 32752, 32765, 32765, 32751, 32730, 32706, 32688, 32679, 32683, 32698, 32720, 32743, 32759, 32766, 32762, 32747, 32727, 32708, 32694, 32690, 32697, 32713, 32733, 32751, 32764, 32766, 32758, 32743, 32724, 32707, 32698, 32697, 32707, 32723, 32742, 32758, 32766, 32765, 32754, 32738, 32720, 32706, 32699, 32702, 32714, 32731, 32749, 32762, 32767};
    const uint16_t imp22[129] = {0, 859, 3329, 7106, 11739, 16705, 21488, 25654, 28910, 31132, 32358, 32762, 32597, 32146, 31656, 31311, 31201, 31333, 31643, 32031, 32393, 32650, 32762, 32733, 32604, 32436, 32291, 32213, 32222, 32310, 32446, 32591, 32704, 32762, 32756, 32698, 32614, 32534, 32483, 32475, 32511, 32579, 32657, 32724, 32761, 32763, 32731, 32681, 32628, 32591, 32580, 32598, 32638, 32688, 32733, 32761, 32765, 32746, 32712, 32674, 32645, 32634, 32643, 32669, 32705, 32738, 32761, 32766, 32754, 32729, 32700, 32676, 32664, 32669, 32687, 32714, 32741, 32760, 32766, 32758, 32739, 32715, 32695, 32683, 32685, 32698, 32720, 32743, 32760, 32766, 32761, 32746, 32725, 32706, 32695, 32695, 32705, 32723, 32743, 32759, 32766, 32763, 32750, 32732, 32714, 32703, 32701, 32709, 32724, 32743, 32758, 32766, 32764, 32753, 32736, 32719, 32707, 32704, 32710, 32724, 32742, 32757, 32766, 32765, 32755, 32740, 32723, 32710, 32705};
    const uint16_t imp23[129] = {0, 934, 3611, 7673, 12596, 17779, 22651, 26752, 29803, 31724, 32621, 32737, 32381, 31861, 31422, 31212, 31272, 31551, 31946, 32337, 32625, 32758, 32736, 32604, 32430, 32282, 32211, 32234, 32338, 32486, 32630, 32731, 32766, 32736, 32660, 32571, 32502, 32474, 32496, 32558, 32638, 32712, 32757, 32764, 32735, 32684, 32630, 32592, 32583, 32604, 32648, 32700, 32743, 32765, 32761, 32734, 32696, 32660, 32639, 32638, 32659, 32693, 32729, 32757, 32766, 32757, 32733, 32704, 32679, 32667, 32671, 32691, 32719, 32746, 32763, 32766, 32754, 32732, 32708, 32690, 32685, 32693, 32712, 32735, 32755, 32766, 32764, 32750, 32730, 32711, 32698, 32697, 32707, 32726, 32746, 32761, 32766, 32761, 32747, 32728, 32712, 32704, 32706, 32718, 32736, 32753, 32764, 32766, 32758, 32743, 32726, 32712, 32708, 32713, 32726, 32743, 32758, 32766, 32764, 32754, 32738, 32722, 32712, 32710, 32718, 32733, 32749, 32762, 32767};
    const uint16_t imp24[129] = {0, 1013, 3904, 8255, 13460, 18839, 23764, 27759, 30568, 32170, 32747, 32613, 32124, 31602, 31268, 31221, 31441, 31828, 32246, 32577, 32747, 32746, 32618, 32438, 32283, 32211, 32242, 32357, 32513, 32657, 32747, 32764, 32714, 32627, 32539, 32484, 32481, 32527, 32605, 32687, 32746, 32767, 32746, 32696, 32639, 32597, 32584, 32604, 32649, 32702, 32746, 32766, 32758, 32727, 32688, 32654, 32638, 32646, 32674, 32711, 32745, 32764, 32763, 32744, 32714, 32686, 32670, 32671, 32689, 32716, 32744, 32763, 32766, 32753, 32731, 32707, 32690, 32687, 32698, 32720, 32743, 32761, 32766, 32759, 32741, 32721, 32704, 32699, 32705, 32721, 32742, 32759, 32766, 32762, 32749, 32730, 32714, 32707, 32710, 32722, 32740, 32756, 32766, 32765, 32754, 32738, 32722, 32712, 32712, 32722, 32738, 32754, 32764, 32766, 32758, 32743, 32727, 32716, 32714, 32721, 32735, 32751, 32763, 32766, 32761, 32747, 32732, 32719, 32714};
    const uint16_t imp25[129] = {0, 1095, 4206, 8849, 14328, 19880, 24823, 28671, 31207, 32482, 32759, 32421, 31861, 31396, 31206, 31327, 31679, 32118, 32499, 32723, 32759, 32644, 32460, 32294, 32214, 32243, 32364, 32526, 32671, 32755, 32759, 32696, 32602, 32518, 32478, 32495, 32560, 32646, 32722, 32763, 32758, 32716, 32657, 32607, 32585, 32599, 32642, 32697, 32743, 32766, 32758, 32726, 32685, 32652, 32639, 32651, 32683, 32722, 32754, 32766, 32758, 32732, 32701, 32677, 32670, 32681, 32707, 32737, 32759, 32766, 32757, 32735, 32711, 32693, 32689, 32700, 32722, 32745, 32762, 32766, 32756, 32737, 32717, 32703, 32702, 32712, 32731, 32751, 32764, 32766, 32756, 32738, 32721, 32710, 32710, 32721, 32738, 32755, 32765, 32765, 32754, 32738, 32723, 32714, 32716, 32727, 32743, 32758, 32766, 32764, 32753, 32738, 32724, 32717, 32720, 32731, 32747, 32760, 32766, 32763, 32752, 32736, 32724, 32718, 32722, 32734, 32749, 32762, 32767};
    const uint16_t imp26[129] = {0, 1179, 4517, 9454, 15197, 20898, 25822, 29487, 31726, 32673, 32679, 32190, 31621, 31262, 31237, 31512, 31950, 32382, 32674, 32767, 32681, 32497, 32316, 32218, 32238, 32359, 32527, 32676, 32758, 32754, 32683, 32584, 32505, 32478, 32512, 32590, 32679, 32745, 32766, 32741, 32686, 32627, 32591, 32592, 32628, 32683, 32735, 32764, 32761, 32731, 32689, 32654, 32641, 32654, 32687, 32727, 32757, 32766, 32753, 32724, 32694, 32674, 32674, 32692, 32722, 32750, 32765, 32763, 32745, 32720, 32699, 32690, 32698, 32718, 32743, 32761, 32766, 32757, 32738, 32718, 32704, 32704, 32717, 32736, 32755, 32766, 32764, 32751, 32732, 32717, 32711, 32716, 32731, 32749, 32763, 32766, 32759, 32744, 32728, 32717, 32717, 32727, 32743, 32758, 32766, 32764, 32753, 32738, 32725, 32719, 32724, 32737, 32752, 32764, 32766, 32760, 32746, 32732, 32723, 32723, 32732, 32746, 32759, 32766, 32764, 32753, 32739, 32727, 32722};
    const uint16_t imp27[129] = {0, 1267, 4837, 10069, 16066, 21888, 26757, 30204, 32128, 32758, 32532, 31948, 31425, 31208, 31350, 31747, 32217, 32588, 32758, 32721, 32548, 32352, 32229, 32229, 32343, 32515, 32672, 32758, 32753, 32676, 32574, 32498, 32481, 32528, 32614, 32703, 32758, 32762, 32721, 32659, 32606, 32587, 32609, 32660, 32718, 32757, 32765, 32741, 32699, 32660, 32642, 32652, 32685, 32726, 32757, 32766, 32751, 32721, 32691, 32674, 32678, 32700, 32731, 32757, 32766, 32757, 32735, 32709, 32694, 32694, 32710, 32734, 32756, 32766, 32761, 32743, 32722, 32707, 32705, 32716, 32736, 32756, 32766, 32763, 32749, 32731, 32716, 32712, 32721, 32737, 32755, 32765, 32765, 32753, 32737, 32723, 32718, 32724, 32738, 32754, 32765, 32766, 32756, 32741, 32728, 32722, 32725, 32738, 32753, 32764, 32766, 32759, 32745, 32731, 32724, 32726, 32737, 32751, 32763, 32766, 32760, 32748, 32734, 32726, 32726, 32736, 32750, 32762, 32767};
    const uint16_t imp28[129] = {0, 1358, 5166, 10692, 16930, 22847, 27626, 30824, 32424, 32755, 32340, 31718, 31288, 31234, 31528, 32002, 32450, 32718, 32754, 32612, 32405, 32250, 32219, 32317, 32490, 32658, 32755, 32754, 32676, 32571, 32496, 32484, 32539, 32632, 32718, 32764, 32754, 32702, 32638, 32595, 32593, 32631, 32690, 32743, 32766, 32754, 32715, 32672, 32645, 32648, 32678, 32719, 32754, 32766, 32753, 32723, 32691, 32674, 32680, 32704, 32736, 32760, 32766, 32753, 32728, 32704, 32693, 32700, 32721, 32746, 32763, 32765, 32752, 32731, 32712, 32705, 32713, 32732, 32752, 32765, 32764, 32751, 32733, 32718, 32714, 32723, 32740, 32757, 32766, 32763, 32750, 32734, 32722, 32720, 32729, 32745, 32760, 32766, 32762, 32749, 32734, 32725, 32725, 32735, 32749, 32762, 32766, 32761, 32748, 32734, 32726, 32728, 32739, 32753, 32764, 32766, 32759, 32746, 32734, 32727, 32731, 32742, 32755, 32765, 32766, 32757, 32744, 32732, 32728};
    const uint16_t imp29[129] = {0, 1452, 5503, 11324, 17788, 23771, 28425, 31350, 32622, 32679, 32125, 31518, 31218, 31331, 31748, 32249, 32626, 32766, 32681, 32476, 32287, 32215, 32285, 32453, 32633, 32747, 32759, 32683, 32575, 32496, 32486, 32546, 32642, 32728, 32766, 32746, 32687, 32624, 32590, 32603, 32653, 32714, 32758, 32764, 32736, 32691, 32654, 32644, 32666, 32707, 32746, 32766, 32758, 32729, 32696, 32676, 32680, 32704, 32736, 32761, 32766, 32751, 32725, 32702, 32694, 32705, 32728, 32753, 32766, 32762, 32744, 32722, 32708, 32709, 32723, 32745, 32762, 32766, 32757, 32739, 32722, 32715, 32721, 32738, 32755, 32766, 32764, 32751, 32734, 32723, 32722, 32732, 32749, 32762, 32766, 32759, 32745, 32731, 32725, 32729, 32742, 32757, 32766, 32765, 32754, 32740, 32730, 32728, 32737, 32750, 32762, 32766, 32761, 32749, 32736, 32730, 32733, 32744, 32757, 32765, 32765, 32756, 32743, 32733, 32731, 32738, 32750, 32762, 32767};
    const uint16_t imp30[129] = {0, 1548, 5848, 11962, 18637, 24657, 29153, 31783, 32732, 32549, 31906, 31362, 31217, 31487, 31986, 32464, 32732, 32740, 32564, 32347, 32223, 32251, 32403, 32595, 32732, 32764, 32697, 32586, 32500, 32486, 32546, 32646, 32732, 32767, 32740, 32676, 32614, 32590, 32614, 32672, 32732, 32765, 32757, 32717, 32672, 32646, 32653, 32689, 32732, 32762, 32764, 32739, 32705, 32680, 32678, 32700, 32732, 32759, 32766, 32752, 32725, 32702, 32695, 32708, 32732, 32756, 32766, 32759, 32739, 32718, 32708, 32714, 32732, 32754, 32766, 32763, 32748, 32729, 32717, 32719, 32732, 32751, 32764, 32765, 32754, 32738, 32725, 32723, 32733, 32749, 32762, 32766, 32759, 32745, 32731, 32726, 32733, 32746, 32760, 32766, 32762, 32750, 32737, 32729, 32733, 32744, 32758, 32766, 32764, 32754, 32741, 32732, 32733, 32742, 32755, 32765, 32766, 32758, 32745, 32735, 32733, 32740, 32752, 32763, 32766, 32761, 32749, 32737, 32733};
    const uint16_t imp31[129] = {0, 1648, 6201, 12605, 19474, 25501, 29809, 32129, 32766, 32381, 31699, 31259, 31280, 31684, 32219, 32626, 32766, 32657, 32434, 32255, 32225, 32346, 32541, 32706, 32766, 32715, 32604, 32509, 32485, 32541, 32643, 32732, 32766, 32736, 32669, 32609, 32592, 32625, 32687, 32744, 32766, 32746, 32701, 32659, 32646, 32667, 32711, 32751, 32766, 32752, 32718, 32687, 32676, 32692, 32724, 32754, 32766, 32755, 32729, 32704, 32696, 32708, 32733, 32757, 32766, 32757, 32736, 32716, 32708, 32718, 32739, 32758, 32766, 32759, 32741, 32724, 32717, 32725, 32743, 32760, 32766, 32760, 32744, 32729, 32723, 32730, 32745, 32760, 32766, 32761, 32747, 32733, 32727, 32734, 32747, 32761, 32766, 32761, 32748, 32736, 32731, 32736, 32749, 32761, 32766, 32761, 32749, 32737, 32733, 32738, 32750, 32762, 32766, 32762, 32750, 32739, 32734, 32739, 32750, 32762, 32766, 32762, 32750, 32739, 32735, 32739, 32751, 32762, 32767};
    const uint16_t imp32[129] = {0, 1750, 6561, 13252, 20298, 26303, 30393, 32393, 32737, 32191, 31519, 31213, 31399, 31902, 32425, 32728, 32737, 32542, 32319, 32217, 32287, 32473, 32664, 32762, 32737, 32630, 32523, 32483, 32531, 32633, 32728, 32766, 32737, 32667, 32607, 32593, 32632, 32698, 32752, 32766, 32737, 32688, 32652, 32650, 32683, 32729, 32761, 32763, 32737, 32701, 32679, 32684, 32712, 32746, 32765, 32761, 32737, 32709, 32697, 32705, 32730, 32755, 32766, 32758, 32737, 32716, 32709, 32720, 32742, 32761, 32766, 32756, 32737, 32721, 32719, 32731, 32750, 32764, 32765, 32753, 32737, 32725, 32726, 32739, 32756, 32766, 32764, 32751, 32737, 32729, 32733, 32746, 32760, 32766, 32762, 32749, 32737, 32732, 32738, 32751, 32763, 32766, 32760, 32747, 32737, 32734, 32742, 32755, 32765, 32766, 32758, 32745, 32737, 32737, 32746, 32758, 32766, 32765, 32755, 32743, 32737, 32739, 32749, 32761, 32766, 32763, 32752, 32741, 32737};
    const uint16_t imp33[129] = {0, 1856, 6927, 13902, 21105, 27058, 30907, 32581, 32654, 31993, 31375, 31225, 31561, 32122, 32589, 32766, 32658, 32420, 32243, 32238, 32393, 32601, 32743, 32756, 32663, 32545, 32485, 32518, 32617, 32719, 32766, 32740, 32670, 32608, 32594, 32636, 32704, 32756, 32764, 32728, 32678, 32648, 32657, 32697, 32743, 32766, 32755, 32721, 32688, 32678, 32697, 32731, 32760, 32765, 32747, 32718, 32699, 32701, 32724, 32751, 32766, 32761, 32740, 32718, 32710, 32720, 32742, 32761, 32766, 32754, 32735, 32721, 32721, 32735, 32754, 32766, 32763, 32748, 32732, 32725, 32732, 32747, 32762, 32766, 32758, 32743, 32731, 32731, 32741, 32756, 32766, 32764, 32753, 32739, 32733, 32737, 32750, 32762, 32766, 32760, 32747, 32737, 32736, 32744, 32757, 32766, 32765, 32755, 32743, 32737, 32740, 32751, 32762, 32766, 32761, 32750, 32740, 32738, 32745, 32757, 32765, 32765, 32756, 32745, 32738, 32741, 32751, 32762, 32767};
    
    
    const uint16_t tenora48Atk[129] = {14750, 14761, 14692, 14364, 13503, 11853, 9359, 6319, 3398, 1443, 1142, 2672, 5533, 8687, 11011, 11845, 11382, 10648, 11049, 13640, 18506, 24561, 29928, 32767, 32136, 28492, 23519, 19362, 17611, 18536, 20959, 22839, 22297, 18570, 12437, 5894, 1236, 0, 2268, 6672, 11063, 13526, 13236, 10770, 7749, 6012, 6731, 9890, 14334, 18340, 20408, 19910, 17306, 13872, 11097, 10045, 10956, 13229, 15766, 17488, 17793, 16767, 15098, 13736, 13476, 14627, 16903, 19555, 21683, 22594, 22059, 20372, 18196, 16268, 15085, 14715, 14804, 14767, 14085, 12558, 10406, 8172, 6486, 5785, 6145, 7279, 8700, 9963, 10855, 11454, 12027, 12853, 14047, 15497, 16925, 18039, 18677, 18868, 18782, 18611, 18445, 18232, 17834, 17144, 16193, 15174, 14359, 13967, 14030, 14375, 14695, 14718, 14349, 13734, 13186, 13022, 13385, 14156, 14984, 15455, 15280, 14442, 13209, 12013, 11253, 11123, 11530, 12158, 12626};
    const uint16_t tenora48Rls[129] = {14750, 14711, 14616, 14425, 14136, 13798, 13495, 13307, 13279, 13397, 13596, 13787, 13896, 13896, 13821, 13741, 13730, 13828, 14022, 14249, 14429, 14493, 14424, 14256, 14064, 13930, 13911, 14018, 14214, 14437, 14625, 14746, 14804, 14838, 14898, 15024, 15222, 15463, 15689, 15836, 15855, 15729, 15480, 15152, 14800, 14465, 14163, 13885, 13606, 13306, 12985, 12669, 12401, 12225, 12172, 12246, 12432, 12700, 13026, 13392, 13790, 14206, 14618, 14989, 15283, 15480, 15590, 15650, 15704, 15776, 15850, 15868, 15762, 15490, 15077, 14620, 14257, 14108, 14213, 14505, 14829, 15012, 14945, 14642, 14240, 13935, 13886, 14125, 14529, 14865, 14896, 14494, 13709, 12762, 11952, 11524, 11564, 11965, 12476, 12829, 12866, 12615, 12286, 12173, 12522, 13412, 14710, 16120, 17294, 17974, 18089, 17776, 17311, 16985, 16971, 17248, 17607, 17739, 17374, 16413, 14986, 13415, 12100, 11351, 11268, 11693, 12286, 12674, 12626};
    
    
    const uint16_t tenore48Atk[129] = {19284, 19082, 18440, 16927, 14150, 10088, 5400, 1471, 0, 2198, 7982, 15646, 22361, 25402, 23501, 17596, 10484, 5455, 4639, 7955, 13259, 17621, 18982, 17249, 14218, 12424, 13623, 17815, 23328, 27840, 29670, 28564, 25602, 22395, 20148, 19187, 19137, 19512, 20219, 21605, 24035, 27361, 30703, 32767, 32540, 29928, 25908, 22087, 19891, 19851, 21394, 23219, 24037, 23254, 21239, 19062, 17903, 18422, 20437, 23002, 24840, 24900, 22807, 19015, 14640, 11027, 9238, 9653, 11850, 14813, 17379, 18725, 18663, 17620, 16325, 15391, 15030, 15034, 15015, 14720, 14205, 13786, 13795, 14345, 15265, 16250, 17106, 17902, 18894, 20261, 21844, 23098, 23351, 22222, 19963, 17466, 15892, 16087, 18135, 21280, 24299, 26104, 26256, 25113, 23553, 22459, 22264, 22793, 23456, 23640, 23060, 21884, 20596, 19719, 19554, 20085, 21044, 22069, 22851, 23195, 23018, 22312, 21137, 19634, 18039, 16654, 15770, 15565, 16027};
    const uint16_t tenore48Rls[129] = {19284, 19336, 19365, 19394, 19410, 19403, 19373, 19338, 19321, 19348, 19430, 19571, 19771, 20034, 20362, 20737, 21095, 21333, 21347, 21087, 20601, 20037, 19593, 19431, 19603, 20022, 20500, 20840, 20926, 20772, 20501, 20262, 20142, 20127, 20113, 19978, 19659, 19184, 18666, 18242, 18018, 18027, 18231, 18549, 18886, 19159, 19297, 19243, 18968, 18485, 17867, 17248, 16780, 16591, 16727, 17136, 17682, 18201, 18562, 18711, 18688, 18600, 18567, 18662, 18875, 19113, 19237, 19139, 18813, 18386, 18090, 18170, 18763, 19809, 21044, 22096, 22640, 22543, 21923, 21087, 20380, 20034, 20076, 20366, 20704, 20955, 21111, 21255, 21466, 21745, 21993, 22088, 21962, 21655, 21279, 20923, 20579, 20142, 19500, 18662, 17824, 17316, 17429, 18228, 19456, 20604, 21130, 20723, 19453, 17748, 16192, 15255, 15101, 15552, 16222, 16727, 16870, 16700, 16453, 16405, 16724, 17389, 18198, 18856, 19095, 18782, 17983, 16946, 16027};
    
    
    const uint16_t tenori48Atk[129] = {21032, 21020, 20447, 18938, 16259, 12597, 8772, 6158, 6158, 9402, 15078, 20922, 24084, 22561, 16458, 8248, 1712, 0, 3849, 11053, 17582, 19824, 16674, 10217, 4551, 3384, 7812, 15606, 22469, 24520, 20553, 12730, 5332, 2336, 5243, 12411, 20179, 25014, 25384, 22306, 18389, 16110, 16439, 18563, 20757, 21665, 21147, 20181, 20015, 21229, 23361, 25311, 26172, 25873, 25178, 25063, 25935, 27277, 27978, 27135, 24796, 22098, 20669, 21656, 24959, 29172, 32288, 32767, 30353, 26202, 22241, 20165, 20606, 22907, 25560, 27048, 26604, 24526, 21937, 20146, 19972, 21350, 23387, 24821, 24639, 22574, 19256, 15931, 13893, 13884, 15737, 18451, 20673, 21335, 20152, 17713, 15132, 13450, 13125, 13862, 14877, 15392, 15084, 14213, 13391, 13160, 13660, 14576, 15378, 15675, 15428, 14906, 14450, 14217, 14114, 13949, 13679, 13538, 13928, 15109, 16922, 18747, 19788, 19534, 18119, 16321, 15181, 15423, 17040};
    const uint16_t tenori48Rls[129] = {21032, 20822, 20640, 20643, 20891, 21340, 21855, 22264, 22446, 22389, 22198, 22034, 22031, 22220, 22508, 22732, 22743, 22502, 22106, 21747, 21608, 21761, 22121, 22496, 22680, 22561, 22169, 21640, 21141, 20778, 20569, 20459, 20383, 20308, 20241, 20194, 20141, 20018, 19757, 19349, 18871, 18456, 18215, 18152, 18148, 18026, 17670, 17122, 16585, 16319, 16479, 16995, 17573, 17840, 17543, 16709, 15655, 14831, 14590, 15005, 15835, 16657, 17096, 17009, 16545, 16039, 15821, 16034, 16578, 17178, 17546, 17535, 17213, 16816, 16629, 16853, 17514, 18461, 19434, 20171, 20502, 20412, 20036, 19605, 19357, 19448, 19903, 20613, 21400, 22086, 22563, 22818, 22912, 22930, 22948, 23004, 23114, 23271, 23452, 23605, 23660, 23563, 23336, 23115, 23112, 23510, 24308, 25246, 25858, 25696, 24595, 22844, 21125, 20200, 20505, 21869, 23549, 24600, 24380, 22925, 20940, 19411, 19037, 19813, 21029, 21685, 21089, 19284, 17040};
    
    
    const uint16_t tenoro48Atk[129] = {15442, 15210, 14915, 14474, 13780, 12730, 11274, 9468, 7501, 5669, 4282, 3541, 3429, 3684, 3885, 3638, 2779, 1506, 354, 0, 964, 3347, 6723, 10270, 13092, 14620, 14885, 14535, 14572, 15893, 18849, 23033, 27399, 30692, 31994, 31153, 28878, 26445, 25141, 25680, 27869, 30678, 32695, 32767, 30534, 26619, 22368, 19270, 18297, 19482, 21912, 24148, 24868, 23466, 20312, 16573, 13687, 12712, 13864, 16434, 19116, 20592, 20110, 17784, 14513, 11555, 9958, 10112, 11606, 13452, 14541, 14141, 12196, 9323, 6514, 4690, 4322, 5269, 6884, 8341, 9004, 8684, 7691, 6656, 6238, 6839, 8458, 10724, 13082, 15035, 16330, 17030, 17433, 17916, 18758, 20035, 21608, 23203, 24534, 25410, 25789, 25772, 25531, 25241, 25017, 24887, 24810, 24704, 24488, 24110, 23560, 22864, 22083, 21288, 20551, 19927, 19443, 19087, 18816, 18566, 18274, 17897, 17430, 16905, 16376, 15899, 15508, 15204, 14954};
    const uint16_t tenoro48Rls[129] = {15442, 15666, 15911, 16191, 16503, 16836, 17168, 17479, 17758, 18004, 18232, 18463, 18715, 19000, 19317, 19650, 19976, 20269, 20510, 20688, 20808, 20882, 20928, 20962, 20990, 21006, 20991, 20912, 20739, 20449, 20041, 19540, 18990, 18443, 17939, 17491, 17075, 16641, 16132, 15514, 14800, 14051, 13360, 12822, 12489, 12350, 12326, 12306, 12193, 11949, 11621, 11325, 11198, 11341, 11761, 12364, 12987, 13462, 13690, 13687, 13584, 13567, 13799, 14340, 15116, 15943, 16606, 16953, 16967, 16778, 16610, 16686, 17128, 17899, 18822, 19651, 20181, 20342, 20225, 20049, 20058, 20411, 21113, 22008, 22842, 23375, 23482, 23200, 22707, 22238, 21980, 21989, 22167, 22312, 22203, 21701, 20805, 19647, 18436, 17367, 16547, 15961, 15491, 14982, 14309, 13439, 12436, 11434, 10580, 9983, 9671, 9600, 9677, 9801, 9902, 9958, 9997, 10072, 10240, 10542, 10987, 11555, 12197, 12853, 13464, 13983, 14392, 14702, 14954};
    
    
    
    const uint16_t tenoru48Atk[129] = {16668, 17036, 17318, 17438, 17303, 16835, 16011, 14901, 13673, 12536, 11650, 11032, 10524, 9848, 8737, 7095, 5085, 3103, 1614, 934, 1068, 1680, 2244, 2308, 1727, 768, 0, 27, 1190, 3381, 6079, 8589, 10369, 11286, 11676, 12168, 13371, 15569, 18574, 21812, 24585, 26388, 27131, 27153, 27046, 27361, 28358, 29893, 31494, 32590, 32767, 31938, 30377, 28580, 27046, 26072, 25637, 25437, 25030, 24041, 22327, 20040, 17568, 15373, 13799, 12932, 12580, 12356, 11866, 10878, 9438, 7845, 6519, 5812, 5847, 6463, 7292, 7925, 8100, 7813, 7309, 6954, 7059, 7727, 8811, 9991, 10919, 11384, 11394, 11151, 10948, 11016, 11431, 12085, 12758, 13224, 13362, 13194, 12862, 12554, 12417, 12500, 12757, 13078, 13357, 13530, 13601, 13626, 13682, 13836, 14123, 14544, 15069, 15658, 16268, 16863, 17425, 17951, 18456, 18963, 19496, 20066, 20662, 21254, 21798, 22249, 22578, 22776, 22852};
    const uint16_t tenoru48Rls[129] = {16668, 16260, 15839, 15419, 15005, 14594, 14180, 13758, 13326, 12890, 12463, 12063, 11703, 11394, 11140, 10934, 10770, 10636, 10528, 10445, 10395, 10389, 10441, 10561, 10749, 10994, 11276, 11568, 11850, 12116, 12376, 12654, 12976, 13355, 13782, 14224, 14638, 14983, 15246, 15444, 15621, 15825, 16089, 16408, 16740, 17028, 17219, 17296, 17287, 17253, 17263, 17362, 17549, 17779, 17980, 18092, 18091, 18002, 17892, 17835, 17883, 18041, 18264, 18474, 18598, 18595, 18474, 18293, 18128, 18042, 18056, 18135, 18204, 18175, 17984, 17624, 17141, 16624, 16160, 15800, 15529, 15278, 14946, 14453, 13777, 12969, 12134, 11390, 10813, 10406, 10100, 9784, 9366, 8819, 8196, 7613, 7193, 7017, 7083, 7317, 7603, 7848, 8018, 8156, 8358, 8723, 9307, 10097, 11020, 11975, 12880, 13697, 14444, 15174, 15944, 16786, 17692, 18620, 19509, 20304, 20970, 21498, 21901, 22203, 22433, 22611, 22747, 22834, 22852};
    
    
    
    const uint16_t sopranoa48Atk[129] = {12643, 12439, 12283, 12167, 12080, 12003, 11913, 11779, 11569, 11252, 10806, 10222, 9516, 8723, 7901, 7120, 6454, 5970, 5713, 5700, 5918, 6332, 6884, 7518, 8180, 8840, 9488, 10137, 10822, 11583, 12462, 13490, 14684, 16041, 17540, 19149, 20824, 22519, 24190, 25792, 27288, 28645, 29838, 30845, 31650, 32242, 32615, 32767, 32698, 32415, 31925, 31238, 30370, 29337, 28160, 26861, 25460, 23974, 22415, 20787, 19089, 17319, 15475, 13565, 11608, 9641, 7712, 5886, 4226, 2795, 1639, 789, 247, 0, 12, 243, 650, 1195, 1855, 2617, 3482, 4457, 5553, 6776, 8130, 9607, 11191, 12857, 14574, 16309, 18025, 19688, 21264, 22724, 24044, 25206, 26196, 27006, 27632, 28076, 28340, 28430, 28355, 28127, 27759, 27269, 26679, 26011, 25285, 24522, 23732, 22921, 22088, 21225, 20325, 19380, 18394, 17377, 16354, 15354, 14416, 13577, 12866, 12302, 11891, 11623, 11477, 11425, 11436};
    const uint16_t sopranoa48Rls[129] = {12643, 12898, 13206, 13566, 13977, 14436, 14940, 15484, 16066, 16680, 17322, 17987, 18667, 19352, 20030, 20688, 21310, 21881, 22384, 22807, 23139, 23372, 23503, 23533, 23465, 23308, 23071, 22764, 22393, 21965, 21481, 20940, 20338, 19669, 18932, 18127, 17260, 16345, 15399, 14446, 13511, 12619, 11791, 11044, 10389, 9832, 9374, 9015, 8753, 8586, 8513, 8533, 8646, 8851, 9145, 9523, 9980, 10508, 11100, 11750, 12450, 13195, 13979, 14796, 15638, 16496, 17356, 18205, 19026, 19800, 20510, 21138, 21669, 22093, 22406, 22607, 22706, 22717, 22656, 22543, 22396, 22227, 22044, 21844, 21622, 21364, 21058, 20695, 20270, 19787, 19259, 18704, 18145, 17605, 17104, 16658, 16271, 15946, 15677, 15455, 15271, 15113, 14975, 14849, 14730, 14611, 14489, 14356, 14209, 14043, 13854, 13645, 13417, 13177, 12933, 12693, 12469, 12268, 12097, 11959, 11853, 11777, 11721, 11678, 11636, 11590, 11536, 11480, 11436};
    
    
    const uint16_t sopranoe48Atk[129] = {24639, 24795, 24915, 24979, 24951, 24778, 24391, 23706, 22639, 21119, 19112, 16643, 13809, 10789, 7828, 5222, 3272, 2243, 2319, 3563, 5900, 9115, 12875, 16769, 20357, 23234, 25071, 25664, 24949, 23011, 20067, 16432, 12484, 8617, 5192, 2503, 744, 0, 237, 1325, 3057, 5185, 7456, 9642, 11567, 13124, 14271, 15028, 15454, 15630, 15638, 15544, 15396, 15217, 15015, 14791, 14544, 14280, 14008, 13747, 13510, 13310, 13148, 13021, 12919, 12836, 12773, 12749, 12796, 12965, 13316, 13910, 14798, 16009, 17536, 19335, 21317, 23356, 25292, 26954, 28172, 28805, 28760, 28009, 26602, 24668, 22406, 20064, 17909, 16198, 15139, 14872, 15442, 16800, 18812, 21272, 23937, 26553, 28891, 30766, 32059, 32719, 32767, 32277, 31369, 30186, 28875, 27569, 26380, 25386, 24629, 24117, 23833, 23739, 23789, 23936, 24140, 24371, 24611, 24854, 25096, 25341, 25587, 25831, 26069, 26291, 26490, 26660, 26797};
    const uint16_t sopranoe48Rls[129] = {24639, 24458, 24259, 24045, 23817, 23577, 23327, 23069, 22806, 22542, 22282, 22032, 21801, 21598, 21436, 21331, 21297, 21349, 21496, 21741, 22074, 22473, 22901, 23310, 23644, 23843, 23853, 23632, 23158, 22434, 21488, 20375, 19174, 17975, 16875, 15965, 15319, 14987, 14988, 15306, 15892, 16670, 17545, 18416, 19182, 19760, 20090, 20141, 19914, 19437, 18763, 17955, 17084, 16217, 15409, 14701, 14118, 13670, 13353, 13155, 13059, 13046, 13100, 13204, 13346, 13517, 13709, 13917, 14140, 14374, 14618, 14872, 15135, 15404, 15674, 15938, 16184, 16395, 16551, 16629, 16604, 16453, 16159, 15716, 15134, 14442, 13689, 12947, 12300, 11843, 11665, 11841, 12416, 13395, 14740, 16366, 18151, 19946, 21594, 22946, 23879, 24316, 24232, 23655, 22668, 21395, 19989, 18611, 17413, 16523, 16030, 15979, 16366, 17141, 18222, 19503, 20870, 22217, 23454, 24518, 25376, 26021, 26471, 26756, 26911, 26969, 26959, 26899, 26797};
    
    
    const uint16_t sopranoi48Atk[129] = {17078, 17237, 17532, 17932, 18374, 18760, 18961, 18829, 18219, 17019, 15179, 12742, 9864, 6808, 3925, 1602, 204, 0, 1107, 3457, 6791, 10694, 14656, 18155, 20739, 22095, 22091, 20785, 18403, 15289, 11844, 8464, 5492, 3181, 1679, 1033, 1204, 2087, 3529, 5358, 7391, 9453, 11390, 13072, 14406, 15338, 15853, 15970, 15739, 15233, 14536, 13742, 12945, 12235, 11689, 11370, 11311, 11512, 11933, 12493, 13085, 13591, 13909, 13979, 13804, 13462, 13096, 12893, 13043, 13699, 14933, 16714, 18897, 21247, 23471, 25270, 26396, 26689, 26113, 24753, 22805, 20544, 18276, 16296, 14852, 14116, 14169, 15003, 16525, 18581, 20971, 23480, 25892, 28017, 29704, 30857, 31432, 31443, 30953, 30060, 28887, 27565, 26222, 24977, 23933, 23176, 22770, 22753, 23136, 23892, 24955, 26224, 27564, 28831, 29885, 30619, 30977, 30967, 30663, 30184, 29680, 29292, 29124, 29224, 29566, 30063, 30582, 30971, 31098};
    const uint16_t sopranoi48Rls[129] = {17078, 17052, 17134, 17282, 17447, 17581, 17646, 17624, 17516, 17344, 17148, 16971, 16855, 16833, 16915, 17093, 17334, 17586, 17787, 17871, 17781, 17481, 16959, 16238, 15373, 14449, 13568, 12841, 12365, 12213, 12418, 12968, 13806, 14838, 15945, 17005, 17904, 18555, 18905, 18938, 18670, 18146, 17428, 16585, 15689, 14813, 14024, 13385, 12952, 12772, 12873, 13264, 13924, 14806, 15835, 16916, 17948, 18834, 19497, 19891, 20005, 19868, 19537, 19093, 18628, 18227, 17960, 17870, 17967, 18230, 18608, 19031, 19422, 19710, 19846, 19815, 19643, 19391, 19155, 19042, 19153, 19562, 20297, 21333, 22588, 23939, 25237, 26335, 27110, 27481, 27423, 26965, 26181, 25179, 24081, 23011, 22078, 21372, 20965, 20901, 21205, 21879, 22901, 24219, 25753, 27398, 29026, 30497, 31680, 32462, 32767, 32567, 31890, 30815, 29467, 28002, 26590, 25393, 24547, 24148, 24233, 24780, 25706, 26881, 28142, 29320, 30264, 30871, 31098};
    
    
    
    const uint16_t sopranoo48Atk[129] = {12318, 12795, 13258, 13698, 14107, 14473, 14779, 15006, 15135, 15146, 15022, 14755, 14348, 13816, 13186, 12490, 11769, 11057, 10381, 9754, 9176, 8632, 8097, 7542, 6943, 6282, 5554, 4770, 3952, 3132, 2348, 1638, 1032, 556, 223, 39, 0, 94, 308, 626, 1032, 1515, 2066, 2681, 3358, 4101, 4914, 5799, 6759, 7794, 8901, 10074, 11306, 12591, 13920, 15288, 16690, 18117, 19559, 21002, 22426, 23806, 25118, 26335, 27436, 28407, 29245, 29954, 30549, 31048, 31470, 31832, 32144, 32405, 32607, 32734, 32767, 32682, 32462, 32094, 31572, 30902, 30094, 29169, 28148, 27059, 25927, 24773, 23614, 22464, 21327, 20203, 19091, 17984, 16880, 15776, 14674, 13580, 12503, 11455, 10446, 9489, 8591, 7761, 7003, 6321, 5721, 5207, 4786, 4462, 4241, 4124, 4107, 4183, 4337, 4555, 4818, 5109, 5417, 5734, 6057, 6391, 6743, 7124, 7542, 8004, 8511, 9059, 9639};
    const uint16_t sopranoo48Rls[129] = {12318, 11833, 11345, 10862, 10389, 9932, 9496, 9085, 8701, 8346, 8019, 7718, 7441, 7185, 6950, 6738, 6553, 6401, 6291, 6233, 6235, 6305, 6447, 6662, 6947, 7296, 7700, 8149, 8635, 9149, 9685, 10239, 10809, 11395, 11999, 12622, 13266, 13931, 14616, 15318, 16032, 16751, 17467, 18172, 18857, 19513, 20132, 20709, 21239, 21717, 22140, 22507, 22815, 23063, 23252, 23382, 23456, 23479, 23454, 23388, 23286, 23150, 22981, 22777, 22534, 22247, 21908, 21514, 21062, 20557, 20006, 19418, 18810, 18196, 17593, 17013, 16467, 15960, 15493, 15065, 14670, 14302, 13953, 13618, 13293, 12978, 12676, 12393, 12137, 11917, 11741, 11618, 11550, 11540, 11584, 11676, 11810, 11976, 12167, 12373, 12590, 12811, 13031, 13246, 13448, 13633, 13794, 13926, 14026, 14093, 14130, 14142, 14135, 14114, 14085, 14046, 13995, 13924, 13820, 13673, 13468, 13196, 12851, 12434, 11950, 11411, 10834, 10237, 9639};
    const uint16_t sopranou48Atk[129] = {25086, 25038, 24988, 24937, 24883, 24821, 24740, 24626, 24460, 24222, 23895, 23464, 22924, 22281, 21550, 20754, 19922, 19083, 18260, 17470, 16715, 15991, 15283, 14570, 13833, 13056, 12230, 11354, 10434, 9485, 8522, 7566, 6633, 5739, 4895, 4110, 3390, 2738, 2155, 1642, 1199, 825, 522, 288, 124, 28, 0, 35, 133, 287, 495, 753, 1062, 1422, 1842, 2328, 2890, 3538, 4278, 5110, 6028, 7020, 8068, 9152, 10250, 11343, 12419, 13470, 14495, 15501, 16494, 17483, 18477, 19479, 20490, 21505, 22516, 23515, 24489, 25429, 26325, 27169, 27955, 28680, 29342, 29941, 30476, 30949, 31363, 31717, 32016, 32260, 32451, 32593, 32690, 32746, 32767, 32757, 32721, 32663, 32583, 32480, 32350, 32189, 31990, 31752, 31475, 31163, 30822, 30465, 30104, 29753, 29422, 29120, 28852, 28617, 28414, 28236, 28078, 27933, 27798, 27669, 27546, 27430, 27325, 27233, 27159, 27105, 27074};
    const uint16_t sopranou48Rls[129] = {25086, 25132, 25173, 25208, 25235, 25256, 25270, 25277, 25278, 25271, 25257, 25232, 25194, 25140, 25066, 24968, 24845, 24694, 24514, 24305, 24067, 23801, 23507, 23188, 22843, 22473, 22079, 21662, 21223, 20764, 20285, 19788, 19277, 18752, 18215, 17667, 17111, 16546, 15974, 15397, 14816, 14234, 13654, 13079, 12516, 11968, 11441, 10940, 10470, 10035, 9638, 9278, 8957, 8674, 8426, 8212, 8031, 7884, 7771, 7696, 7662, 7672, 7730, 7839, 8000, 8212, 8475, 8785, 9141, 9538, 9974, 10445, 10949, 11483, 12044, 12630, 13236, 13860, 14498, 15145, 15800, 16459, 17121, 17782, 18444, 19104, 19763, 20418, 21069, 21712, 22344, 22959, 23553, 24117, 24647, 25137, 25583, 25983, 26338, 26650, 26926, 27170, 27389, 27587, 27767, 27930, 28075, 28199, 28297, 28367, 28406, 28413, 28390, 28340, 28266, 28173, 28066, 27951, 27830, 27708, 27587, 27472, 27365, 27269, 27189, 27126, 27085, 27068, 27074};
    
    const uint16_t artificial148Atk[129] = {16066, 15969, 15872, 15777, 15683, 15591, 15500, 15411, 15323, 15237, 15152, 15069, 14986, 14903, 14820, 14737, 14651, 14562, 14469, 14369, 14262, 14145, 14015, 13871, 13710, 13528, 13324, 13095, 12838, 12550, 12230, 11876, 11486, 11060, 10597, 10099, 9566, 9000, 8405, 7785, 7143, 6487, 5821, 5153, 4490, 3842, 3215, 2620, 2065, 1559, 1110, 727, 418, 189, 48, 0, 48, 196, 447, 800, 1257, 1815, 2471, 3222, 4062, 4986, 5986, 7056, 8186, 9367, 10592, 11849, 13130, 14424, 15723, 17018, 18299, 19558, 20787, 21979, 23128, 24227, 25271, 26256, 27178, 28033, 28819, 29534, 30177, 30748, 31246, 31671, 32025, 32308, 32522, 32668, 32749, 32767, 32723, 32622, 32464, 32254, 31993, 31684, 31331, 30935, 30500, 30027, 29521, 28983, 28415, 27821, 27203, 26563, 25904, 25227, 24535, 23831, 23115, 22391, 21660, 20924, 20186, 19446, 18708, 17972, 17240, 16515, 15797};
    const uint16_t artificial148Rls[129] = {16066, 16165, 16264, 16364, 16464, 16565, 16666, 16767, 16868, 16969, 17069, 17169, 17268, 17366, 17464, 17560, 17656, 17750, 17844, 17937, 18029, 18119, 18210, 18299, 18388, 18477, 18565, 18654, 18742, 18831, 18920, 19009, 19099, 19190, 19281, 19373, 19466, 19559, 19652, 19746, 19839, 19931, 20022, 20111, 20198, 20282, 20361, 20435, 20502, 20562, 20614, 20655, 20685, 20702, 20705, 20692, 20662, 20614, 20545, 20455, 20342, 20205, 20044, 19857, 19644, 19404, 19137, 18843, 18522, 18174, 17800, 17401, 16978, 16532, 16066, 15581, 15078, 14561, 14032, 13494, 12948, 12399, 11849, 11301, 10759, 10224, 9701, 9193, 8702, 8231, 7782, 7359, 6964, 6598, 6264, 5963, 5698, 5469, 5277, 5124, 5010, 4936, 4901, 4907, 4952, 5037, 5162, 5325, 5527, 5765, 6040, 6351, 6695, 7073, 7483, 7924, 8393, 8891, 9416, 9966, 10539, 11135, 11751, 12387, 13040, 13709, 14393, 15090, 15797};
    const uint16_t artificial248Atk[129] = {13738, 13671, 13607, 13547, 13489, 13434, 13383, 13333, 13283, 13232, 13174, 13107, 13023, 12916, 12779, 12601, 12375, 12092, 11743, 11323, 10828, 10258, 9618, 8916, 8166, 7390, 6611, 5861, 5173, 4586, 4138, 3868, 3812, 4003, 4467, 5221, 6274, 7623, 9253, 11138, 13239, 15508, 17884, 20302, 22690, 24975, 27081, 28940, 30487, 31667, 32437, 32767, 32639, 32055, 31027, 29587, 27776, 25650, 23273, 20716, 18054, 15365, 12725, 10204, 7867, 5771, 3961, 2473, 1328, 537, 98, 0, 219, 726, 1484, 2452, 3583, 4833, 6157, 7512, 8859, 10163, 11394, 12529, 13550, 14446, 15210, 15842, 16344, 16725, 16994, 17165, 17251, 17266, 17225, 17142, 17030, 16900, 16762, 16624, 16491, 16368, 16258, 16161, 16078, 16007, 15947, 15894, 15846, 15800, 15753, 15702, 15645, 15580, 15506, 15420, 15324, 15216, 15097, 14968, 14830, 14684, 14531, 14374, 14215, 14055, 13895, 13739, 13586};
    const uint16_t artificial248Rls[129] = {13738, 13807, 13877, 13949, 14021, 14093, 14164, 14233, 14301, 14366, 14427, 14485, 14539, 14589, 14633, 14673, 14708, 14737, 14761, 14781, 14795, 14804, 14808, 14807, 14801, 14790, 14774, 14752, 14724, 14690, 14649, 14600, 14543, 14476, 14400, 14312, 14213, 14101, 13977, 13840, 13690, 13528, 13355, 13172, 12981, 12785, 12586, 12388, 12194, 12010, 11839, 11686, 11556, 11453, 11383, 11349, 11355, 11403, 11496, 11634, 11819, 12048, 12319, 12629, 12973, 13346, 13741, 14151, 14567, 14980, 15384, 15767, 16124, 16444, 16722, 16952, 17129, 17248, 17309, 17309, 17252, 17137, 16970, 16755, 16497, 16204, 15883, 15542, 15188, 14829, 14472, 14125, 13794, 13483, 13197, 12939, 12712, 12515, 12350, 12216, 12111, 12034, 11980, 11948, 11935, 11937, 11951, 11975, 12006, 12042, 12083, 12125, 12170, 12217, 12266, 12318, 12373, 12432, 12497, 12568, 12646, 12732, 12828, 12932, 13046, 13169, 13300, 13440, 13586};
    const uint16_t artificial348Atk[129] = {13685, 13658, 13631, 13599, 13554, 13484, 13367, 13174, 12865, 12400, 11735, 10837, 9689, 8301, 6718, 5023, 3341, 1825, 651, 0, 30, 862, 2559, 5107, 8409, 12291, 16510, 20772, 24766, 28188, 30777, 32338, 32767, 32056, 30301, 27682, 24450, 20898, 17331, 14032, 11240, 9127, 7783, 7218, 7362, 8084, 9206, 10532, 11866, 13036, 13910, 14408, 14504, 14226, 13646, 12869, 12014, 11204, 10544, 10114, 9957, 10081, 10453, 11012, 11675, 12349, 12945, 13384, 13616, 13617, 13396, 12994, 12475, 11924, 11430, 11081, 10949, 11088, 11521, 12240, 13211, 14371, 15639, 16920, 18120, 19151, 19939, 20429, 20594, 20429, 19956, 19217, 18270, 17183, 16027, 14873, 13784, 12809, 11987, 11340, 10877, 10592, 10469, 10486, 10615, 10825, 11088, 11376, 11669, 11949, 12205, 12429, 12619, 12778, 12908, 13015, 13106, 13187, 13262, 13336, 13413, 13492, 13575, 13660, 13746, 13832, 13915, 13995, 14071};
    const uint16_t artificial348Rls[129] = {13685, 13712, 13739, 13767, 13796, 13825, 13854, 13883, 13913, 13943, 13973, 14004, 14034, 14065, 14095, 14126, 14156, 14186, 14213, 14238, 14258, 14272, 14279, 14276, 14262, 14234, 14193, 14136, 14063, 13976, 13875, 13762, 13641, 13516, 13391, 13271, 13160, 13064, 12987, 12933, 12904, 12900, 12923, 12971, 13040, 13127, 13228, 13338, 13450, 13561, 13667, 13763, 13848, 13921, 13983, 14033, 14075, 14110, 14141, 14171, 14200, 14231, 14262, 14294, 14324, 14352, 14375, 14391, 14398, 14397, 14387, 14369, 14346, 14318, 14290, 14263, 14240, 14220, 14202, 14186, 14165, 14137, 14093, 14029, 13938, 13817, 13662, 13474, 13256, 13016, 12762, 12508, 12267, 12055, 11886, 11774, 11730, 11761, 11869, 12053, 12307, 12619, 12976, 13360, 13753, 14137, 14495, 14813, 15079, 15286, 15431, 15514, 15539, 15515, 15448, 15351, 15233, 15104, 14972, 14844, 14724, 14616, 14519, 14432, 14355, 14282, 14213, 14143, 14071};
    const uint16_t artificial448Atk[129] = {18388, 18352, 18239, 17937, 17283, 16093, 14227, 11670, 8592, 5359, 2488, 542, 0, 1145, 3993, 8279, 13503, 19028, 24191, 28420, 31326, 32749, 32767, 31645, 29766, 27538, 25316, 23355, 21788, 20644, 19877, 19403, 19129, 18972, 18869, 18782, 18689, 18584, 18472, 18362, 18262, 18175, 18095, 18004, 17871, 17655, 17311, 16800, 16102, 15232, 14247, 13249, 12371, 11762, 11553, 11834, 12635, 13909, 15545, 17380, 19226, 20901, 22258, 23198, 23689, 23755, 23469, 22935, 22262, 21550, 20879, 20297, 19829, 19472, 19213, 19028, 18892, 18786, 18694, 18606, 18519, 18434, 18351, 18271, 18192, 18108, 18011, 17887, 17724, 17514, 17253, 16948, 16617, 16290, 16006, 15806, 15730, 15806, 16047, 16449, 16984, 17610, 18275, 18920, 19495, 19958, 20283, 20462, 20505, 20432, 20273, 20061, 19825, 19590, 19374, 19187, 19031, 18904, 18803, 18719, 18648, 18584, 18525, 18469, 18414, 18360, 18307, 18252, 18193};
    const uint16_t artificial448Rls[129] = {18388, 18400, 18410, 18419, 18428, 18438, 18448, 18458, 18469, 18481, 18492, 18505, 18518, 18532, 18545, 18557, 18568, 18576, 18581, 18581, 18576, 18565, 18548, 18524, 18494, 18459, 18422, 18383, 18346, 18311, 18281, 18257, 18240, 18231, 18228, 18232, 18241, 18254, 18269, 18287, 18305, 18324, 18342, 18360, 18378, 18396, 18413, 18431, 18450, 18469, 18489, 18510, 18533, 18558, 18586, 18615, 18646, 18679, 18710, 18739, 18763, 18778, 18782, 18771, 18744, 18699, 18637, 18559, 18471, 18376, 18280, 18189, 18109, 18044, 17997, 17971, 17963, 17973, 17997, 18031, 18072, 18116, 18160, 18202, 18242, 18279, 18313, 18346, 18378, 18410, 18442, 18476, 18510, 18547, 18588, 18633, 18685, 18744, 18811, 18887, 18969, 19054, 19135, 19205, 19253, 19271, 19248, 19179, 19061, 18895, 18689, 18454, 18206, 17963, 17742, 17559, 17426, 17348, 17325, 17353, 17420, 17517, 17629, 17746, 17858, 17960, 18049, 18126, 18193};
    const uint16_t artificial548Atk[129] = {16378, 14831, 11844, 7843, 3843, 977, 0, 1076, 3882, 7843, 12353, 16890, 21094, 24797, 27958, 30514, 32240, 32767, 31774, 29235, 25513, 21240, 17086, 13569, 10975, 9375, 8666, 8634, 9047, 9751, 10707, 11927, 13352, 14794, 15992, 16742, 16999, 16877, 16582, 16333, 16317, 16646, 17323, 18232, 19186, 20013, 20626, 21022, 21214, 21172, 20827, 20123, 19061, 17708, 16181, 14632, 13242, 12189, 11598, 11494, 11808, 12427, 13256, 14232, 15301, 16388, 17401, 18259, 18904, 19300, 19426, 19291, 18953, 18513, 18077, 17708, 17418, 17184, 16993, 16840, 16720, 16612, 16495, 16359, 16209, 16045, 15854, 15626, 15378, 15160, 15032, 15032, 15161, 15404, 15743, 16159, 16621, 17078, 17486, 17818, 18070, 18231, 18281, 18199, 17989, 17685, 17336, 16977, 16631, 16318, 16065, 15895, 15808, 15783, 15799, 15849, 15938, 16061, 16196, 16315, 16408, 16484, 16553, 16618, 16673, 16718, 16772, 16846, 16937};
    const uint16_t artificial548Rls[129] = {16378, 16757, 16620, 16509, 16582, 16702, 16717, 16637, 16582, 16618, 16693, 16718, 16673, 16625, 16633, 16681, 16705, 16673, 16622, 16605, 16629, 16648, 16626, 16580, 16554, 16569, 16597, 16599, 16576, 16562, 16584, 16625, 16651, 16648, 16639, 16654, 16688, 16713, 16707, 16686, 16678, 16691, 16704, 16693, 16663, 16641, 16641, 16649, 16642, 16614, 16585, 16576, 16581, 16577, 16555, 16529, 16522, 16536, 16554, 16560, 16561, 16579, 16620, 16669, 16706, 16728, 16750, 16782, 16814, 16824, 16807, 16777, 16749, 16726, 16691, 16637, 16576, 16529, 16502, 16486, 16465, 16445, 16441, 16460, 16491, 16515, 16528, 16543, 16573, 16613, 16647, 16667, 16686, 16717, 16763, 16808, 16840, 16863, 16889, 16919, 16937, 16924, 16877, 16811, 16737, 16652, 16548, 16427, 16309, 16217, 16155, 16117, 16101, 16119, 16185, 16298, 16438, 16581, 16717, 16849, 16974, 17077, 17140, 17159, 17150, 17126, 17087, 17023, 16937};
    
    const uint16_t linear5[5] = {0 , 8191 , 16383 , 24575 , 32767};
    
    const uint16_t linear9[9] = {0 , 4095 , 8191 , 12287 , 16383 , 20479 , 24575 , 28671 , 32767};
    
    const uint16_t linear[65] = {0,512,1024,1536,2048,2560,3072,3584,4096,4608,5120,5632,6144,6656,7168,7680,8192,8704,9216,9728,10240,10752,11264,11776,12288,12800,13312,13824,14336,14848,15360,15872,16383,16895,17407,17919,18431,18943,19455,19967,20479,20991,21503,22015,22527,23039,23551,24063,24575,25087,25599,26111,26623,27135,27647,28159,28671,29183,29695,30207,30719,31231,31743,32255,32767};
    
    const uint16_t linear129[129] =
    {0 , 255 , 511 , 767 , 1023 , 1279 , 1535 , 1791 , 2047 , 2303 , 2559 , 2815 , 3071 , 3327 , 3583 , 3839 , 4095 , 4351 , 4607 , 4863 , 5119 , 5375 , 5631 , 5887 , 6143 , 6399 , 6655 , 6911 , 7167 , 7423 , 7679 , 7935 , 8191 , 8447 , 8703 , 8959 , 9215 , 9471 , 9727 , 9983 , 10239 , 10495 , 10751 , 11007 , 11263 , 11519 , 11775 , 12031 , 12287 , 12543 , 12799 , 13055 , 13311 , 13567 , 13823 , 14079 , 14335 , 14591 , 14847 , 15103 , 15359 , 15615 , 15871 , 16127 , 16383 , 16639 , 16895 , 17151 , 17407 , 17663 , 17919 , 18175 , 18431 , 18687 , 18943 , 19199 , 19455 , 19711 , 19967 , 20223 , 20479 , 20735 , 20991 , 21247 , 21503 , 21759 , 22015 , 22271 , 22527 , 22783 , 23039 , 23295 , 23551 , 23807 , 24063 , 24319 , 24575 , 24831 , 25087 , 25343 , 25599 , 25855 , 26111 , 26367 , 26623 , 26879 , 27135 , 27391 , 27647 , 27903 , 28159 , 28415 , 28671 , 28927 , 29183 , 29439 , 29695 , 29951 , 30207 , 30463 , 30719 , 30975 , 31231 , 31487 , 31743 , 31999 , 32255 , 32511 , 32767};
    
    const uint16_t skipsaw2[65] = {0,772,1544,2316,3088,3860,4632,5404,6176,6948,7720,8492,9264,10036,10808,11580,12352,13124,13896,14668,15440,16212,16984,17756,18528,19300,20072,20844,21616,22388,23160,23932,24704,8835,9607,10379,11151,11923,12695,13467,14239,15011,15783,16555,17327,18099,18871,19643,20415,21187,21959,22731,23503,24275,25047,25819,26591,27363,28135,28907,29679,30451,31223,31995,32767};
    const uint16_t skipsaw3[65] = {0,1034,2068,3102,4136,5170,6204,7238,8272,9306,10341,11375,12409,13443,14477,15511,16545,17579,18613,19647,20681,21715,6043,7077,8111,9145,10179,11213,12247,13281,14315,15349,16383,17418,18452,19486,20520,21554,22588,23622,24656,25690,26724,11052,12086,13120,14154,15188,16222,17256,18290,19324,20358,21392,22426,23461,24495,25529,26563,27597,28631,29665,30699,31733,32767};
    const uint16_t skipsaw4[65] = {0,1298,2596,3895,5193,6491,7789,9087,10386,11684,12982,14280,15578,16877,18175,19473,20771,5297,6595,7893,9191,10490,11788,13086,14384,15682,16981,18279,19577,20875,22173,23472,24770,9295,10594,11892,13190,14488,15786,17085,18383,19681,20979,22277,23576,24874,26172,27470,28768,13294,14592,15890,17189,18487,19785,21083,22381,23680,24978,26276,27574,28872,30171,31469,32767};
    const uint16_t skipsaw5[65] = {0,1564,3129,4693,6258,7822,9387,10951,12516,14080,15644,17209,18773,3498,5063,6627,8192,9756,11321,12885,14450,16014,17578,19143,20707,22272,6997,8561,10126,11690,13255,14819,16383,17948,19512,21077,22641,24206,25770,10495,12060,13624,15189,16753,18317,19882,21446,23011,24575,26140,27704,29269,13994,15558,17123,18687,20251,21816,23380,24945,26509,28074,29638,31203,32767};
    
    const uint16_t hopsaw2[65] = {0,685,1371,2056,2741,3427,4112,4797,5483,6168,6853,7539,8224,8909,9594,10280,10965,11650,12336,13021,13706,14392,15077,15762,16448,17133,17818,18504,19189,19874,20560,21245,21930,11522,12207,12893,13578,14263,14949,15634,16319,17005,17690,18375,19061,19746,20431,21117,21802,22487,23173,23858,24543,25228,25914,26599,27284,27970,28655,29340,30026,30711,31396,32082,32767};
    const uint16_t hopsaw3[65] = {0,860,1719,2579,3438,4298,5157,6017,6877,7736,8596,9455,10315,11174,12034,12894,13753,14613,15472,16332,17191,18051,7788,8647,9507,10367,11226,12086,12945,13805,14664,15524,16383,17243,18103,18962,19822,20681,21541,22400,23260,24120,24979,14716,15576,16435,17295,18154,19014,19873,20733,21593,22452,23312,24171,25031,25890,26750,27610,28469,29329,30188,31048,31907,32767};
    const uint16_t hopsaw4[65] = {0,1035,2069,3104,4139,5174,6208,7243,8278,9313,10347,11382,12417,13452,14486,15521,16556,6438,7473,8508,9543,10577,11612,12647,13682,14716,15751,16786,17821,18855,19890,20925,21959,11842,12877,13912,14946,15981,17016,18051,19085,20120,21155,22190,23224,24259,25294,26329,27363,17246,18281,19315,20350,21385,22420,23454,24489,25524,26559,27593,28628,29663,30698,31732,32767};
    const uint16_t hopsaw5[65] = {0,1211,2422,3632,4843,6054,7265,8476,9687,10897,12108,13319,14530,4559,5770,6981,8192,9403,10613,11824,13035,14246,15457,16668,17878,19089,9119,10329,11540,12751,13962,15173,16383,17594,18805,20016,21227,22438,23648,13678,14889,16099,17310,18521,19732,20943,22154,23364,24575,25786,26997,28208,18237,19448,20659,21870,23080,24291,25502,26713,27924,29135,30345,31556,32767};
    
    const uint16_t sharkfin[65] = {0,390,779,1169,1559,1949,2338,2728,3118,3508,3897,4287,4677,5067,5456,5846,6492,7908,9324,10740,12156,13571,14599,15240,15880,16520,17160,17801,18441,19081,19722,20362,21002,12280,11894,11508,11123,10737,10351,9965,9579,9194,8808,8422,8812,9202,9591,9981,10371,11530,12946,14362,15778,17193,18609,20025,21441,22856,24272,25688,27104,28520,29935,31351,32767};
    
    const uint16_t bushy[65] = {0,1801,3603,5404,7205,9006,10808,12609,14410,15817,11486,12814,13881,14947,16014,17081,18147,19583,21070,16847,18335,19823,20834,21472,22110,22406,22624,22841,17347,17564,17781,17998,18215,18592,18916,19241,19566,19891,14505,14830,15155,15190,15094,14997,16273,17653,19033,14702,16082,17726,19527,21328,23130,24931,26732,28272,24049,25300,26367,27434,28500,29567,30634,31700,32767};
    
    const uint16_t nested_threes[65] = {0,1991,3982,5973,7965,9956,11947,13938,15929,17920,19912,13297,15288,17279,19270,21261,14646,16638,18629,20620,22611,24602,9381,11372,13363,15355,17346,19337,21328,23319,25310,27302,20687,5465,7457,9448,11439,13430,15421,17412,19404,21395,23386,16771,10156,12147,14138,16129,18121,11506,13497,15488,17479,19470,21461,14847,16838,18829,20820,22811,24802,26794,28785,30776,32767};
    
    const uint16_t anduh[65] = {0,2091,4181,6272,8363,10454,12544,14635,16726,18817,20907,22998,25089,5054,7145,9235,11326,13417,15508,17598,19689,21780,23871,25961,28052,30143,10108,12199,14289,16380,18471,20562,22652,12205,14296,16387,18478,20568,22659,2624,4715,6806,8896,10987,13078,15169,17259,19350,21441,23532,25622,27713,7678,9769,11860,13950,16041,18132,20223,22313,24404,26495,28586,30676,32767};
    
    const uint16_t flipsaw2[65] = {0,1034,2068,3102,4136,5170,6204,7238,8272,9306,10341,11375,12409,13443,14477,15511,16545,17579,18613,19647,20681,21715,21972,21452,20932,20412,19892,19372,18852,18332,17812,17292,16772,16252,15732,15212,14692,14172,13652,13132,12612,12092,11572,11052,12086,13120,14154,15188,16222,17256,18290,19324,20358,21392,22426,23461,24495,25529,26563,27597,28631,29665,30699,31733,32767};
    
    
    // forward-reverse filtered bandpass filter bank sweep, 24 & 48 partial impulse, wideband
    const uint16_t fbank1_24[129] = {0, 2292, 8516, 16908, 25115, 30896, 32766, 30421, 24784, 17696, 11333, 7548, 7322, 10512, 15940, 21806, 26268, 28015, 26651, 22774, 17746, 13225, 10627, 10688, 13254, 17379, 21653, 24682, 25539, 24041, 20781, 16904, 13708, 12218, 12856, 15326, 18739, 21929, 23843, 23893, 22128, 19202, 16132, 13949, 13355, 14498, 16938, 19814, 22146, 23165, 22566, 20598, 17966, 15576, 14232, 14359, 15876, 18233, 20609, 22195, 22473, 21379, 19318, 17013, 15256, 14633, 15333, 17088, 19278, 21144, 22056, 21720, 20275, 18236, 16313, 15163, 15166, 16303, 18163, 20097, 21438, 21735, 20903, 19243, 17339, 15850, 15283, 15820, 17263, 19102, 20698, 21504, 21251, 20038, 18295, 16629, 15615, 15597, 16571, 18192, 19892, 21083, 21357, 20627, 19154, 17452, 16113, 15599, 16082, 17389, 19061, 20517, 21253, 21017, 19895, 18281, 16738, 15800, 15791, 16712, 18240, 19842, 20962, 21210, 20503, 19088, 17456, 16177, 15695};
    const uint16_t fbank1_48[129] = {0, 8346, 24801, 32767, 25131, 11174, 5803, 13387, 23901, 24994, 15963, 8044, 11163, 22429, 29291, 23638, 10942, 4358, 10519, 22679, 28377, 22746, 12946, 9535, 14975, 21854, 22017, 15774, 11010, 13774, 21319, 25263, 21004, 12772, 8953, 13139, 20678, 24024, 20639, 14975, 13035, 15971, 19557, 19479, 16146, 13853, 15647, 19845, 21919, 19458, 14753, 12357, 14423, 18721, 21148, 19850, 16713, 15008, 15977, 17913, 18381, 16968, 15593, 16205, 18488, 20081, 19084, 16174, 14054, 14760, 17608, 19900, 19641, 17435, 15660, 15900, 17413, 18196, 17358, 16098, 16229, 17953, 19472, 18939, 16600, 14690, 15118, 17451, 19384, 19173, 17361, 15992, 16307, 17524, 17968, 17114, 16159, 16519, 18061, 19149, 18467, 16537, 15219, 15757, 17525, 18780, 18505, 17315, 16566, 16830, 17437, 17454, 16843, 16464, 16994, 18072, 18626, 18017, 16722, 15866, 16145, 17222, 18146, 18256, 17682, 17062, 16870, 17037, 17164};
    const uint16_t fbank2_24[129] = {0, 2032, 7626, 15393, 23412, 29713, 32766, 31862, 27274, 20180, 12353, 5715, 1858, 1656, 5073, 11192, 18465, 25108, 29542, 30772, 28603, 23662, 17216, 10843, 6047, 3900, 4812, 8460, 13891, 19781, 24747, 27678, 27971, 25651, 21341, 16088, 11120, 7556, 6162, 7191, 10347, 14862, 19684, 23718, 26066, 26227, 24201, 20479, 15929, 11601, 8482, 7276, 8248, 11158, 15320, 19762, 23447, 25516, 25492, 23390, 19714, 15340, 11308, 8572, 7775, 9092, 12193, 16323, 20486, 23687, 25172, 24608, 22157, 18432, 14341, 10867, 8826, 8677, 10419, 13601, 17438, 21012, 23484, 24300, 23307, 20780, 17344, 13822, 11031, 9601, 9829, 11627, 14547, 17896, 20900, 22881, 23404, 22375, 20049, 16972, 13852, 11397, 10163, 10423, 12111, 14839, 17981, 20816, 22690, 23167, 22130, 19812, 16743, 13638, 11223, 10072, 10466, 12325, 15219, 18469, 21305, 23046, 23270, 21916, 19299, 16042, 12923, 10691, 9882};
    const uint16_t fbank2_48[129] = {0, 5397, 17891, 29230, 32766, 27910, 19579, 13707, 12887, 15504, 18264, 19276, 18982, 18728, 18927, 18740, 17391, 15532, 15098, 17608, 22421, 26607, 26835, 21948, 14234, 8215, 7658, 12937, 20733, 26358, 26958, 23206, 18317, 15404, 15396, 17010, 18408, 18790, 18601, 18522, 18547, 18138, 17162, 16444, 17187, 19725, 22821, 24307, 22671, 18339, 13602, 11189, 12497, 16702, 21346, 23945, 23497, 20898, 18079, 16594, 16719, 17641, 18382, 18568, 18446, 18331, 18195, 17840, 17396, 17465, 18601, 20586, 22264, 22273, 20133, 16780, 14046, 13469, 15306, 18450, 21200, 22303, 21578, 19813, 18131, 17295, 17370, 17894, 18338, 18468, 18361, 18176, 17967, 17765, 17756, 18269, 19436, 20836, 21567, 20843, 18698, 16146, 14596, 14911, 16851, 19298, 21018, 21379, 20564, 19256, 18156, 17635, 17673, 18000, 18313, 18427, 18318, 18073, 17826, 17747, 18036, 18824, 19977, 20980, 21113, 19946, 17790, 15690, 14819};
    const uint16_t fbank3_24[129] = {0, 1270, 4872, 10215, 16441, 22585, 27750, 31261, 32767, 32277, 30123, 26865, 23164, 19648, 16804, 14914, 14036, 14041, 14675, 15641, 16667, 17558, 18216, 18628, 18838, 18906, 18877, 18763, 18544, 18183, 17664, 17013, 16319, 15732, 15446, 15652, 16494, 18017, 20136, 22626, 25142, 27267, 28583, 28752, 27586, 25101, 21530, 17306, 12999, 9225, 6545, 5369, 5881, 8006, 11422, 15617, 19974, 23883, 26836, 28512, 28812, 27860, 25962, 23527, 20991, 18731, 17011, 15952, 15539, 15650, 16104, 16714, 17324, 17833, 18201, 18428, 18540, 18560, 18493, 18330, 18053, 17656, 17168, 16662, 16259, 16107, 16352, 17102, 18384, 20127, 22148, 24173, 25874, 26925, 27062, 26139, 24164, 21317, 17925, 14424, 11289, 8964, 7782, 7918, 9353, 11881, 15137, 18666, 21988, 24680, 26440, 27125, 26763, 25535, 23729, 21681, 19711, 18074, 16921, 16296, 16145, 16349, 16762, 17243, 17689, 18041, 18280, 18414, 18456};
    const uint16_t fbank3_48[129] = {0, 1315, 5033, 10515, 16843, 23004, 28087, 31441, 32767, 32138, 29938, 26743, 23194, 19866, 17181, 15367, 14461, 14346, 14818, 15638, 16588, 17498, 18260, 18821, 19168, 19311, 19269, 19059, 18697, 18201, 17602, 16957, 16353, 15907, 15761, 16056, 16901, 18340, 20315, 22651, 25054, 27145, 28517, 28809, 27789, 25422, 21903, 17653, 13256, 9368, 6598, 5392, 5945, 8167, 11697, 15976, 20351, 24199, 27030, 28563, 28748, 27750, 25889, 23565, 21172, 19041, 17391, 16324, 15828, 15816, 16153, 16693, 17305, 17886, 18367, 18708, 18892, 18915, 18785, 18513, 18122, 17649, 17149, 16701, 16404, 16368, 16696, 17466, 18696, 20331, 22225, 24146, 25802, 26880, 27106, 26302, 24436, 21651, 18256, 14694, 11468, 9057, 7832, 7982, 9484, 12104, 15443, 19008, 22303, 24909, 26552, 27127, 26702, 25479, 23745, 21811, 19960, 18406, 17273, 16601, 16354, 16450, 16781, 17237, 17722, 18163, 18508, 18725, 18799};
    const uint16_t fbank4_24[129] = {0, 1088, 4198, 8881, 14480, 20239, 25426, 29446, 31930, 32767, 32099, 30269, 27739, 24994, 22463, 20449, 19099, 18409, 18248, 18409, 18665, 18817, 18735, 18372, 17763, 17010, 16250, 15624, 15252, 15203, 15490, 16066, 16841, 17698, 18518, 19206, 19711, 20040, 20252, 20453, 20768, 21307, 22140, 23260, 24577, 25913, 27028, 27658, 27561, 26577, 24661, 21918, 18594, 15053, 11723, 9035, 7347, 6889, 7720, 9722, 12619, 16021, 19493, 22623, 25081, 26670, 27340, 27180, 26390, 25229, 23964, 22820, 21946, 21394, 21124, 21027, 20953, 20754, 20314, 19580, 18570, 17369, 16119, 14985, 14128, 13677, 13701, 14205, 15122, 16334, 17685, 19020, 20202, 21139, 21798, 22202, 22426, 22566, 22723, 22969, 23332, 23778, 24218, 24522, 24543, 24150, 23259, 21859, 20023, 17906, 15728, 13740, 12187, 11269, 11102, 11706, 12994, 14791, 16862, 18948, 20813, 22279, 23250, 23724, 23783, 23570, 23254, 22990, 22889};
    const uint16_t fbank4_48[129] = {0, 1092, 4210, 8903, 14511, 20273, 25455, 29466, 31938, 32767, 32096, 30271, 27750, 25016, 22493, 20481, 19127, 18429, 18258, 18411, 18665, 18822, 18748, 18395, 17792, 17040, 16276, 15643, 15262, 15207, 15493, 16073, 16856, 17720, 18545, 19233, 19735, 20057, 20262, 20459, 20773, 21316, 22155, 23281, 24601, 25937, 27049, 27673, 27572, 26584, 24669, 21929, 18610, 15073, 11746, 9058, 7368, 6906, 7734, 9734, 12630, 16034, 19509, 22640, 25100, 26689, 27358, 27196, 26404, 25241, 23976, 22834, 21961, 21410, 21141, 21044, 20970, 20771, 20330, 19596, 18585, 17384, 16134, 15000, 14144, 13693, 13719, 14223, 15141, 16351, 17702, 19035, 20215, 21152, 21811, 22217, 22442, 22584, 22742, 22988, 23348, 23792, 24230, 24533, 24555, 24164, 23276, 21878, 20043, 17926, 15746, 13755, 12200, 11280, 11114, 11721, 13012, 14812, 16883, 18968, 20830, 22293, 23261, 23734, 23795, 23584, 23271, 23009, 22909};
    const uint16_t fbank5_24[129] = {0, 825, 3212, 6901, 11497, 16523, 21476, 25889, 29385, 31713, 32767, 32585, 31330, 29258, 26671, 23886, 21187, 18804, 16894, 15535, 14736, 14447, 14576, 15014, 15646, 16367, 17089, 17750, 18306, 18734, 19026, 19181, 19204, 19104, 18887, 18565, 18149, 17661, 17130, 16599, 16122, 15769, 15614, 15733, 16192, 17035, 18274, 19876, 21758, 23788, 25788, 27550, 28857, 29509, 29348, 28287, 26325, 23562, 20193, 16496, 12801, 9460, 6800, 5092, 4509, 5112, 6839, 9511, 12860, 16556, 20248, 23605, 26353, 28298, 29343, 29489, 28827, 27513, 25750, 23753, 21730, 19855, 18262, 17031, 16194, 15739, 15620, 15772, 16118, 16582, 17095, 17600, 18054, 18427, 18699, 18860, 18906, 18838, 18660, 18381, 18015, 17584, 17121, 16669, 16280, 16019, 15951, 16142, 16643, 17488, 18676, 20169, 21886, 23703, 25460, 26974, 28058, 28541, 28295, 27251, 25420, 22896, 19856, 16545, 13253, 10286, 7928, 6411, 5888};
    const uint16_t fbank5_48[129] = {0, 825, 3212, 6902, 11498, 16524, 21477, 25890, 29385, 31713, 32767, 32585, 31331, 29258, 26672, 23887, 21188, 18805, 16894, 15536, 14736, 14447, 14576, 15015, 15647, 16367, 17090, 17751, 18307, 18735, 19026, 19181, 19204, 19104, 18888, 18566, 18150, 17662, 17131, 16599, 16123, 15769, 15614, 15733, 16193, 17036, 18275, 19877, 21759, 23789, 25788, 27550, 28857, 29509, 29349, 28287, 26326, 23563, 20194, 16496, 12802, 9460, 6801, 5092, 4509, 5113, 6839, 9512, 12861, 16557, 20248, 23605, 26353, 28298, 29343, 29490, 28827, 27514, 25751, 23754, 21730, 19856, 18262, 17031, 16194, 15739, 15621, 15773, 16119, 16582, 17095, 17600, 18054, 18427, 18699, 18860, 18907, 18839, 18661, 18381, 18015, 17585, 17122, 16669, 16281, 16019, 15952, 16142, 16644, 17488, 18676, 20170, 21887, 23704, 25461, 26975, 28059, 28542, 28295, 27252, 25421, 22897, 19856, 16545, 13254, 10286, 7928, 6412, 5889};
    const uint16_t fbank6_24[129] = {0, 653, 2555, 5541, 9353, 13669, 18139, 22415, 26189, 29219, 31351, 32522, 32767, 32198, 30992, 29362, 27533, 25713, 24074, 22738, 21766, 21160, 20872, 20812, 20867, 20920, 20861, 20607, 20110, 19360, 18388, 17260, 16066, 14911, 13904, 13140, 12695, 12613, 12906, 13549, 14487, 15640, 16912, 18205, 19424, 20494, 21366, 22020, 22465, 22741, 22911, 23048, 23226, 23511, 23945, 24540, 25272, 26083, 26881, 27554, 27977, 28031, 27619, 26675, 25184, 23183, 20763, 18065, 15269, 12577, 10195, 8313, 7083, 6606, 6922, 8001, 9752, 12028, 14646, 17398, 20080, 22506, 24530, 26054, 27034, 27487, 27473, 27097, 26482, 25759, 25051, 24452, 24025, 23791, 23729, 23785, 23875, 23902, 23771, 23397, 22724, 21729, 20429, 18882, 17179, 15437, 13788, 12364, 11283, 10639, 10487, 10845, 11683, 12936, 14505, 16267, 18094, 19859, 21452, 22790, 23823, 24537, 24950, 25113, 25092, 24966, 24811, 24690, 24644};
    const uint16_t fbank6_48[129] = {0, 653, 2555, 5541, 9353, 13669, 18139, 22415, 26189, 29219, 31351, 32522, 32767, 32198, 30992, 29362, 27533, 25713, 24074, 22738, 21766, 21160, 20872, 20812, 20867, 20920, 20861, 20607, 20110, 19360, 18388, 17260, 16066, 14911, 13904, 13140, 12695, 12613, 12906, 13549, 14487, 15640, 16912, 18205, 19424, 20494, 21366, 22020, 22465, 22741, 22911, 23048, 23226, 23511, 23945, 24540, 25272, 26083, 26881, 27554, 27977, 28031, 27619, 26675, 25184, 23183, 20763, 18065, 15269, 12577, 10195, 8313, 7083, 6606, 6922, 8001, 9752, 12028, 14646, 17398, 20080, 22506, 24530, 26054, 27034, 27487, 27473, 27097, 26482, 25759, 25051, 24452, 24025, 23791, 23729, 23785, 23875, 23902, 23771, 23397, 22724, 21729, 20429, 18882, 17179, 15437, 13788, 12364, 11283, 10639, 10487, 10845, 11683, 12936, 14505, 16267, 18094, 19859, 21452, 22790, 23823, 24537, 24950, 25113, 25092, 24966, 24811, 24690, 24644};
    const uint16_t fbank7_24[129] = {0, 453, 1787, 3920, 6726, 10039, 13668, 17410, 21060, 24432, 27363, 29725, 31434, 32446, 32767, 32436, 31533, 30159, 28435, 26488, 24443, 22417, 20511, 18806, 17358, 16204, 15355, 14805, 14532, 14502, 14671, 14995, 15429, 15928, 16455, 16976, 17468, 17909, 18286, 18591, 18818, 18966, 19035, 19026, 18942, 18786, 18561, 18274, 17933, 17547, 17131, 16703, 16287, 15908, 15598, 15390, 15319, 15418, 15717, 16238, 16995, 17989, 19205, 20613, 22165, 23796, 25429, 26972, 28329, 29405, 30107, 30357, 30097, 29295, 27946, 26081, 23763, 21085, 18170, 15159, 12207, 9471, 7100, 5229, 3962, 3373, 3495, 4322, 5806, 7861, 10371, 13198, 16187, 19182, 22030, 24596, 26768, 28461, 29624, 30239, 30320, 29908, 29070, 27889, 26458, 24876, 23236, 21624, 20117, 18771, 17629, 16715, 16039, 15595, 15366, 15327, 15446, 15689, 16021, 16409, 16824, 17240, 17634, 17991, 18297, 18543, 18723, 18832, 18869};
    const uint16_t fbank7_48[129] = {0, 453, 1787, 3920, 6726, 10039, 13668, 17410, 21060, 24432, 27363, 29725, 31434, 32446, 32767, 32436, 31533, 30159, 28435, 26488, 24443, 22417, 20511, 18806, 17358, 16204, 15355, 14805, 14532, 14502, 14671, 14995, 15429, 15928, 16455, 16976, 17468, 17909, 18286, 18591, 18818, 18966, 19035, 19026, 18942, 18786, 18561, 18274, 17933, 17547, 17131, 16703, 16287, 15908, 15598, 15390, 15319, 15418, 15717, 16238, 16995, 17989, 19205, 20613, 22165, 23796, 25429, 26972, 28329, 29405, 30107, 30357, 30097, 29295, 27946, 26081, 23763, 21085, 18170, 15159, 12207, 9471, 7100, 5229, 3962, 3373, 3495, 4322, 5806, 7861, 10371, 13198, 16187, 19182, 22030, 24596, 26768, 28461, 29624, 30239, 30320, 29908, 29070, 27889, 26458, 24876, 23236, 21624, 20117, 18771, 17629, 16715, 16039, 15595, 15366, 15327, 15446, 15689, 16021, 16409, 16824, 17240, 17634, 17991, 18297, 18543, 18723, 18832, 18869};
    const uint16_t fbank8_24[129] = {0, 328, 1297, 2865, 4962, 7496, 10358, 13428, 16581, 19690, 22641, 25329, 27670, 29598, 31076, 32087, 32640, 32767, 32516, 31954, 31154, 30197, 29161, 28120, 27141, 26275, 25560, 25015, 24645, 24436, 24361, 24382, 24452, 24519, 24531, 24437, 24196, 23774, 23151, 22318, 21284, 20068, 18706, 17242, 15732, 14235, 12813, 11528, 10437, 9589, 9022, 8763, 8826, 9208, 9894, 10854, 12048, 13426, 14933, 16508, 18091, 19627, 21064, 22360, 23484, 24415, 25146, 25681, 26037, 26238, 26318, 26314, 26267, 26214, 26190, 26224, 26334, 26530, 26808, 27154, 27544, 27942, 28306, 28590, 28746, 28726, 28489, 28001, 27240, 26197, 24877, 23302, 21506, 19541, 17469, 15360, 13293, 11346, 9597, 8117, 6967, 6196, 5835, 5900, 6387, 7275, 8524, 10081, 11880, 13846, 15900, 17961, 19955, 21812, 23475, 24898, 26052, 26925, 27520, 27854, 27959, 27877, 27656, 27351, 27013, 26691, 26429, 26258, 26199};
    const uint16_t fbank8_48[129] = {0, 328, 1297, 2865, 4962, 7496, 10358, 13428, 16581, 19690, 22641, 25329, 27670, 29598, 31076, 32087, 32640, 32767, 32516, 31954, 31154, 30197, 29161, 28120, 27141, 26275, 25560, 25015, 24645, 24436, 24361, 24382, 24452, 24519, 24531, 24437, 24196, 23774, 23151, 22318, 21284, 20068, 18706, 17242, 15732, 14235, 12813, 11528, 10437, 9589, 9022, 8763, 8826, 9208, 9894, 10854, 12048, 13426, 14933, 16508, 18091, 19627, 21064, 22360, 23484, 24415, 25146, 25681, 26037, 26238, 26318, 26314, 26267, 26214, 26190, 26224, 26334, 26530, 26808, 27154, 27544, 27942, 28306, 28590, 28746, 28726, 28489, 28001, 27240, 26197, 24877, 23302, 21506, 19541, 17469, 15360, 13293, 11346, 9597, 8117, 6967, 6196, 5835, 5900, 6387, 7275, 8524, 10081, 11880, 13846, 15900, 17961, 19955, 21812, 23475, 24898, 26052, 26925, 27520, 27854, 27959, 27877, 27656, 27351, 27013, 26691, 26429, 26258, 26199};
    const uint16_t fbank9_24[129] = {0, 197, 785, 1748, 3061, 4688, 6589, 8714, 11010, 13420, 15884, 18344, 20742, 23026, 25147, 27061, 28732, 30133, 31244, 32054, 32560, 32767, 32686, 32339, 31749, 30946, 29963, 28835, 27600, 26293, 24950, 23604, 22286, 21024, 19840, 18755, 17783, 16934, 16215, 15629, 15173, 14845, 14635, 14536, 14536, 14622, 14783, 15004, 15274, 15579, 15907, 16249, 16594, 16934, 17261, 17569, 17854, 18110, 18336, 18528, 18686, 18807, 18892, 18939, 18950, 18924, 18862, 18764, 18632, 18467, 18271, 18046, 17796, 17523, 17232, 16929, 16620, 16312, 16012, 15732, 15479, 15265, 15101, 14998, 14967, 15020, 15165, 15412, 15767, 16237, 16822, 17522, 18334, 19251, 20261, 21349, 22498, 23686, 24888, 26075, 27219, 28288, 29250, 30074, 30730, 31190, 31429, 31429, 31172, 30650, 29861, 28808, 27504, 25966, 24221, 22300, 20243, 18091, 15893, 13698, 11557, 9521, 7640, 5961, 4524, 3367, 2518, 2000, 1826};
    const uint16_t fbank9_48[129] = {0, 197, 785, 1748, 3061, 4688, 6589, 8714, 11010, 13420, 15884, 18344, 20742, 23026, 25147, 27061, 28732, 30133, 31244, 32054, 32560, 32767, 32686, 32339, 31749, 30946, 29963, 28835, 27600, 26293, 24950, 23604, 22286, 21024, 19840, 18755, 17783, 16934, 16215, 15629, 15173, 14845, 14635, 14536, 14536, 14622, 14783, 15004, 15274, 15579, 15907, 16249, 16594, 16934, 17261, 17569, 17854, 18110, 18336, 18528, 18686, 18807, 18892, 18939, 18950, 18924, 18862, 18764, 18632, 18467, 18271, 18046, 17796, 17523, 17232, 16929, 16620, 16312, 16013, 15732, 15479, 15265, 15101, 14998, 14967, 15020, 15165, 15412, 15767, 16237, 16822, 17522, 18334, 19251, 20261, 21349, 22498, 23686, 24888, 26075, 27219, 28287, 29250, 30074, 30730, 31190, 31429, 31428, 31172, 30650, 29861, 28808, 27504, 25966, 24221, 22300, 20243, 18091, 15893, 13698, 11557, 9521, 7640, 5961, 4524, 3367, 2518, 2000, 1826};
    
    
    const uint16_t lump2ndDeg1[129] =
    {0,306,711,1217,1821,2526,3330,4234,5238,6341,7544,8846,10249,11751,13352,15054,16855,18755,20756,22779,24616,26253,27691,28929,29969,30808,31449,31890,32132,32174,32017,31661,31105,30350,29396,28242,26889,25364,23890,22516,21241,20066,18990,18015,17138,16362,15685,15108,14631,14253,13975,13797,13718,13739,13860,14080,14336,14592,14848,15104,15360,15616,15872,16128,16383,16639,16895,17151,17407,17663,17919,18175,18431,18687,18943,19199,19455,19711,19967,20223,20479,20735,20991,21247,21503,21759,22015,22271,22527,22783,23039,23295,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t lump2ndDeg2[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4885,5241,5679,6200,6803,7488,8255,9105,10037,11052,12149,13328,14589,15933,17359,18867,20458,22131,23864,25472,26916,28195,29309,30259,31044,31665,32121,32412,32539,32501,32298,31931,31399,30702,29841,28815,27628,26431,25317,24285,23336,22469,21684,20982,20362,19824,19369,18995,18705,18496,18370,18326,18364,18485,18688,18943,19199,19455,19711,19967,20223,20479,20735,20991,21247,21503,21759,22015,22271,22527,22783,23039,23295,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t lump2ndDeg3[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120,5376,5632,5888,6144,6400,6656,6912,7168,7424,7680,7936,8192,8448,8704,8960,9216,9478,9793,10172,10615,11122,11692,12327,13025,13787,14613,15503,16457,17474,18555,19701,20910,22182,23519,24918,26259,27473,28558,29517,30347,31050,31625,32073,32393,32585,32649,32586,32395,32077,31630,31056,30355,29526,28639,27814,27053,26356,25723,25154,24648,24207,23829,23515,23265,23078,22956,22897,22903,22972,23104,23301,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t lump2ndDeg4[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120,5376,5632,5888,6144,6400,6656,6912,7168,7424,7680,7936,8192,8448,8704,8960,9216,9472,9728,9984,10240,10496,10752,11008,11264,11520,11776,12032,12288,12544,12800,13056,13312,13568,13824,14080,14364,14693,15066,15483,15945,16450,17000,17594,18232,18915,19642,20413,21228,22088,22992,23940,24932,25968,27000,27945,28801,29569,30249,30840,31342,31756,32082,32319,32467,32527,32499,32382,32177,31883,31501,31030,30492,29987,29525,29108,28735,28407,28123,27882,27687,27535,27428,27364,27345,27371,27440,27554,27712,27914,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t lump2ndDeg5[129] =
    {0,255,511,766,1022,1277,1533,1788,2044,2299,2555,2810,3065,3321,3576,3832,4087,4343,4598,4854,5109,5365,5620,5875,6131,6386,6642,6897,7153,7408,7664,7919,8175,8430,8685,8941,9196,9452,9707,9963,10218,10474,10729,10985,11240,11495,11751,12006,12262,12517,12773,13028,13284,13539,13795,14050,14306,14561,14816,15072,15327,15583,15838,16094,16349,16605,16860,17116,17371,17626,17882,18137,18393,18648,18913,19203,19520,19861,20229,20622,21041,21485,21956,22452,22973,23521,24094,24693,25317,25967,26643,27345,28060,28730,29349,29917,30433,30898,31311,31673,31983,32243,32450,32607,32711,32765,32767,32718,32617,32465,32264,32070,31901,31758,31641,31549,31484,31443,31429,31440,31477,31540,31628,31742,31882,32048,32239,32456,32767};
    
    const uint16_t lump3rdDeg1[129] =
    {0,267,602,1073,1747,2691,3975,5665,7829,10530,13708,17166,20701,24109,27187,29733,31542,32412,32195,31011,29064,26557,23693,20675,17707,14992,12731,11010,9773,8951,8477,8283,8301,8464,8704,8960,9216,9472,9728,9984,10240,10496,10752,11008,11264,11520,11776,12032,12288,12544,12800,13056,13312,13568,13824,14080,14336,14592,14848,15104,15360,15616,15872,16128,16383,16639,16895,17151,17407,17663,17919,18175,18431,18687,18943,19199,19455,19711,19967,20223,20479,20735,20991,21247,21503,21759,22015,22271,22527,22783,23039,23295,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t lump3rdDeg2[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4616,4933,5360,5955,6775,7877,9317,11154,13441,16139,19085,22107,25033,27693,29916,31528,32360,32277,31368,29804,27756,25395,22894,20423,18154,16257,14817,13789,13114,12737,12600,12645,12816,13056,13312,13568,13824,14080,14336,14592,14848,15104,15360,15616,15872,16128,16383,16639,16895,17151,17407,17663,17919,18175,18431,18687,18943,19199,19455,19711,19967,20223,20479,20735,20991,21247,21503,21759,22015,22271,22527,22783,23039,23295,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t lump3rdDeg3[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120,5376,5632,5888,6144,6400,6656,6912,7168,7424,7680,7936,8192,8448,8704,8965,9267,9657,10182,10889,11825,13038,14574,16479,18731,21195,23732,26200,28458,30363,31776,32554,32581,31917,30704,29082,27193,25179,23180,21339,19795,18628,17804,17274,16993,16913,16987,17167,17408,17663,17919,18175,18431,18687,18943,19199,19455,19711,19967,20223,20479,20735,20991,21247,21503,21759,22015,22271,22527,22783,23039,23295,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t lump3rdDeg4[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120,5376,5632,5888,6144,6400,6656,6912,7168,7424,7680,7936,8192,8448,8704,8960,9216,9472,9728,9984,10240,10496,10752,11008,11264,11520,11776,12032,12288,12544,12800,13056,13315,13603,13957,14413,15008,15778,16760,17990,19504,21290,23250,25272,27248,29069,30625,31805,32502,32620,32195,31338,30157,28762,27263,25768,24388,23231,22366,21768,21402,21230,21217,21325,21518,21760,22015,22271,22527,22783,23039,23295,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t lump3rdDeg5[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120,5376,5632,5888,6144,6400,6656,6912,7168,7424,7680,7936,8192,8448,8704,8960,9216,9472,9728,9984,10240,10496,10752,11008,11264,11520,11776,12032,12288,12544,12800,13056,13312,13568,13824,14080,14336,14592,14848,15104,15360,15616,15872,16128,16383,16639,16895,17151,17407,17665,17941,18261,18651,19134,19737,20485,21404,22517,23823,25253,26732,28184,29534,30704,31621,32207,32394,32202,31704,30977,30097,29140,28180,27295,26560,26026,25680,25495,25446,25509,25657,25867,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    
    
    const uint16_t doubleLump2nd1[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2305,2596,2987,3547,4344,5447,6923,8842,11272,14240,17570,21028,24375,27375,29792,31389,31930,31184,29142,26084,22309,18116,13805,9675,6026,3155,1313,448,398,1002,2095,3517,5105,6696,8129,9315,10275,11042,11645,12117,12488,12791,13056,13312,13568,13824,14080,14336,14592,14848,15104,15360,15616,15872,16128,16383,16639,16895,17151,17407,17663,17919,18175,18431,18687,18943,19199,19455,19711,19967,20223,20479,20735,20991,21247,21503,21759,22015,22271,22527,22783,23039,23295,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t doubleLump2nd2[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120,5376,5632,5888,6144,6400,6656,6940,7308,7822,8543,9531,10847,12553,14708,17343,20302,23359,26290,28871,30876,32080,32258,31190,28851,25524,21521,17150,12723,8548,4936,2196,597,91,490,1607,3252,5238,7376,9477,11354,12895,14127,15092,15833,16392,16813,17137,17407,17663,17919,18175,18431,18687,18943,19199,19455,19711,19967,20223,20479,20735,20991,21247,21503,21759,22015,22271,22527,22783,23039,23295,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t doubleLump2nd3[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120,5376,5632,5888,6144,6400,6656,6912,7168,7424,7680,7936,8192,8448,8704,8960,9216,9472,9728,9984,10240,10496,10752,11008,11284,11630,12096,12736,13601,14744,16215,18067,20330,22870,25477,27944,30063,31625,32421,32243,30884,28308,24794,20655,16206,11758,7627,4126,1568,232,81,907,2501,4652,7151,9789,12356,14642,16513,17998,19151,20023,20667,21136,21483,21759,22015,22271,22527,22783,23039,23295,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t doubleLump2nd4[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120,5376,5632,5888,6144,6400,6656,6912,7168,7424,7680,7936,8192,8448,8704,8960,9216,9472,9728,9984,10240,10496,10752,11008,11264,11520,11776,12032,12288,12544,12800,13056,13312,13568,13824,14080,14336,14592,14848,15104,15360,15630,15954,16375,16934,17675,18640,19872,21413,23290,25391,27527,29509,31149,32258,32646,32124,30504,27740,24100,19896,15440,11044,7019,3677,1330,263,452,1674,3702,6310,9270,12356,15342,18000,20174,21893,23220,24216,24941,25458,25827,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t doubleLump2nd5[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120,5376,5632,5888,6144,6400,6656,6912,7168,7424,7680,7936,8192,8448,8704,8960,9216,9472,9728,9984,10240,10496,10752,11008,11264,11520,11776,12032,12288,12544,12800,13056,13312,13568,13824,14080,14336,14592,14848,15104,15360,15616,15872,16128,16383,16639,16895,17151,17407,17663,17919,18175,18431,18687,18943,19199,19455,19711,19977,20281,20657,21137,21753,22539,23526,24748,26226,27868,29509,30979,32112,32740,32694,31808,29913,26956,23195,18937,14491,10164,6266,3103,985,199,737,2362,4830,7898,11324,14864,18275,21314,23800,25763,27272,28396,29208,29775,30170,30462,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    
    const uint16_t doubleLump3rd1[129] =
    {0,1967,4074,6291,8589,10938,13307,15667,17988,20239,22392,24416,26281,27957,29415,30624,31554,32177,32460,32380,31947,31196,30160,28872,27368,25681,23844,21892,19859,17778,15683,13608,11588,9655,7844,6189,4723,3480,2472,1685,1104,713,497,442,531,749,1082,1513,2028,2612,3248,3923,4620,5324,6021,6694,7333,7938,8511,9054,9569,10057,10522,10965,11387,11792,12180,12554,12915,13267,13610,13947,14280,14611,14941,15271,15601,15931,16262,16592,16922,17252,17582,17912,18242,18572,18902,19233,19563,19893,20223,20553,20883,21213,21543,21873,22203,22534,22864,23194,23524,23854,24184,24514,24844,25174,25505,25835,26165,26495,26825,27155,27485,27815,28145,28476,28806,29136,29466,29796,30126,30456,30786,31116,31447,31777,32107,32437,32767};
    const uint16_t doubleLump3rd2[129] =
    {0,257,521,799,1096,1422,1781,2181,2628,3130,3693,4324,5030,5817,6693,7664,8737,9919,11216,12634,14158,15763,17424,19117,20815,22495,24129,25695,27166,28517,29724,30761,31603,32224,32601,32707,32518,32009,31182,30070,28706,27126,25364,23455,21433,19332,17188,15035,12907,10839,8866,7022,5341,3858,2608,1625,930,508,337,398,669,1129,1756,2531,3433,4439,5530,6684,7881,9099,10318,11516,12673,13768,14782,15714,16569,17350,18064,18714,19306,19844,20333,20777,21181,21551,21890,22203,22496,22772,23037,23295,23551,23807,24063,24319,24575,24831,25087,25343,25599,25855,26111,26367,26623,26879,27135,27391,27647,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t doubleLump3rd3[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5125,5395,5681,5988,6323,6690,7096,7547,8047,8604,9222,9908,10667,11505,12427,13440,14550,15760,17066,18443,19870,21323,22779,24215,25607,26934,28170,29295,30284,31114,31762,32205,32420,32385,32075,31468,30554,29364,27930,26289,24475,22522,20466,18341,16182,14023,11900,9847,7898,6090,4456,3031,1849,947,351,55,33,263,722,1387,2234,3239,4381,5635,6978,8388,9840,11312,12781,14222,15613,16931,18154,19273,20295,21226,22071,22835,23526,24149,24709,25213,25665,26073,26442,26777,27085,27372,27642,27903,28159,28415,28671,28927,29183,29439,29695,29951,30207,30463,30719,30975,31231,31487,31743,31999,32255,32511,32767};
    const uint16_t doubleLump3rd4[129] =
    {0,256,512,768,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4096,4352,4608,4864,5120,5376,5632,5888,6144,6400,6656,6912,7168,7424,7680,7936,8192,8448,8704,8960,9216,9472,9730,9995,10272,10565,10879,11220,11591,11997,12444,12936,13478,14075,14731,15451,16241,17104,18046,19071,20178,21348,22560,23794,25027,26239,27409,28515,29536,30451,31240,31880,32350,32631,32699,32535,32116,31423,30439,29186,27698,26009,24156,22172,20092,17952,15785,13626,11511,9473,7549,5772,4177,2799,1673,833,313,113,211,579,1194,2030,3061,4264,5612,7080,8643,10276,11954,13651,15343,17004,18609,20133,21551,22848,24030,25103,26074,26950,27737,28443,29074,29637,30139,30586,30986,31345,31671,31968,32246,32510,32767};
    const uint16_t doubleLump3rd5[129] =
    {0,330,660,990,1320,1651,1981,2311,2641,2971,3301,3631,3961,4291,4622,4952,5282,5612,5942,6272,6602,6932,7262,7593,7923,8253,8583,8913,9243,9573,9903,10233,10564,10894,11224,11554,11884,12214,12544,12874,13204,13534,13865,14195,14525,14855,15185,15515,15845,16175,16505,16836,17166,17496,17826,18156,18487,18820,19157,19500,19852,20213,20587,20975,21380,21802,22245,22710,23198,23713,24256,24829,25434,26073,26746,27443,28147,28844,29519,30155,30739,31254,31685,32018,32236,32325,32270,32054,31663,31082,30295,29287,28044,26578,24923,23112,21179,19159,17084,14989,12908,10875,8923,7086,5399,3895,2607,1571,820,387,307,590,1213,2143,3352,4810,6486,8351,10375,12528,14779,17100,19460,21829,24178,26476,28693,30800,32767};
    
    const uint16_t *lump2ndDeg[5] = {lump2ndDeg1, lump2ndDeg2, lump2ndDeg3, lump2ndDeg4, lump2ndDeg5};
    
    const uint16_t *lump3rdDeg[5] = {lump3rdDeg1, lump3rdDeg2, lump3rdDeg3, lump3rdDeg4, lump3rdDeg5};
    
    const uint16_t *doubleLump2ndDeg[5] = {doubleLump2nd1, doubleLump2nd2, doubleLump2nd3, doubleLump2nd4, doubleLump2nd5};
    
    const uint16_t *doubleLump3rdDeg[5] = {doubleLump3rd1, doubleLump3rd2, doubleLump3rd3, doubleLump3rd4, doubleLump3rd5};
    
    const uint16_t *allLinear9_9[9] = {linear9, linear9, linear9, linear9, linear9, linear9, linear9, linear9, linear9};
    
    const uint16_t *allLinear5_5[5] = {linear5, linear5, linear5, linear5, linear5};
    
    const uint16_t *allLinear65_3[3] = {linear, linear, linear};
    
    const uint16_t *allLinear65_5[5] = {linear, linear, linear, linear, linear};
    
    const uint16_t *allLinear65_9[9] = {linear, linear, linear, linear, linear, linear, linear, linear, linear};
    
    const uint16_t *allLinear129_3[3] = {linear129, linear129, linear129};
    
    const uint16_t *allLinear129_5[5] = {linear129, linear129, linear129, linear129, linear129};
    
    const uint16_t *allLinear129_9[9] = {linear129, linear129, linear129, linear129, linear129, linear129, linear129, linear129, linear129};
    
    const uint16_t *fbank_24[9] = {fbank1_24, fbank2_24, fbank3_24, fbank4_24, fbank5_24, fbank6_24, fbank7_24, fbank8_24, fbank9_24};
    const uint16_t *fbank_48[9] = {fbank1_48, fbank2_48, fbank3_48, fbank4_48, fbank5_48, fbank6_48, fbank7_48, fbank8_48, fbank9_48};
    
    
    const uint16_t *skipsaw[5] = {linear, skipsaw2, skipsaw3, skipsaw4, skipsaw5};
    const uint16_t *hopsaw[5] = {linear, hopsaw2, hopsaw3, hopsaw4, hopsaw5};
    
    const uint16_t *assorted[5] = {sharkfin, bushy, nested_threes, anduh, flipsaw2};
    
    const uint16_t *tenor48AttackFamily[5] = {tenora48Atk,tenore48Atk,tenori48Atk,tenoro48Atk,tenoru48Atk};
    const uint16_t *tenor48ReleaseFamily[5] = {tenora48Rls,tenore48Rls,tenori48Rls,tenoro48Rls,tenoru48Rls};
    
    
    const uint16_t *soprano48AttackFamily[5] = {sopranoa48Atk,sopranoe48Atk,sopranoi48Atk,sopranoo48Atk,sopranou48Atk};
    const uint16_t *soprano48ReleaseFamily[5] = {sopranoa48Rls,sopranoe48Rls,sopranoi48Rls,sopranoo48Rls,sopranou48Rls};
    
    const uint16_t *artificial_1_48AttackFamily[5] = {artificial148Atk,artificial248Atk,artificial348Atk,artificial448Atk,artificial548Atk};
    const uint16_t *artificial_1_48ReleaseFamily[5] = {artificial148Rls,artificial248Rls,artificial348Rls,artificial448Rls,artificial548Rls};
    
    
    
    const uint16_t *impshort[17] = {imp1, imp2, imp3, imp4, imp6, imp8, imp10, imp12, imp14, imp16, imp18, imp20, imp22, imp24, imp26, imp28, imp33};
    
    const uint16_t *sinefoldAttackFamily[9] = { sine, sinefold_ctr_1,
        sinefold_ctr_2, sinefold_ctr_3, sinefold_ctr_4, sinefold_ctr_5,
        sinefold_ctr_6, sinefold_ctr_7, sinefold_ctr_8 };
    const uint16_t *sinefoldReleaseFamily[9] = { sine, sinefold_ctr_1,
        sinefold_ctr_2, sinefold_ctr_3, sinefold_ctr_4, sinefold_ctr_5,
        sinefold_ctr_6, sinefold_ctr_7, sinefold_ctr_8 };
    
    const uint16_t *threeSineFolds[3] = {  sine, sinefold_ctr_1, sinefold_ctr_2};
    
    const uint16_t *perlinAttackFamily[9] = {sine, perlin6_2, perlin6_3, perlin6_4, perlin6_5, perlin6_6, perlin6_7, perlin6_8, perlin6_8};
    const uint16_t *perlinReleaseFamily[9] = {sine, perlin6_2, perlin6_3, perlin6_4, perlin6_5, perlin6_6, perlin6_7, perlin6_8, perlin6_8};
    
    const uint16_t *bounceAttackFamily[9] = { bounce1, bounce2, bounce3,
        bounce4, bounce5, bounce6, bounce7, bounce8, bounce8 };
    const uint16_t *bounceReleaseFamily[9] = { bounce1, bounce2, bounce3,
        bounce4, bounce5, bounce6, bounce7, bounce8, bounce8 };
    
    const uint16_t *threeBounce[3] = { bounce1, bounce2, bounce3};
    
    
    const uint16_t *trifoldAttackFamily[9] = { trifold_1, trifold_2, trifold_3,
        trifold_4, trifold_5, trifold_6, trifold_7, trifold_8, trifold_9 };
    const uint16_t *trifoldReleaseFamily[9] = { trifold_1, trifold_2, trifold_3,
        trifold_4, trifold_5, trifold_6, trifold_7, trifold_8, trifold_9 };
    
    const uint16_t *trioddAttackFamily[9] = { triodd_1, triodd_2, triodd_3,
        triodd_4, triodd_5, triodd_6, triodd_7, triodd_8, triodd_9 };
    const uint16_t *trioddReleaseFamily[9] = { triodd_1, triodd_2, triodd_3,
        triodd_4, triodd_5, triodd_6, triodd_7, triodd_8, triodd_9 };
    
    const uint16_t *trifudgeAttackFamily[9] = { trifudge_1, trifudge_2,
        trifudge_3, trifudge_4, trifudge_5, trifudge_6, trifudge_7,
        trifudge_8, trifudge_9 };
    const uint16_t *trifudgeReleaseFamily[9] = { trifudge_1, trifudge_2,
        trifudge_3, trifudge_4, trifudge_5, trifudge_6, trifudge_7,
        trifudge_8, trifudge_9 };
    
    const uint16_t *moog1AttackFamily[9] = { moog1attack, moog2attack,
        moog3attack, moog5attack, moog6attack, moog7attack, moog8attack,
        moog9attack, moog9attack };
    const uint16_t *moog1ReleaseFamily[9] = { moog1release, moog2release,
        moog3release, moog5release, moog6release, moog7release,
        moog8release, moog9release, moog9release };
    
    const uint16_t *moog2AttackFamily[9] = { moog1attack2, moog2attack2,
        moog3attack2, moog4attack2, moog5attack2, moog6attack2,
        moog7attack2, moog8attack2, moog9attack2 };
    const uint16_t *moog2ReleaseFamily[9] = { moog1release2, moog2release2,
        moog3release2, moog4release2, moog5release2, moog6release2,
        moog7release2, moog8release2, moog9release2 };
    
    const uint16_t *sawBendAttackFamily[5] = { fivept_sawbend_pre,
        fivept_sawbend_second, fivept_sawbend_third, fivept_sawbend_fourth,
        fivept_sawbend_pre };
    const uint16_t *sawBendReleaseFamily[5] = { fivept_sawbend_pre,
        fivept_sawbend_second, fivept_sawbend_third, fivept_sawbend_fourth,
        fivept_sawbend_pre };
    
    const uint16_t *exciteBikeAttackFamily[9] = { excitebike1, excitebike2,
        excitebike3, excitebike4, excitebike5, excitebike6, excitebike7,
        excitebike8, excitebike9 };
    const uint16_t *exciteBikeReleaseFamily[9] = { excitebike1, excitebike2,
        excitebike3, excitebike4, excitebike5, excitebike6, excitebike7,
        excitebike8, excitebike9 };
    
    const uint16_t *randAttackFamily[33] = { rand0, rand1, rand2, rand3, rand4,
        rand5, rand6, rand7, rand8, rand9, rand10, rand11, rand12, rand13,
        rand14, rand15, rand16, rand17, rand18, rand19, rand20, rand21,
        rand22, rand23, rand24, rand25, rand26, rand27, rand28, rand29,
        rand30, rand31, rand32 };
    const uint16_t *randReleaseFamily[33] = { rand0, rand1, rand2, rand3, rand4,
        rand5, rand6, rand7, rand8, rand9, rand10, rand11, rand12, rand13,
        rand14, rand15, rand16, rand17, rand18, rand19, rand20, rand21,
        rand22, rand23, rand24, rand25, rand26, rand27, rand28, rand29,
        rand30, rand31, rand32 };
    
    const uint16_t *gaussAttackFamily[33] = { gauss0, gauss1, gauss2, gauss3,
        gauss4, gauss5, gauss6, gauss7, gauss8, gauss9, gauss10, gauss11,
        gauss12, gauss13, gauss14, gauss15, gauss16, gauss17, gauss18,
        gauss19, gauss20, gauss21, gauss22, gauss23, gauss24, gauss25,
        gauss26, gauss27, gauss28, gauss29, gauss30, gauss31, gauss32 };
    const uint16_t *gaussReleaseFamily[33] = { gauss0, gauss1, gauss2, gauss3,
        gauss4, gauss5, gauss6, gauss7, gauss8, gauss9, gauss10, gauss11,
        gauss12, gauss13, gauss14, gauss15, gauss16, gauss17, gauss18,
        gauss19, gauss20, gauss21, gauss22, gauss23, gauss24, gauss25,
        gauss26, gauss27, gauss28, gauss29, gauss30, gauss31, gauss32 };
    
    const uint16_t *gauss_noconformAttackFamily[33] = { gauss_noconform0,
        gauss_noconform1, gauss_noconform2, gauss_noconform3,
        gauss_noconform4, gauss_noconform5, gauss_noconform6,
        gauss_noconform7, gauss_noconform8, gauss_noconform9,
        gauss_noconform10, gauss_noconform11, gauss_noconform12,
        gauss_noconform13, gauss_noconform14, gauss_noconform15,
        gauss_noconform16, gauss_noconform17, gauss_noconform18,
        gauss_noconform19, gauss_noconform20, gauss_noconform21,
        gauss_noconform22, gauss_noconform23, gauss_noconform24,
        gauss_noconform25, gauss_noconform26, gauss_noconform27,
        gauss_noconform28, gauss_noconform29, gauss_noconform30,
        gauss_noconform31, gauss_noconform32 };
    const uint16_t *gauss_noconformReleaseFamily[33] = { gauss_noconform0,
        gauss_noconform1, gauss_noconform2, gauss_noconform3,
        gauss_noconform4, gauss_noconform5, gauss_noconform6,
        gauss_noconform7, gauss_noconform8, gauss_noconform9,
        gauss_noconform10, gauss_noconform11, gauss_noconform12,
        gauss_noconform13, gauss_noconform14, gauss_noconform15,
        gauss_noconform16, gauss_noconform17, gauss_noconform18,
        gauss_noconform19, gauss_noconform20, gauss_noconform21,
        gauss_noconform22, gauss_noconform23, gauss_noconform24,
        gauss_noconform25, gauss_noconform26, gauss_noconform27,
        gauss_noconform28, gauss_noconform29, gauss_noconform30,
        gauss_noconform31, gauss_noconform32 };
    
    const uint16_t *gauss_lowAttackFamily[33] = { gauss_low0, gauss_low1,
        gauss_low2, gauss_low3, gauss_low4, gauss_low5, gauss_low6,
        gauss_low7, gauss_low8, gauss_low9, gauss_low10, gauss_low11,
        gauss_low12, gauss_low13, gauss_low14, gauss_low15, gauss_low16,
        gauss_low17, gauss_low18, gauss_low19, gauss_low20, gauss_low21,
        gauss_low22, gauss_low23, gauss_low24, gauss_low25, gauss_low26,
        gauss_low27, gauss_low28, gauss_low29, gauss_low30, gauss_low31,
        gauss_low32 };
    const uint16_t *gauss_lowReleaseFamily[33] = { gauss_low0, gauss_low1,
        gauss_low2, gauss_low3, gauss_low4, gauss_low5, gauss_low6,
        gauss_low7, gauss_low8, gauss_low9, gauss_low10, gauss_low11,
        gauss_low12, gauss_low13, gauss_low14, gauss_low15, gauss_low16,
        gauss_low17, gauss_low18, gauss_low19, gauss_low20, gauss_low21,
        gauss_low22, gauss_low23, gauss_low24, gauss_low25, gauss_low26,
        gauss_low27, gauss_low28, gauss_low29, gauss_low30, gauss_low31,
        gauss_low32 };
    
    const uint16_t *gauss_low_noconformAttackFamily[33] =
    { gauss_low_noconform0, gauss_low_noconform1, gauss_low_noconform2,
        gauss_low_noconform3, gauss_low_noconform4,
        gauss_low_noconform5, gauss_low_noconform6,
        gauss_low_noconform7, gauss_low_noconform8,
        gauss_low_noconform9, gauss_low_noconform10,
        gauss_low_noconform11, gauss_low_noconform12,
        gauss_low_noconform13, gauss_low_noconform14,
        gauss_low_noconform15, gauss_low_noconform16,
        gauss_low_noconform17, gauss_low_noconform18,
        gauss_low_noconform19, gauss_low_noconform20,
        gauss_low_noconform21, gauss_low_noconform22,
        gauss_low_noconform23, gauss_low_noconform24,
        gauss_low_noconform25, gauss_low_noconform26,
        gauss_low_noconform27, gauss_low_noconform28,
        gauss_low_noconform29, gauss_low_noconform30,
        gauss_low_noconform31, gauss_low_noconform32 };
    const uint16_t *gauss_low_noconformReleaseFamily[33] =
    { gauss_low_noconform0, gauss_low_noconform1, gauss_low_noconform2,
        gauss_low_noconform3, gauss_low_noconform4,
        gauss_low_noconform5, gauss_low_noconform6,
        gauss_low_noconform7, gauss_low_noconform8,
        gauss_low_noconform9, gauss_low_noconform10,
        gauss_low_noconform11, gauss_low_noconform12,
        gauss_low_noconform13, gauss_low_noconform14,
        gauss_low_noconform15, gauss_low_noconform16,
        gauss_low_noconform17, gauss_low_noconform18,
        gauss_low_noconform19, gauss_low_noconform20,
        gauss_low_noconform21, gauss_low_noconform22,
        gauss_low_noconform23, gauss_low_noconform24,
        gauss_low_noconform25, gauss_low_noconform26,
        gauss_low_noconform27, gauss_low_noconform28,
        gauss_low_noconform29, gauss_low_noconform30,
        gauss_low_noconform31, gauss_low_noconform32 };
    
    const uint16_t *algerianAttackFamily[5] = { algerian_t, algerian_r,
        algerian_e, algerian_w, algerian_t, };
    const uint16_t *algerianReleaseFamily[5] = { algerian_a, algerian_s,
        algerian_o, algerian_e, algerian_s, };
    
    const uint16_t *gammaSymAttackFamily[9] = { gamma1, gamma2, gamma3, gamma4,
        linear, gamma6, gamma7, gamma8, gamma9 };
    const uint16_t *gammaSymReleaseFamily[9] = { gamma1, gamma2, gamma3, gamma4,
        linear, gamma6, gamma7, gamma8, gamma9 };
    
    const uint16_t *gammaAsymAttackFamily[9] = { gamma1, gamma2, gamma3, gamma4,
        linear, gamma6, gamma7, gamma8, gamma9 };
    const uint16_t *gammaAsymReleaseFamily[9] = { gamma9, gamma8, gamma7,
        gamma6, linear, gamma4, gamma3, gamma2, gamma1 };
    
    // more dramatic transition to expo
    
    const uint16_t *sharpExpoSymAttackFamily[9] = { iExpo, iQuart, iCube, iQuad,
        linear, quad, cube, quart, expo };
    const uint16_t *sharpExpoSymReleaseFamily[9] = { iExpo, iQuart, iCube,
        iQuad, linear, quad, cube, quart, expo };
    
    const uint16_t *sharpExpoAsymAttackFamily[9] = { iExpo, iQuart, iCube,
        iQuad, linear, quad, cube, quart, expo };
    const uint16_t *sharpExpoAsymReleaseFamily[9] = { expo, quart, cube, quad,
        linear, iQuad, iCube, iQuart, iExpo };
    
    // more dramatic transition to linear
    
    const uint16_t *sharpLinSymAttackFamily[9] = { iExpo, iQuint, iQuart, iCube,
        linear, cube, quart, quint, expo };
    const uint16_t *sharpLinSymReleaseFamily[9] = { iExpo, iQuint, iQuart,
        iCube, linear, cube, quart, quint, expo };
    
    const uint16_t *sharpLinAsymAttackFamily[9] = { iExpo, iQuint, iQuart,
        iCube, linear, cube, quart, quint, expo };
    const uint16_t *sharpLinAsymReleaseFamily[9] = { expo, quint, quart, cube,
        linear, iCube, iQuart, iQuint, iExpo };
    
    // limit to quartic
    
    const uint16_t *quartSymAttackFamily[9] = { iQuint, iQuart, iCube, iQuad,
        linear, cube, quart, quint, expo };
    const uint16_t *quartSymReleaseFamily[9] = { iQuint, iQuart, iCube, iQuad,
        linear, cube, quart, quint, expo };
    
    const uint16_t *quartAsymAttackFamily[9] = { iQuint, iQuart, iCube, iQuad,
        linear, cube, quart, quint, expo };
    const uint16_t *quartAsymReleaseFamily[9] = { quint, quart, cube, quad,
        linear, iQuad, iCube, iQuart, iQuint };
    
    const uint16_t *superEllipse1SymAttackFamily[5] = { superEllipse1_1,
        superEllipse1_2, superEllipse1_3, superEllipse1_4, superEllipse1_5 };
    const uint16_t *superEllipse1SymReleaseFamily[5] = { superEllipse1_1,
        superEllipse1_2, superEllipse1_3, superEllipse1_4, superEllipse1_5 };
    
    const uint16_t *superEllipse1AsymAttackFamily[5] = { superEllipse1_1,
        superEllipse1_2, superEllipse1_3, superEllipse1_4, superEllipse1_5 };
    const uint16_t *superEllipse1AsymReleaseFamily[5] = { superEllipse1_5,
        superEllipse1_4, superEllipse1_3, superEllipse1_2, superEllipse1_1 };
    
    const uint16_t *moogShiftedAttackFamily[9] = { moogShiftedAttack1,
        moogShiftedAttack2, moogShiftedAttack3, moogShiftedAttack4,
        moogShiftedAttack5, moogShiftedAttack6, moogShiftedAttack7,
        moogShiftedAttack8, moogShiftedAttack9 };
    const uint16_t *moogShiftedReleaseFamily[9] = { moogShiftedRelease1,
        moogShiftedRelease2, moogShiftedRelease3, moogShiftedRelease4,
        moogShiftedRelease5, moogShiftedRelease6, moogShiftedRelease7,
        moogShiftedRelease8, moogShiftedRelease9 };
    
    const uint16_t *moogInvertedAttackFamily[9] = { moogInvertedTimeAttack1,
        moogInvertedTimeAttack2, moogInvertedTimeAttack3,
        moogInvertedTimeAttack4, moogInvertedTimeAttack5,
        moogInvertedTimeAttack6, moogInvertedTimeAttack7,
        moogInvertedTimeAttack8, moogInvertedTimeAttack9 };
    
    const uint16_t *moogInvertedReleaseFamily[9] = { moogInvertedTimeRelease1,
        moogInvertedTimeRelease2, moogInvertedTimeRelease3,
        moogInvertedTimeRelease4, moogInvertedTimeRelease5,
        moogInvertedTimeRelease6, moogInvertedTimeRelease7,
        moogInvertedTimeRelease8, moogInvertedTimeRelease9 };
    
    const uint16_t *moogNormalizedAttackFamily[9] = { moogNormalizedAttack1,
        moogNormalizedAttack2, moogNormalizedAttack3, moogNormalizedAttack4,
        moogNormalizedAttack5, moogNormalizedAttack6, moogNormalizedAttack7,
        moogNormalizedAttack8, moogNormalizedAttack9 };
    const uint16_t *moogNormalizedReleaseFamily[9] = { moogNormalizedRelease1,
        moogNormalizedRelease2, moogNormalizedRelease3,
        moogNormalizedRelease4, moogNormalizedRelease5,
        moogNormalizedRelease6, moogNormalizedRelease7,
        moogNormalizedRelease8, moogNormalizedRelease9 };
    
    const uint16_t *moogSquareShiftAttackFamily[9] = { sine,
        moogSquareShiftedAttack2, moogSquareShiftedAttack3,
        moogSquareShiftedAttack4, moogSquareShiftedAttack5,
        moogSquareShiftedAttack6, moogSquareShiftedAttack7,
        moogSquareShiftedAttack8, moogSquareShiftedAttack9 };
    const uint16_t *moogSquareShiftReleaseFamily[9] = { sine,
        moogSquareShiftRelease2, moogSquareShiftRelease3,
        moogSquareShiftRelease4, moogSquareShiftRelease5,
        moogSquareShiftRelease6, moogSquareShiftRelease7,
        moogSquareShiftRelease8, moogSquareShiftRelease9 };
    
    const uint16_t *moogImpossibleTriAttackFamily[9] = { sine,
        moogImpossibleTri2, moogImpossibleTri3, moogImpossibleTri4,
        moogImpossibleTri5, moogImpossibleTri6, moogImpossibleTri7,
        moogImpossibleTri8, moogImpossibleTri9 };
    const uint16_t *moogImpossibleTriReleaseFamily[9] = { sine,
        moogImpossibleTri2, moogImpossibleTri3, moogImpossibleTri4,
        moogImpossibleTri5, moogImpossibleTri6, moogImpossibleTri7,
        moogImpossibleTri8, moogImpossibleTri9 };
    
    const uint16_t *stepsAttackFamily[9] = { sine, twoStep, twoStepPlateau,
        threeStep, threeStepPlateau, fourStep, fourStepPlateau, fiveStep,
        fiveStepPlateau };
    const uint16_t *stepsReleaseFamily[9] = { sine, twoStep, twoStepPlateau,
        threeStep, threeStepPlateau, fourStep, fourStepPlateau, fiveStep,
        fiveStepPlateau };
    
    const uint16_t *ascendingAdditiveClampAttackFamily[9] = { sine,
        ascendingAdditiveClamp2, ascendingAdditiveClamp3,
        ascendingAdditiveClamp4, ascendingAdditiveClamp5,
        ascendingAdditiveClamp6, ascendingAdditiveClamp7,
        ascendingAdditiveClamp8, ascendingAdditiveClamp9 };
    const uint16_t *ascendingAdditiveClampReleaseFamily[9] = { sine,
        ascendingAdditiveClamp2, ascendingAdditiveClamp3,
        ascendingAdditiveClamp4, ascendingAdditiveClamp5,
        ascendingAdditiveClamp6, ascendingAdditiveClamp7,
        ascendingAdditiveClamp8, ascendingAdditiveClamp9 };
    
    uint16_t attackHoldArray[17][129];
    uint16_t releaseHoldArray[17][129];
    
    
    
    

	
    
    int pressCounter;
    
    int freqMode; // {audio, env, seq}
    int loopMode; // {noloop, looping}
    int trigMode; // {noretrigger, hardsync, nongatedretrigger, gated, pendulum}
    int sampleHoldMode; // {nosampleandhold, a, b, ab, antidecimate, decimate}
    int logicOutA; // {triggerA, gateA, deltaA}
    int logicOutB;
    

	MyModule() : Module(NUM_PARAMS, NUM_INPUTS, NUM_OUTPUTS, NUM_LIGHTS) {}
	void step() override;
    
    //these are the variables used to generate the phase information that feeds our interpolations
    int fixMorph;
    int morphBuffer[8];
    int getMorph;
    
    int time1;
    int time2;
    
    //most recent value from our expo decay
    int expoScale;
    
    int position;
    int inc;
    int incSign = 1;
    
    float attackCount;
    float releaseCount;
    int expoIndex;
    
    uint32_t out;
    
    
    bool triggerState;
    bool lastTriggerState;


    
    //wavetable size - 1 in fix16 and that number doubled
    int span;
    int spanx2;
    
    //this is an integer that compensates for wavetable size in our frequency calculation (defined on wavetable family change)
    int tableSizeCompensation;
    
    //per family bit shift amounts to determine the morph  (defined on wavetable family change)
    uint32_t morphBitShiftRight;
    uint32_t morphBitShiftLeft;
    
    
    //averaged ADC values
    uint32_t time2Average;
    uint32_t morphAverage;
    
    // helper function to load the selected family to ram

    
    // we store our family stuct pointers here
    Family familyArray[3][8];
    
    // helpful variable we can use for the currently selected family struct
    Family currentFamily;
    
    bool switchARTimes;

    
    int familyIndicator;
    
    uint32_t holdState;
    
    uint32_t modeFlag;
    uint32_t detectOn;
    uint32_t displayNewMode;
    
    
    int flagHolder;
    

    
    void readDetect(void);
    void readRelease(uint32_t);
    void handleRelease(uint32_t);
    void changeMode(uint32_t);
    void showMode(uint32_t);
    void familyRGB(void);
    void clearLEDs(void);
    void risingEdgeHandler (void);
    void fallingEdgeHandler (void);
    
    void getSample(uint32_t);
    void getPhase(void);
    int myfix16_mul(int, int);
    int myfix16_lerp(int, int, uint16_t);
    void getAverages(void);
    
    int calcTime1Env(void);
    int calcTime2Env(void);
    int calcTime1Seq(void);
    int calcTime2Seq(void);

    
    void dacISR(void);
    

    void EXTI15_10_IRQHandler(void);
    void sampHoldA(void);
    void sampHoldB(void);
    
    bool sampleA;
    bool sampleB;
    bool resampleA;
    bool resampleB;
    bool holdA;
    bool holdB;
    float aSample;
    float bSample;
    
    typedef struct buffer{
        int buff[BUFF_SIZE];
        int writeIndex;
    }buffer;
    
    void write(buffer*,int);
    int readn(buffer*, int);
    
    void loadSampleArray(Family);
    void switchFamily(void);
    void fillFamilyArray(void);
    
    int oneTime = 0;
    

    
    
    
    
    

	// For more advanced Module features, read Rack's engine.hpp header file
	// - toJson, fromJson: serialization of internal data
	// - onSampleRateChange: event triggered by a change of sample rate
	// - onReset, onRandomize, onCreate, onDelete: implements special behavior when user clicks these from the context menu
};


void MyModule::step() {
    
    if (oneTime == 0) {
        oneTime = 1;
        fillFamilyArray();
        SET_GATEA;
        SET_GATEB;
        SET_DRUM_MODE_ON;
        SET_RGB_ON;
        SH_A_TRACK;
        SH_B_TRACK;
        SET_AMP_ON;
        SET_MORPH_ON;
        SET_PITCH_ON;
    }
    
    
    
    if (detectOn == 0) {
        readDetect();
    } else {
        readRelease(modeFlag);
    }
    
    if (displayNewMode == 1) {
        pressCounter ++;
        if (pressCounter > engineGetSampleRate()) {
            clearLEDs(); // get rid of our last mode display
            SET_RGB_ON;
            pressCounter = 0;
            displayNewMode = 0;
        }
    }
    
    trigButton.process(params[TRIGBUTTON_PARAM].value);
    trigInput.process(inputs[TRIG_INPUT].value);
    triggerState = (trigInput.state == SchmittTrigger::HIGH) || (trigButton.state == SchmittTrigger::HIGH);
    
    

    if(triggerState > lastTriggerState) {
        risingEdgeHandler();
    }
    else if (triggerState < lastTriggerState) {
        fallingEdgeHandler();
    }
        

    lastTriggerState = triggerState;
     


    freezeInput.process(inputs[FREEZE_INPUT].value);
    if (trigInput.state == SchmittTrigger::LOW) {
        dacISR();
    }

    
    float aIn = inputs[A_INPUT].value + (!inputs[A_INPUT].active) * params[A_PARAM].value;
    float bIn = (inputs[B_INPUT].active) * ((inputs[B_INPUT].value) * (params[B_PARAM].value)) + (!inputs[B_INPUT].active) * (5* (params[B_PARAM].value));
    
    if (sampleA) {
        aSample = aIn;
        sampleA = 0;
        holdA = 1;
    }
    
    if (sampleB) {
        bSample = bIn;
        sampleB = 0;
        holdB = 1;
    }
    
    if (holdA) {aIn = aSample;}
    if (holdB) {bIn = bSample;}
    
    outputs[MAIN_OUTPUT].value = bIn*(out/4095.0) + aIn*((4095-out)/4095.0);
     
    
    
    
}


void MyModule::risingEdgeHandler(void) {
    
    if (!(OSCILLATOR_ACTIVE)) {
        
        SET_OSCILLATOR_ACTIVE;
        incSign = 1;
        if (DRUM_MODE_ON) {
            SET_DRUM_ATTACK_ON;
        }
        else if (trigMode == 3) {
            SET_GATE_ON;
        }
        
    } else {
        
        if ((DRUM_MODE_ON) && !(DRUM_ATTACK_ON)) {
            
            RESET_DRUM_RELEASE_ON;
            SET_DRUM_ATTACK_ON;
            RESET_LAST_CYCLE;
            attackCount = releaseCount;
            
        } else {
        
        switch (trigMode) {
            case 1:
                
                position = 0;
                break;
                
            case 2:
                
                if ((PHASE_STATE) && (!switchARTimes)) {
                    switchARTimes = 1;
                    incSign = -1;
                }
                break;
                
            case 3:
                
                if (!(PHASE_STATE) && switchARTimes) {
                    switchARTimes = 0;
                    incSign = 1;
                }
                
                
                if ((PHASE_STATE) && !switchARTimes) {
                    switchARTimes = 1;
                    incSign = -1;
                }
                break;
                
            case 4:
                
                
                if (!(HOLD_AT_B)) {
                    if (incSign == 1) {
                        incSign = -1;
                    } else {
                        incSign = 1;
                    }
                }
                break;
                
            default:
                break;
            
        }
    }
    }
    if ((trigMode == 4) && (loopMode == 0)) { // regardless of whether the contour generator is at rest or not, toggle the gateOn every trigger with pendulum
        
        TOGGLE_GATE_ON;
        
    }
    
    
}


void MyModule::fallingEdgeHandler(void) {
    
    if (trigMode == gated && !(DRUM_MODE_ON)) { //aka, gate off when we aren't in drum mode
        
        if (position < span) { //if we release the gate before making it through attack, run back through attack at release speed
            
            switchARTimes = 1;
            incSign = -1; // -1 in int
            RESET_GATE_ON;
            
        } else { //if we get a release when we are at or after span, reset the contour generator behavior and let it finish release
            
            switchARTimes = 0;
            incSign = 1;
            RESET_GATE_ON;
            
        }
        
    }
}


//////////////// SAMPLE GENERATION SECTION /////////////////


//this is called to write our last sample to the dacs and generate a new sample
void MyModule::dacISR(void) {
    
    uint32_t storePhase;
    float expoCalc;
    
    
        if ((OSCILLATOR_ACTIVE)) {
            

            //get our averages for t2 and morph cv
            
            //getAverages();
            
            //hold the phase state (attack or release) from the last sample
            
            storePhase = PHASE_STATE;
            
            //call the function to advance the phase of the contour generator
            
            getPhase();
            
            //determine whether our newly calculated phase value "position" is in the "attack" or "release" portion of the cycle
            //call the function that generates our next sample based upon the phase value "position"
            //pass that function a 1 or a 0 to indicate whether we are in attack or release
            
            if (position < span) {
                RESET_PHASE_STATE;
                getSample(0);
            }
            if (position >= span) {
                SET_PHASE_STATE;
                getSample(1);
            }
            
            //calculate our "morph" parameter as a function of the morph knob, CV, and our contour generator frequency
            
            //we use morphAverage, which is a running sum of the last 8 values (a running average without the division)
            
            //we basically check whether the morphCV is less than or greater than half of its full scale value
            //if it is less than half of full scale, we do a linear interpolation between our current knob value and 0 using the CV value as the interpolation fraction
            //if it is more than half of full scale, we do a linear interpolation between our current knob value and full scale using the CV value as the interpolation fraction
            //in both of these cases, we generate our interpolation fraction by simple bit shifting a sum involving the halfway scale value and the CV
            //basically, we figure out how far our morphCV is away from the halfway point and then scale that up to a 16 bit integer
            //this works because we assume that all of our ADC ranges are a power of two
            
            //we then scale back our morph value as frequency increases. with a table that exhibits a steadily increasing spectral content as morph increases, this serves as anti-aliasing
            
            //first we clamp our "inc" variable (which is analogous to our contour generator frequency) to max out at 2^20
            //this is our "maximum frequency" at which we find that our "morph" parameter is scaled all the way to 0
            
            if (inc > 1048575) {
                inc = 1048575;
            }
            
            
            //is our CV greater than half-scale (the big numbers are because we have a running sum of 8
            if (morphCV >= 2048) {
                //this first does the aforementioned interpolation between the knob value and full scale then scales back the value according to frequency
                fixMorph = myfix16_lerp(morphKnob, 4095, (morphCV - 2048) << 5);
            }
            else {
                //analogous to above except in this case, morphCV is less than halfway
                fixMorph = myfix16_lerp(0, morphKnob, morphCV << 5);
            }
            
            

            
            //if we are in high speed and not looping, activate drum mode
            
            if (DRUM_MODE_ON) {
                
                //this next bit generates our expo decay and scales amp
                //it gets the appropriate value for the expo table and scales into the range of the fix16 fractional component (16 bits)
                
                if (DRUM_ATTACK_ON) {
                    
                    //maintain a software-based counter to increment through a linear "attack" slope sample per sample
                    attackCount = attackCount + 20;
                    
                    //if we get to our maximum value (this is the index where the value is 2^26)
                    //this overflow value gives us a known range for our values from the lookup table
                    if (attackCount >= 4094) {
                        //write to the flag word that we are done with our attack slope
                        RESET_DRUM_ATTACK_ON;
                        //since we use this to look up from the table, clamp it at our max value
                        attackCount = 4094;
                        //enable the timer that will generate our release slope
                        
                        //get our value from the lookup table, scale it, this will be 2^16
                        expoCalc = (powf(16, attackCount/4095) - 1) * 4369;
                        expoScale = (int) expoCalc;
                        //reset our counter to 0
                        attackCount = 0;
                        releaseCount = 4094;
                        //indicate that we are now in the "release" phase of our drum envelope
                        SET_DRUM_RELEASE_ON;
                    } else {
                        //otherwise, use our counter to look up a value from the table
                        //that gets scaled to 0 - 2^16
                        expoCalc = (powf(16, attackCount/4095) - 1) * 4369;
                        expoScale = (int) expoCalc;
                    }
                    
                } else if (DRUM_RELEASE_ON) {

                    releaseCount = releaseCount - (.01 + (1 - params[T2_PARAM].value) * (2 - .5 * inputs[T2_PARAM].value));
                    if (releaseCount <= 0) {
                        
                        releaseCount = 0;
                        
                       
                        SET_LAST_CYCLE;
                    }
                    
                    expoCalc = (powf(16, releaseCount/4095) - 1) * 4369;
                    expoScale = (int) expoCalc;
                    
                }
                

                

                
                //scale the contour generator, an integer 0 - 2^16 is 0-1 in our 16 bit fixed point
                if (AMP_ON) {
                    out = myfix16_mul(out, expoScale);
                }
                
                //apply the scaling value to the morph knob
                if (MORPH_ON) {
                    fixMorph = myfix16_mul(fixMorph, expoScale);
                }
                


                
            }
            
            // if we transition from one phase state to another, enable the transition handler interrupt
            
            if ((PHASE_STATE) != storePhase) {
                
                EXTI15_10_IRQHandler();
                
            }
            
        }
        
        else {
            
            //turn off the display if the contour generator is inactive and we are not switching modes
            
            if (RGB_ON) {
                
                LEDC_OFF
                LEDD_OFF
                lights[RED_LIGHT].value = 0;
                lights[GREEN_LIGHT].value = 0;
                lights[BLUE_LIGHT].value = 0;
                
            }
            
            
        }
    
    
}

void MyModule::getPhase(void) {
    
    static int incFromADCs;
    
    //calculate our increment value in high speed mode
    

    
    //define increment for env and seq modes using function pointers to the appropriate knob/cv combo
    //these can be swapped around by the retrigger interrupt

        switch (freqMode) {
                
                
            case 0:
                /*
                 contour generator frequency is a function of phase increment, wavetable size, and sample rate
                 we multiply our ADC readings (knobs and CVs) to get a phase increment for our wavetable playback
                 t1 knob and CV are mapped to an exponential curve with a lookup table
                 this is scaled to 1v/oct for the t1CV
                 t2 is linear FM
                 we fiddled with scale using constant values and bitshifts to make the controls span the audio range
                 if we are in drum mode, replace linear fm with the scaling factor from the drum envelope*/
                if (loopMode == 0) {
                    
                    incFromADCs = myfix16_mul(
                                              myfix16_mul(150000, lookuptable[time1CV] >> 5), lookuptable[(time1Knob >> 1) + 2047] >> 10) >> tableSizeCompensation;
                    
                    if (PITCH_ON) {incFromADCs = myfix16_mul(expoScale + 30000, incFromADCs);}
                    
                }
                
                else {
                    
                    incFromADCs = myfix16_mul(myfix16_mul(myfix16_mul((3000 - (4095 -time2CV)) << 7, lookuptable[time1CV] >> 7), lookuptable[time1Knob] >> 4), lookuptable[time2Knob >> 4]) >> tableSizeCompensation;
                    
                }
                break;
                
            case 1:
                if (!switchARTimes) {
                    
                    if ((position < span)) {
                        incFromADCs = calcTime1Env();
                    } else {
                        incFromADCs = calcTime2Env();
                    }
                    
                } else {
                    
                    if ((position < span)) {
                        incFromADCs = calcTime2Env();
                    } else {
                        incFromADCs = calcTime1Env();
                    }
                    
                }
                break;
                
            case 2:
                if (!switchARTimes) {
                    
                    if ((position < span)) {
                        incFromADCs = calcTime1Seq();
                    } else {
                        incFromADCs = calcTime2Seq();
                    }
                    
                } else {
                    
                    if ((position < span)) {
                        incFromADCs = calcTime2Seq();
                    } else {
                        incFromADCs = calcTime1Seq();
                    }
                }
                break;
                
            default:
                break;
                    
            }
    
    
    
    // apply the approrpiate signage to our inc per the retrigger behavior
    // this is how we get the contour generator to run backwards
    inc = incFromADCs * incSign;
    
    // if trigmode is gated and we arent in Drum Mode
    if (trigMode > 2 && !(DRUM_MODE_ON)) {
        
        // we look to see if we are about to increment past the attack->release transition
        
        if ((GATE_ON) && (abs(inc) > abs(span - position))) {
            
            // if so, we set a logic flag that we have frozen the contour generator in this transition
            SET_HOLD_AT_B;
            
            //and we hold it in place
            inc = span - position;
            
        }
        
        //if any of the above changes, we indicate that we are no longer frozen
        else {
            RESET_HOLD_AT_B;
        }
        
    }
    
    //this keeps us from asking the contour generator to jump all the way through the wavetable
    
    if (inc >= spanx2) {
        inc = spanx2 - 1;
    } else if (inc <= -spanx2) {
        inc = -spanx2 + 1;
    }
    
    //increment our phase pointer by the newly calculated increment value
    
    position = position + inc;
    
    // if we have incremented outside of our table, wrap back around to the other side and stop/reset if we are in LF 1 shot mode
    
    if (position >= spanx2) {
        
        position = position - spanx2;
        
        if ((loopMode == 0 && freqMode != 0) || (LAST_CYCLE)) {
            
            //this is the logic maintenance needed to properly put the contour generator to rest
            //this keeps behavior on the next trigger predictable
            
            RESET_LAST_CYCLE;
            RESET_OSCILLATOR_ACTIVE;
            RESET_DRUM_RELEASE_ON;
            incSign = 1;
            position = 0;
            SET_PHASE_STATE;
            SH_A_TRACK
            SH_B_TRACK
            if (RGB_ON) {
                LEDA_OFF
                LEDB_OFF
                LEDC_OFF
                LEDD_OFF
            }
            EXTI15_10_IRQHandler();
            
        }
        
    }
    // same as above but for when we are backtracking through the attack phase aka negative increment
    else if (position < 0) {
        
        position = position + spanx2;
        
        if ((loopMode == 0 && freqMode != 0) || (LAST_CYCLE)) {
            
            //same as above, we are putting our contour generator to rest
            
            RESET_LAST_CYCLE;
            RESET_OSCILLATOR_ACTIVE;
            RESET_DRUM_RELEASE_ON;
            incSign = 1;
            position = 0;
            RESET_PHASE_STATE;
            SH_A_TRACK
            SH_B_TRACK
            if (RGB_ON) {
                LEDA_OFF
                LEDB_OFF
                LEDC_OFF
                LEDD_OFF
            }
            EXTI15_10_IRQHandler();
            
        }
        
    }
    
}

//multiply our knobs with our CVs with the appropriate scaling per the current frequency mode

int MyModule::calcTime1Env(void) {
    
    time1 = ((lookuptable[4095 - time1CV] >> 13) * (lookuptable[(4095 - time1Knob)] >> 13)) >> (5 + tableSizeCompensation);
    return time1;
    
}

int MyModule::calcTime2Env(void) {
    
    time2 = ((lookuptable[4095 - time2CV] >> 13) * (lookuptable[(4095 - time2Knob)] >> 13)) >> (7 + tableSizeCompensation);
    return time2;
    
}

int MyModule::calcTime1Seq(void) {
    
    time1 = ((lookuptable[4095 - time1CV] >> 13) * (lookuptable[(4095 - time1Knob)] >> 13)) >> (9 + tableSizeCompensation);
    return time1;
    
}

int MyModule::calcTime2Seq(void) {
    
    time2 = ((lookuptable[4095 - time2CV] >> 13) * (lookuptable[(4095 - time2Knob)] >> 13)) >> (9 + tableSizeCompensation);
    return time2;
    
}

void MyModule::getSample(uint32_t phase) {
    
    // in this function, we use our phase position to get the sample to give to our dacs using biinterpolation
    // essentially, we need to get 4 sample values and two "fractional arguments" (where are we at in between those sample values)
    // think of locating a position on a rectangular surface based upon how far you are between the bottom and top and how far you are between the left and right sides
    // that is basically what we are doing here
    
    uint32_t LnSample; // indicates the nearest neighbor to our position in the wavetable
    uint32_t LnFamily; // indicates the nearest neighbor (wavetable) to our morph value in the family
    uint32_t phaseFrac; // indicates the factional distance between our nearest neighbors in the wavetable
    uint32_t morphFrac; // indicates the factional distance between our nearest neighbors in the family
    uint32_t Lnvalue1; // sample values used by our two interpolations in
    uint32_t Rnvalue1;
    uint32_t Lnvalue2;
    uint32_t Rnvalue2;
    uint32_t interp1; // results of those two interpolations
    uint32_t interp2;
    
    // 0 means we are attacking from A to B, aka we are reading from the slopetable from left to right
    // 1 means we are releasing from B to A, aka we are reading from the slopetable from right to left
    if (phase == 0) {
        
        // we do a lot of tricky bitshifting to take advantage of the structure of a 16 bit fixed point number
        //truncate position then add one to find the relevant indices for our wavetables, first within the wavetable then the actual wavetables in the family
        LnSample = (position >> 16);
        
        //bit shifting to divide by the correct power of two takes a 12 bit number (our fixMorph) and returns the a quotient in the range of our family size
        LnFamily = fixMorph >> morphBitShiftRight;
        
        //determine the fractional part of our phase position by masking off the integer
        phaseFrac = 0x0000FFFF & position;
        // we have to calculate the fractional portion and get it up to full scale
        morphFrac = (fixMorph - (LnFamily << morphBitShiftRight))
        << morphBitShiftLeft;
        
        //get values from the relevant wavetables
        
        Lnvalue1 = MyModule::attackHoldArray[LnFamily][LnSample];
        Rnvalue1 = MyModule::attackHoldArray[LnFamily][LnSample + 1];
        Lnvalue2 = MyModule::attackHoldArray[LnFamily + 1][LnSample];
        Rnvalue2 = MyModule::attackHoldArray[LnFamily + 1][LnSample + 1];
        
         
        //find the interpolated values for the adjacent wavetables using an efficient fixed point linear interpolation
        interp1 = myfix16_lerp(Lnvalue1, Lnvalue2, morphFrac);
        interp2 = myfix16_lerp(Rnvalue1, Rnvalue2, morphFrac);
        
        //interpolate between those based upon the fractional part of our phase pointer
        
        out = myfix16_lerp(interp1, interp2, phaseFrac) >> 3;
        
        //we use the interpolated nearest neighbor samples to determine the sign of rate of change
        //aka, are we moving towrds a, or towards b
        //we use this to generate our gate output
        if (interp1 < interp2) {
            EOA_GATE_HIGH
            if (DELTAB) {
                EOA_JACK_HIGH
                if (RGB_ON) {
                    LEDC_ON
                }
            }
            if (DELTAA) {
                EOR_JACK_LOW
                if (RGB_ON) {
                    LEDD_OFF
                }
            }
        } else if (interp2 < interp1) {
            EOA_GATE_LOW
            if (DELTAB) {
                EOA_JACK_LOW
                if (RGB_ON) {
                    LEDC_OFF
                }
            }
            if (DELTAA) {
                EOR_JACK_HIGH
                if (RGB_ON) {
                    LEDD_ON
                }
            }
        }
        
        if (RGB_ON) {
            //if the runtime display is on, show the current value of our contour generator in blue and morph in green
            lights[BLUE_LIGHT].setBrightnessSmooth(out/4095.0);
            lights[GREEN_LIGHT].setBrightnessSmooth(fixMorph/4095.0);
        }
    }
    
    else {
        
        //this section is mostly the same as the "attack" above
        // however, we reflect position back over span to move backwards through our wavetable slope
        LnSample = ((spanx2 - position) >> 16);
        
        LnFamily = fixMorph >> morphBitShiftRight;
        
        // here, again, we use that reflected value
        phaseFrac = 0x0000FFFF & (spanx2 - position);
        
        morphFrac = (uint16_t) ((fixMorph - (LnFamily << morphBitShiftRight))
                                << morphBitShiftLeft);
        
        
        Lnvalue1 = MyModule::releaseHoldArray[LnFamily][LnSample];
        Rnvalue1 = MyModule::releaseHoldArray[LnFamily][LnSample + 1];
        Lnvalue2 = MyModule::releaseHoldArray[LnFamily + 1][LnSample];
        Rnvalue2 = MyModule::releaseHoldArray[LnFamily + 1][LnSample + 1];
        
        
        interp1 = myfix16_lerp(Lnvalue1, Lnvalue2, morphFrac);
        interp2 = myfix16_lerp(Rnvalue1, Rnvalue2, morphFrac);
        
        out = myfix16_lerp(interp1, interp2, phaseFrac) >> 3;
        
        if (interp1 < interp2) {
            EOA_GATE_HIGH
            if (DELTAB) {
                EOA_JACK_HIGH
                if (RGB_ON) {
                    LEDD_ON
                }
            }
            if (DELTAA) {
                EOR_JACK_LOW
                if (RGB_ON) {
                    LEDC_OFF
                }
            }
        } else if (interp2 < interp1) {
            EOA_GATE_LOW
            if (DELTAB) {
                EOA_JACK_LOW
                if (RGB_ON) {
                    LEDD_OFF
                }
            }
            if (DELTAA) {
                EOR_JACK_HIGH
                if (RGB_ON) {
                    LEDC_ON
                }
            }
        }
        
        //if the runtime display is on, show the current value of our contour generator in blue and morph in green
        if (RGB_ON) {
            lights[RED_LIGHT].setBrightnessSmooth(out/4095.0);
            lights[GREEN_LIGHT].setBrightnessSmooth(fixMorph/4095.0);
        }
    }
    
}

//helper functions to maintain and read from a circular buffer

void MyModule::write(buffer* buffer, int value) {
    buffer->buff[(buffer->writeIndex++) & BUFF_SIZE_MASK] = value;
}

int MyModule::readn(buffer* buffer, int Xn) {
    return buffer->buff[(buffer->writeIndex + (~Xn)) & BUFF_SIZE_MASK];
}

//noise at the morph CV is noise in the contour generator signal

void MyModule::getAverages(void) {
    
    static buffer morphCVBuffer;
    
    //keep a running sum of our last 8 morph CV readings
    
    morphAverage = (morphAverage + morphCV- readn(&morphCVBuffer, 31));
    
    write(&morphCVBuffer, morphCV);
    
}

//our 16 bit fixed point multiply and linear interpolate functions

int MyModule::myfix16_mul(int in0, int in1) {
    //taken from the fixmathlib library
    int64_t result = (uint64_t) in0 * in1;
    return result >> 16;
}

int MyModule::myfix16_lerp(int in0, int in1, uint16_t inFract) {
    //taken from the fixmathlib library
    int64_t tempOut = int64_mul_i32_i32(in0, (((int32_t) 1 << 16) - inFract));
    tempOut = int64_add(tempOut, int64_mul_i32_i32(in1, inFract));
    tempOut = int64_shift(tempOut, -16);
    return (int) int64_lo(tempOut);
}



////////////functions from the interrupt c file//////////////////

void MyModule::EXTI15_10_IRQHandler(void) {
    
    switchARTimes = 0;
    
    if (!(PHASE_STATE)) {
        
        if (trigMode == nongatedretrigger) {
            incSign = 1;
            /*
            if (freqMode == 1) {
                releaseTime = calcTime2Env;
            } else if (freqMode == 2) {
                releaseTime = calcTime2Seq;
            }*/
        }

        EOA_GATE_LOW
        
        

            EOR_JACK_HIGH
            if (RGB_ON) {
                LEDC_ON
            }

            EOA_JACK_LOW
            if (RGB_ON) {
                LEDD_OFF
            }

        
        
        if (inc < 0) {
            sampHoldB();
        } else if (OSCILLATOR_ACTIVE) {
            sampHoldA();
        }
        
        if (RGB_ON) {
            lights[RED_LIGHT].value = 0;
        }
    
    } else {
        
        EOA_GATE_HIGH

        


            EOA_JACK_HIGH
            if (RGB_ON) {
                LEDD_ON
            }

            EOR_JACK_LOW
            if (RGB_ON) {
                LEDC_OFF
            }

        
        
        
        
        if (inc < 0) {
            sampHoldA();
        } else {
            sampHoldB();
        }
        
        if (RGB_ON) {
            lights[BLUE_LIGHT].value = 0;
        }
        
    }
    
}

void MyModule::sampHoldB(void) {
    
    switch (sampleHoldMode) {
            
        case a:
            holdA = 0;
            if (RGB_ON) {
                LEDA_ON
            }
            break;
            
            // case b: b remains sampled
            
        case ab:
            holdA = 0;
            if (RGB_ON) {
                LEDA_OFF
            }
            // b remains sampled
            break;
            
        case antidecimate:
            sampleB = 1;
            holdA = 0;
            if (RGB_ON) {
                LEDB_OFF
                LEDA_ON
            }
            break;
            
        case decimate:
            sampleA = 1;
            if (RGB_ON) {
                LEDA_OFF
                LEDB_OFF
            }

            break;
            
        default:
            break;
            
    }
    
}

void MyModule::sampHoldA(void) {
    
    switch (sampleHoldMode) {
            
        case a:
            sampleA = 1;
            if (RGB_ON) {
                LEDA_OFF
            }
            break;
            
        case b:
            sampleB = 1;
            /*
            __HAL_TIM_SET_COUNTER(&htim8, 0);
            __HAL_TIM_ENABLE(&htim8);
             */
            if (RGB_ON) {
                LEDB_OFF
            }
            break;
            
        case ab:
            
            sampleA = 1;
            sampleB = 1;
            if (RGB_ON) {
                LEDB_OFF
                LEDA_ON
            }
            /*
            __HAL_TIM_SET_COUNTER(&htim8, 0);
            __HAL_TIM_ENABLE(&htim8);
             */
            break;
            
        case antidecimate:
            sampleA = 1;
            holdB = 0;
            if (RGB_ON) {
                LEDA_OFF
                LEDB_ON
            }
            break;
            
        case decimate:
            sampleB = 1;
            if (RGB_ON) {
                LEDA_OFF
                ;
                LEDB_OFF
                ;
            }
            /*
            __HAL_TIM_SET_COUNTER(&htim7, 0);
            __HAL_TIM_ENABLE(&htim7);
             */
            break;
            
        default:
            break;
            
    }
    
}



/////////////// Trigger Logic ////////////////////////








///////////// USER INTERFACE SECTION /////////////////



void MyModule::readDetect() {
    
    //check to see if any of our touch sensors have gone into detect state
    
    if (params[FREQ_PARAM].value == 1) {
        RESET_RGB_ON; //turn off the runtime display
        modeFlag = 1; //indicate to the other mode change functions that we have pressed the freqMode button
        detectOn = 1; //indicate that a touch sensor was in detect state during this aquisition cycle
        clearLEDs(); //wipe the vestiges of our runtimme display
        pressCounter = 0; //reset the timer that we use for mode change timeout
        showMode(freqMode); //show our currentm mode
    }
    if (params[TRIG_PARAM].value == 1) {
        RESET_RGB_ON;
        modeFlag = 2; //indicate to the other mode change functions that we have pressed the trigger mode button
        detectOn = 1;
        clearLEDs();
        pressCounter = 0;
        showMode(trigMode);
    }
    if (params[LOOP_PARAM].value == 1) {
        RESET_RGB_ON;
        modeFlag = 3; //indicate to the other mode change functions that we have pressed the loop button
        detectOn = 1;
        clearLEDs();
        pressCounter = 0;
        showMode(loopMode);
    }
    if (params[SH_PARAM].value == 1) {
        RESET_RGB_ON;
        modeFlag = 4; //indicate to the other mode change functions that we have pressed the sample and hold mode button
        detectOn = 1;
        clearLEDs();
        pressCounter = 0;
        showMode(sampleHoldMode);
    }
    if (params[UP_PARAM].value == 1) {
        RESET_RGB_ON;
        modeFlag = 5; //indicate to the other mode change functions that we have pressed the family up button
        detectOn = 1;
        clearLEDs();
        pressCounter = 0;
        showMode(familyIndicator);
    }
    if (params[DOWN_PARAM].value == 1) {
        RESET_RGB_ON;
        modeFlag = 6; //indicate to the other mode change functions that we have pressed the family down button
        detectOn = 1;
        clearLEDs();
        pressCounter = 0;
        showMode(familyIndicator);
    }
    
}

void MyModule::readRelease(uint32_t modeFlagHolder) {
    
    // look for a change to release state on the button that was pressed (passed in with the function argument)
    
    pressCounter++;
    
    switch (modeFlagHolder) {
            
        case 1:
            
            if (params[FREQ_PARAM].value == 0) {
                detectOn = 0; // indicate that we no longer have a touch sensor in detect state
                clearLEDs(); // clear the display that showed the current mode
                handleRelease(modeFlagHolder); //take the appropriate action per the button that had been pressed
            }
            break;
            
        case 2:
            
            if (params[TRIG_PARAM].value == 0) {
                detectOn = 0;
                clearLEDs();
                handleRelease(modeFlagHolder);
            }
            break;
            
        case 3:
            
            if (params[LOOP_PARAM].value == 0) {
                detectOn = 0;
                clearLEDs();
                handleRelease(modeFlagHolder);
            }
            break;
            
        case 4:
            
            if (params[SH_PARAM].value == 0) {
                detectOn = 0;
                clearLEDs();
                handleRelease(modeFlagHolder);
            }
            break;
            
        case 5:
            
            if (params[UP_PARAM].value == 0) {
                detectOn = 0;
                clearLEDs();
                handleRelease(modeFlagHolder);
            }
            break;
            
        case 6:
            
            if (params[DOWN_PARAM].value == 0) {
                detectOn = 0;
                clearLEDs();
                handleRelease(modeFlagHolder);
            }
            break;
            
            
    }
    
}

void MyModule::handleRelease(uint32_t pinMode) {
    if (pressCounter < engineGetSampleRate()) {
        // if we havent exceeded the mode change timeout, change the appropriate mode and then display the new mode
        // current value is probably too short
        changeMode(pinMode);
        switch (pinMode) {
            case 1:
                showMode(freqMode);
                break;
            case 2:
                showMode(trigMode);
                break;
            case 3:
                showMode(loopMode);
                break;
            case 4:
                showMode(sampleHoldMode);
                break;
            case 5:
                showMode(familyIndicator);
                break;
            case 6:
                showMode(familyIndicator);
                break;
            case 7:
                modeFlag = 2;
                showMode(logicOutA);
                break;
            case 8:
                modeFlag = 2;
                showMode(logicOutB);
                break;
        }
        displayNewMode = 1;
        
    } else {
        
        clearLEDs();
        SET_RGB_ON;
    }
    
    pressCounter = 0;
}

void MyModule::changeMode(uint32_t mode) {
    
    int modeHolder;
    
    if (mode == 1) {
        // toggle through our 3 freqMode modes
        modeHolder = freqMode;
        modeHolder = (modeHolder + 1) % 3;
        freqMode = modeHolder;
        
        holdState = (holdState & 0b1111111111111001) | (freqMode << 1);
        
        switchFamily();
        
        if (freqMode == 0 && loopMode == noloop) {
            //since this parameter can throw us into drum mode, initialize the proper modulation flags per trigger mode
            SET_DRUM_MODE_ON;
            
            switch (trigMode) {
                case 0:
                    SET_AMP_ON;
                    SET_PITCH_ON;
                    SET_MORPH_ON;
                    break;
                case 1:
                    SET_AMP_ON;
                    RESET_PITCH_ON;
                    SET_MORPH_ON;
                    break;
                case 2:
                    SET_AMP_ON;
                    RESET_PITCH_ON;
                    RESET_MORPH_ON;
                    break;
                case 3:
                    RESET_AMP_ON;
                    RESET_PITCH_ON;
                    SET_MORPH_ON;
                    break;
                case 4:
                    RESET_AMP_ON;
                    SET_PITCH_ON;
                    SET_MORPH_ON;
                    break;
            }
            
        } else {
            // if we didnt just go into drum mode, make sure drum mode is off
            RESET_DRUM_MODE_ON;
            RESET_AMP_ON;
            RESET_PITCH_ON;
            RESET_MORPH_ON;
            
            // set the appropriate time calculation functions
            
        }
    }
    else if (mode == 2) {
        modeHolder = trigMode;
        modeHolder = (modeHolder + 1) % 5;
        trigMode = modeHolder;
        //initialize some essential retrigger variables
        
        holdState = (holdState & 0b1111111111000111) | (trigMode << 3);
        
        //incSign = 1;
        RESET_GATE_ON;
        //if drum mode is on, toggle through sets of modulation destinations
        switch (trigMode) {
            case 0:
                SET_AMP_ON;
                SET_PITCH_ON;
                SET_MORPH_ON;
                break;
            case 1:
                SET_AMP_ON;
                RESET_PITCH_ON;
                SET_MORPH_ON;
                break;
            case 2:
                SET_AMP_ON;
                RESET_PITCH_ON;
                RESET_MORPH_ON;
                break;
            case 3:
                RESET_AMP_ON;
                RESET_PITCH_ON;
                SET_MORPH_ON;
                break;
            case 4:
                RESET_AMP_ON;
                SET_PITCH_ON;
                SET_MORPH_ON;
                break;
                
        }
    }
    else if (mode == 3) {
        loopMode = (loopMode + 1) % 2;
        
        holdState = (holdState & 0b1111111111111110) | loopMode;
        
        if (loopMode == 0) {
            // signal to our oscillator that it should put itself to sleep
            SET_LAST_CYCLE;
            // switching to no loop when freqMode is at audio activates drum mode
            // this is about the same as what we do in the freqMode mode case above
            if (freqMode == 0) {
                SET_DRUM_MODE_ON;
                switch (trigMode) {
                    case 0:
                        SET_AMP_ON;
                        SET_PITCH_ON;
                        SET_MORPH_ON;
                        break;
                    case 1:
                        SET_AMP_ON;
                        RESET_PITCH_ON;
                        SET_MORPH_ON;
                        break;
                    case 2:
                        SET_AMP_ON;
                        RESET_PITCH_ON;
                        RESET_MORPH_ON;
                        break;
                    case 3:
                        RESET_AMP_ON;
                        RESET_PITCH_ON;
                        SET_MORPH_ON;
                        break;
                    case 4:
                        RESET_AMP_ON;
                        SET_PITCH_ON;
                        SET_MORPH_ON;
                        break;
                        
                }
            } else {
                RESET_DRUM_MODE_ON;
                RESET_AMP_ON;
                RESET_PITCH_ON;
                RESET_MORPH_ON;
            }
        } else {
            RESET_LAST_CYCLE;
            RESET_DRUM_MODE_ON;
            RESET_AMP_ON;
            RESET_PITCH_ON;
            RESET_MORPH_ON;
            //set our oscillator active flag so enabling loop starts playback
            //SET_OSCILLATOR_ACTIVE;
        }
        
    }
    else if (mode == 4) {
        sampleHoldMode = (sampleHoldMode + 1) % 6;
        
        holdState = (holdState & 0b1111111000111111) | (sampleHoldMode << 6);
        
        
    }
    else if (mode == 5) {
        // increment our family pointer and swap in the correct family
        
        familyIndicator = (familyIndicator + 1) % 8;
        switchFamily();
        holdState = (holdState & 0b1111000111111111) | (familyIndicator << 9);
    }
    else if (mode == 6) {
        // wrap back to the end of the array of families if we go back from the first entry
        // otherwise same as above
        if (familyIndicator == 0) {
            familyIndicator = 7;
        } else {
            familyIndicator = (familyIndicator - 1);
        }
        switchFamily();
        holdState = (holdState & 0b1111000111111111) | (familyIndicator << 9);
    }
    else if (mode == 7) {
        logicOutA = (logicOutA + 1) % 3;
        holdState = (holdState & 0b1100111111111111) | (logicOutA << 13);;
        switch (logicOutA) {
            case 0:
                SET_GATEA;
                RESET_TRIGA;
                RESET_DELTAA;
                break;
            case 1:
                RESET_GATEA;
                SET_TRIGA;
                RESET_DELTAA;
                break;
            case 2:
                RESET_GATEA;
                RESET_TRIGA;
                SET_DELTAA;
                break;
        }
        
        
    }
    else if (mode == 8) {
        logicOutB = (logicOutB + 1) % 3;
        holdState = (holdState & 0b0011111111111111) | (logicOutB << 15);
        switch (logicOutB) {
            case 0:
                SET_GATEB;
                RESET_TRIGB;
                RESET_DELTAB;
                break;
            case 1:
                RESET_GATEB;
                SET_TRIGB;
                RESET_DELTAB;
                break;
            case 2:
                RESET_GATEB;
                RESET_TRIGB;
                SET_DELTAB;
                break;
        }
        
    }
    
    
    
}

void MyModule::showMode(uint32_t currentmode) {
    
    // if we are switching families, show a color corresponding to that family
    if (modeFlag == 5 || modeFlag == 6) {
        familyRGB();
    }
    
    else {
        switch (currentmode) {
                // represent a 4 bit number with our LEDs
                // NEEDS WORK
            case 0:
                LEDA_ON
                break;
            case 1:
                LEDC_ON
                break;
            case 2:
                LEDB_ON
                break;
            case 3:
                LEDD_ON
                break;
            case 4:
                LEDA_ON
                LEDC_ON
                break;
            case 5:
                LEDB_ON
                LEDD_ON
                break;
        }
    }
    
    
}

void MyModule::familyRGB(void) {
    
    switch (freqMode) {
        case 0:
            lights[RED_LIGHT].value = 1;
            lights[GREEN_LIGHT].value = 0;
            lights[BLUE_LIGHT].value = 0;
            break;
            
        case 1:
            lights[RED_LIGHT].value = 0;
            lights[GREEN_LIGHT].value = 1;
            lights[BLUE_LIGHT].value = 0;
            break;
            
        case 2:
            lights[RED_LIGHT].value = 0;
            lights[GREEN_LIGHT].value = 0;
            lights[BLUE_LIGHT].value = 1;
    }
    
    switch (familyIndicator) {
        case 0:
            LEDA_ON
            break;
        case 1:
            LEDC_ON
            break;
        case 2:
            LEDB_ON
            break;
            
        case 3:
            LEDD_ON
            break;
        case 4:
            LEDA_ON
            LEDC_ON
            break;
        case 5:
            LEDB_ON
            LEDD_ON
            break;
        case 6:
            LEDA_ON;
            LEDB_ON;
            break;
        case 7:
            LEDC_ON;
            LEDD_ON;
            break;
            
    }
    
    
    
}
void MyModule::clearLEDs(void) {
    //pretty self explanatory
    
    LEDA_OFF
    LEDB_OFF
    LEDC_OFF
    LEDD_OFF
    
    //blank the LEDs
    lights[RED_LIGHT].value = 0;
    lights[GREEN_LIGHT].value = 0;
    lights[BLUE_LIGHT].value = 0;
    
}









MyModuleWidget::MyModuleWidget() {
	MyModule *module = new MyModule();
	setModule(module);
	box.size = Vec(12 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT);

	{
		SVGPanel *panel = new SVGPanel();
		panel->box.size = box.size;
		panel->setBackground(SVG::load(assetPlugin(plugin, "res/via_freerunning_no_margin.svg")));
		addChild(panel);
	}

	addChild(createScrew<ScrewSilver>(Vec(RACK_GRID_WIDTH, 0)));
	addChild(createScrew<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, 0)));
	addChild(createScrew<ScrewSilver>(Vec(RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
	addChild(createScrew<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));

	addParam(createParam<Davies1900hBlackKnob>(Vec(11.5, 33), module, MyModule::T1_PARAM, 0, 1.0, 0.0));
    addParam(createParam<Davies1900hBlackKnob>(Vec(70.5, 33), module, MyModule::T2_PARAM, 0, 1.0, 0.0));
    addParam(createParam<Davies1900hBlackKnob>(Vec(70.5, 173), module, MyModule::MORPH_PARAM, 0, 1.0, 0.0));
    addParam(createParam<Davies1900hBlackKnob>(Vec(11.5, 173), module, MyModule::B_PARAM, -1.0, 1.0, 0.0));
    addParam(createParam<Davies1900hBlackKnob>(Vec(132.5, 33), module, MyModule::T2AMT_PARAM, 0, 1.0, 0.0));
    addParam(createParam<Davies1900hBlackKnob>(Vec(132.5, 104), module, MyModule::A_PARAM, -5.0, 5.0, 0.0));
    addParam(createParam<Davies1900hBlackKnob>(Vec(132.5, 173), module, MyModule::MORPHAMT_PARAM, 0, 1.0, 0.0));
    
    addParam(createParam<SH_Button>(Vec(8.5, 86), module, MyModule::SH_PARAM, 0.0, 1.0, 0.0));
    addParam(createParam<Up_Button>(Vec(47, 82.5), module, MyModule::UP_PARAM, 0.0, 1.0, 0.0));
    addParam(createParam<Freq_Button>(Vec(85, 86), module, MyModule::FREQ_PARAM, 0.0, 1.0, 0.0));
    addParam(createParam<Trig_Button>(Vec(8.5, 137), module, MyModule::TRIG_PARAM, 0.0, 1.0, 0.0));
    addParam(createParam<Down_Button>(Vec(46, 138), module, MyModule::DOWN_PARAM, 0.0, 1.0, 0.0));
    addParam(createParam<Loop_Button>(Vec(85, 137), module, MyModule::LOOP_PARAM, 0.0, 1.0, 0.0));
    
    addParam(createParam<VIA_manual_button>(Vec(133.5, 320), module, MyModule::TRIGBUTTON_PARAM, 0.0, 5.0, 0.0));


	addInput(createInput<PJ301MPort>(Vec(9, 242), module, MyModule::A_INPUT));
    addInput(createInput<PJ301MPort>(Vec(9, 283.5), module, MyModule::B_INPUT));
    addInput(createInput<PJ301MPort>(Vec(9, 326), module, MyModule::TRIG_INPUT));
    addInput(createInput<PJ301MPort>(Vec(47.0, 242), module, MyModule::T1_INPUT));
    addInput(createInput<PJ301MPort>(Vec(47.0, 283.5), module, MyModule::T2_INPUT));
    addInput(createInput<PJ301MPort>(Vec(47.0, 326), module, MyModule::MORPH_INPUT));
    addInput(createInput<PJ301MPort>(Vec(135.5, 283.5), module, MyModule::FREEZE_INPUT));

	addOutput(createOutput<PJ301MPort>(Vec(84.8, 242), module, MyModule::LOGICA_OUTPUT));
    addOutput(createOutput<PJ301MPort>(Vec(84.8, 283.5), module, MyModule::LOGICB_OUTPUT));
    addOutput(createOutput<PJ301MPort>(Vec(84.8, 326), module, MyModule::MAIN_OUTPUT));
    addOutput(createOutput<PJ301MPort>(Vec(135.5, 242), module, MyModule::DELTA_OUTPUT));

	addChild(createLight<MediumLight<WhiteLight>>(Vec(35, 270), module, MyModule::LED1_LIGHT));
    addChild(createLight<MediumLight<WhiteLight>>(Vec(75, 270), module, MyModule::LED2_LIGHT));
    addChild(createLight<MediumLight<WhiteLight>>(Vec(35, 314), module, MyModule::LED3_LIGHT));
    addChild(createLight<MediumLight<WhiteLight>>(Vec(75, 314), module, MyModule::LED4_LIGHT));
    addChild(createLight<LargeLight<RedGreenBlueLight>>(Vec(51.5, 214), module, MyModule::RED_LIGHT));
}



////////// tables stuff ////////////




// specify the family in our family bank per speed

void MyModule::fillFamilyArray(void) {
    
    familyArray[audio][0] = tenor48;
    familyArray[audio][1] = artificial_1;
    familyArray[audio][2] = impevens;
    familyArray[audio][3] = ascendingAdditiveClamp;
    familyArray[audio][4] = skipSaw;
    familyArray[audio][5] = triOdd;
    familyArray[audio][6] = moogImpossibleTri;
    familyArray[audio][7] = moogSquare;
    
    familyArray[env][0] = superEllipse1Sym;
    familyArray[env][1] = superEllipse1Asym;
    familyArray[env][2] = doubleLump2ndDegLinAtk;
    familyArray[env][3] = lump2ndDegLinAtk;
    familyArray[env][4] = steps;
    familyArray[env][5] = moogSquare;
    familyArray[env][6] = threeSineFoldsLinAtk;
    familyArray[env][7] = threeBounceLinAtk;
    
    familyArray[seq][0] = skipSaw;
    familyArray[seq][1] = exciteBike;
    familyArray[seq][2] = bounce;
    familyArray[seq][3] = sawBend;
    familyArray[seq][4] = triOdd;
    familyArray[seq][5] = moogSquare;
    familyArray[seq][6] = algerian;
    familyArray[seq][7] = exciteBike;
    
    currentFamily = familyArray[0][0];
    switchFamily();
    
}

// this sets the flags to be used in the interrupt and also fills the holding array on the heap

void MyModule::switchFamily(void) {
    currentFamily = familyArray[freqMode][familyIndicator];
    
    currentFamily = familyArray[freqMode][familyIndicator];
    loadSampleArray(currentFamily);
    
    span = (currentFamily.tableLength) << 16;
    spanx2 = (currentFamily.tableLength) << 17;
    switch (currentFamily.familySize) {
            // these are values that properly allow us to select a family and interpolation fraction for our morph
        case 3:
            morphBitShiftRight = 11;
            morphBitShiftLeft = 5;
            break;
            
        case 5:
            morphBitShiftRight = 10;
            morphBitShiftLeft = 6;
            break;
            
        case 9:
            morphBitShiftRight = 9;
            morphBitShiftLeft = 7;
            break;
            
        case 17:
            morphBitShiftRight = 8;
            morphBitShiftLeft = 8;
            break;
            
        case 33:
            morphBitShiftRight = 7;
            morphBitShiftLeft = 9;
            break;
            
    }
    switch (currentFamily.tableLength) {
            // these are values that properly allow us to select a family and interpolation fraction for our morph
        case 4:
            tableSizeCompensation = 5;
            break;
            
        case 8:
            tableSizeCompensation = 4;
            break;
            
        case 16:
            tableSizeCompensation = 3;
            break;
            
        case 32:
            tableSizeCompensation = 2;
            break;
            
        case 64:
            tableSizeCompensation = 1;
            break;
            
        case 128:
            tableSizeCompensation = 0;
            
    }
}






//this actually shuttles the data from flash to ram and fills our holding array

void MyModule::loadSampleArray(Family family) {
    
    Family familyHolder = family;
    
    
    for (uint32_t i = 0; i < familyHolder.familySize; i++) {
        for (uint32_t j = 0; j <= familyHolder.tableLength; j++) {

            MyModule::attackHoldArray[i][j] = familyHolder.attackFamily[i][j];
            MyModule::releaseHoldArray[i][j] = familyHolder.releaseFamily[i][j];
            

        }
    }
}




















///////////////////////// TABLE CLASS ///////////////////////////////




